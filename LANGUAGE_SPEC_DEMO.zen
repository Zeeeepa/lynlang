// Zen Language - Demonstration of Working Features
// This showcases the core philosophy and working implementation

// ============================================================================
// CORE PRINCIPLES
// ============================================================================
// - No keywords: no if/else/while/for/match/async/await/impl/trait/class/null
// - Pattern matching with `?` operator replaces conditionals
// - No null - only Option<T> with Some(T) and None
// - Assignment: `=` (immutable), `::=` (mutable)
// - Ranges and .loop() for iteration

// ============================================================================
// WORKING DEMONSTRATION
// ============================================================================

{ io } = @std

// Define Option and Result types for no-null safety
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

// Simple struct definition
Point: {
    x: f64,
    y: f64,
}

main = () void {
    io.println("=== Zen Language Demo ===")
    io.println("")
    
    // 1. IMMUTABLE BY DEFAULT
    io.println("1. Variables are immutable by default:")
    x = 42
    io.println("   x = ${x}")
    
    // 2. EXPLICIT MUTABILITY
    io.println("")
    io.println("2. Mutable variables use ::= operator:")
    counter ::= 0
    counter = counter + 1
    counter = counter + 1
    io.println("   counter after increments: ${counter}")
    
    // 3. NO IF/ELSE - PATTERN MATCHING INSTEAD
    io.println("")
    io.println("3. Pattern matching replaces if/else:")
    is_ready = true
    is_ready ? {
        io.println("   System is ready!")
    }
    
    has_data = false
    has_data ?
        | true { io.println("   Processing data...") }
        | false { io.println("   No data available") }
    
    // 4. NO NULL - OPTION TYPES
    io.println("")
    io.println("4. No null values - use Option type:")
    maybe_value = Some(100)
    maybe_value ?
        | Some(v) { io.println("   Found value: ${v}") }
        | None { io.println("   No value") }
    
    empty = None
    empty ?
        | Some(v) { io.println("   Should not print") }
        | None { io.println("   Empty as expected") }
    
    // 5. ERROR HANDLING WITH RESULT
    io.println("")
    io.println("5. Error handling with Result type:")
    success = Ok(42.0)
    success ?
        | Ok(val) { io.println("   Success: ${val}") }
        | Err(msg) { io.println("   Error: ${msg}") }
    
    failure = Err("Connection timeout")
    failure ?
        | Ok(val) { io.println("   Value: ${val}") }
        | Err(msg) { io.println("   Error: ${msg}") }
    
    // 6. NO FOR/WHILE - RANGE LOOPS
    io.println("")
    io.println("6. Iteration with ranges and .loop():")
    io.println("   Exclusive range (0..3):")
    (0..3).loop((i) {
        io.println("     Index: ${i}")
    })
    
    io.println("   Inclusive range (1..=3):")
    (1..=3).loop((i) {
        io.println("     Value: ${i}")
    })
    
    // 7. STRUCT CREATION
    io.println("")
    io.println("7. Struct creation and usage:")
    origin = Point { x: 0.0, y: 0.0 }
    destination = Point { x: 10.0, y: 20.0 }
    io.println("   Created points successfully")
    
    // 8. COMBINING FEATURES
    io.println("")
    io.println("8. Combining mutable state with loops:")
    sum ::= 0
    (1..=5).loop((n) {
        sum = sum + n
    })
    io.println("   Sum of 1..=5: ${sum}")
    
    // 9. NESTED PATTERN MATCHING
    io.println("")
    io.println("9. Nested pattern matching:")
    nested = Ok(.Some(777))
    nested ?
        | Ok(inner) {
            inner ?
                | Some(val) { io.println("   Found nested value: ${val}") }
                | None { io.println("   Ok but empty") }
        }
        | Err(e) { io.println("   Error: ${e}") }
    
    io.println("")
    io.println("=== Demo Complete ===")
}