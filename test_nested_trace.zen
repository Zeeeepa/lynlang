// Test to trace nested Result issues
{ io, Result } = @std

// Create a nested Result<Result<i32, string>, string>
create_nested = () Result<Result<i32, string>, string> {
    io.println("[create_nested] Creating inner Result.Ok(42)")
    inner = Result.Ok(42)
    
    io.println("[create_nested] Wrapping in outer Result.Ok")
    outer = Result.Ok(inner)
    
    io.println("[create_nested] Returning nested Result")
    outer
}

// Try to extract via pattern matching
test_pattern = () void {
    io.println("\n=== Pattern Matching Test ===")
    nested = create_nested()
    
    nested ? | Result.Ok(inner) => {
        io.println("Outer Ok matched, extracting inner...")
        inner ? | Result.Ok(val) => io.println("Inner value: ${val}")
               | Result.Err(e) => io.println("Inner error: ${e}")
    } | Result.Err(e) => {
        io.println("Outer error: ${e}")
    }
}

// Try to extract via raise
test_raise = () Result<i32, string> {
    io.println("\n=== Raise Test ===")
    nested = create_nested()
    io.println("Got nested Result")
    
    // Extract inner Result<i32, string>
    inner = nested.raise()
    io.println("Extracted inner Result via raise")
    
    // Extract i32 value
    value = inner.raise()
    io.println("Extracted value via raise: ${value}")
    
    Result.Ok(value)
}

main = () void {
    io.println("Testing nested Result<Result<T,E>,E2>...")
    
    test_pattern()
    
    result = test_raise()
    result ? | Result.Ok(v) => io.println("Final value: ${v}")
            | Result.Err(e) => io.println("Error: ${e}")
}