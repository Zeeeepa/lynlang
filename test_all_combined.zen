// Test all nested generic patterns together
{ io, Result, Option } = @std

test_double_nested_result = () void {
    io.println("Test 1: Double nested")
    get_double_nested = () Result<Result<i32, string>, string> {
        Result.Ok(Result.Ok(100))
    }
    outer = get_double_nested()
    inner = outer.raise()
    value = inner.raise()
    io.println("  Got: ${value}")
}

test_triple_nested_result = () void {
    io.println("Test 2: Triple nested")
    get_triple_nested = () Result<Result<Result<i32, string>, string>, string> {
        Result.Ok(Result.Ok(Result.Ok(200)))
    }
    level1 = get_triple_nested()
    level2 = level1.raise()
    level3 = level2.raise()
    value = level3.raise()
    io.println("  Got: ${value}")
}

test_method_chaining = () void {
    io.println("Test 3: Method chaining")
    get_chained = () Result<Result<i32, string>, string> {
        Result.Ok(Result.Ok(500))
    }
    value = get_chained().raise().raise()
    io.println("  Got: ${value}")
}

main = () void {
    io.println("=== Testing All ===")
    test_double_nested_result()
    test_triple_nested_result()
    test_method_chaining()
    io.println("=== Complete ===")
}