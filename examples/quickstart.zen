// Zen Quick Start - Core Language in 3 Minutes
{ io, Result, maths } = @std

main = () void {
    io.println("╔═══════════════════════════════╗")
    io.println("║    ZEN LANGUAGE QUICKSTART    ║")
    io.println("╚═══════════════════════════════╝\n")
    
    // ─── Variables ───────────────────────────────
    // Immutable by default, mutable with ::=
    name = "Zen"              // Can't change
    counter ::= 0             // Can change
    counter += 1
    
    // ─── UFC (Universal Function Call) ──────────
    // Any function becomes a method
    double = (x: i32) i32 { x * 2 }
    result = 5.double().double()  // 5 → 10 → 20
    io.println("▸ UFC: 5.double().double() = ${result}")
    
    // ─── Pattern Matching (No if/else) ──────────
    score = 85
    grade = score >= 90 ? 
        | true { "A" } 
        | false { 
            score >= 80 ? 
                | true { "B" } 
                | false { "C" }
        }
    io.println("▸ Grade for ${score}: ${grade}")
    
    // ─── Structs with Methods ───────────────────
    Vec2: { x: f64, y: f64 }
    Vec2.length = (self) f64 { 
        maths.sqrt(self.x * self.x + self.y * self.y) 
    }
    
    v = Vec2 { x: 3.0, y: 4.0 }
    io.println("▸ Vector (3,4) length: ${v.length()}")
    
    // ─── Error Handling as Values ───────────────
    safe_sqrt = (n: f64) Result<f64, string> {
        n >= 0.0 ?
            | true { Result.Ok(maths.sqrt(n)) }
            | false { Result.Err("Negative input") }
    }
    
    value = safe_sqrt(16.0).unwrap_or(0.0)
    io.println("▸ Safe sqrt(16): ${value}")
    
    // ─── Functional Pipelines ───────────────────
    sum = [1, 2, 3, 4, 5]
        .filter((n) => n % 2 == 0)    // [2, 4]
        .map((n) => n * n)             // [4, 16]
        .reduce(0, (a, b) => a + b)    // 20
    io.println("▸ Even squares sum: ${sum}")
    
    // ─── Algebraic Data Types ───────────────────
    Status: | Ready | Working(i32) | Done(string)
    
    current = Status.Working(75)
    msg = current ?
        | Ready { "System ready" }
        | Working(pct) { "Progress: ${pct}%" }
        | Done(msg) { "Complete: ${msg}" }
    io.println("▸ Status: ${msg}")
    
    io.println("\n✓ Ready to build with Zen!")
}