// Zen - Quick Start Guide
// Essential syntax in 5 minutes

{ io, Result } = @std

main = () void {
    // === Variables ===
    name = "Zen"              // Immutable by default
    count ::= 0               // Mutable with ::=
    typed: u32 = 42          // Explicit type
    
    // === UFC (Uniform Function Call) ===
    double = (x: i32) i32 { x * 2 }
    io.println(5.double())    // Any function becomes a method
    
    // === Pattern Matching (no if/else) ===
    count > 0 ?
        | true { io.println("Positive") }
        | false { io.println("Zero or negative") }
    
    // === Structs & Methods ===
    Point: { x: f64, y: f64 }
    Point.len = (self) f64 {
        @std.maths.sqrt(self.x * self.x + self.y * self.y)
    }
    
    p = Point { x: 3, y: 4 }
    io.println("Length: ${p.len()}")
    
    // === Error Handling ===
    parse = (s: string) Result<i32, string> {
        s == "42" ?
            | true { Result.Ok(42) }
            | false { Result.Err("not 42") }
    }
    
    parse("42") ?
        | Ok(n) { io.println("Parsed: ${n}") }
        | Err(e) { io.println("Error: ${e}") }
    
    // === Loops & Ranges ===
    (1..=3).loop((i) {
        count += i
    })
    
    // === Collections ===
    [1, 2, 3].map((n) => n * n).loop((n) {
        io.println("Square: ${n}")
    })
}