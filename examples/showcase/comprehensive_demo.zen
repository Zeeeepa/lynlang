// Zen Language Showcase - Clean, Expressive, Powerful

{ io, maths, Result, Option, Channel, spawn } = @std
{ inline } = @std

// Pattern matching with algebraic data types
Shape: |
    Circle(f64)
    | Rectangle(f64, f64)  
    | Point

Shape.area = (self) f64 {
    self ?
        | Circle(r) { maths.PI * r * r }
        | Rectangle(w, h) { w * h }
        | Point { 0.0 }
}

// Error handling without exceptions
safe_sqrt = (n: f64) Result<f64, String> {
    n < 0 ?
        | true { Result.Err("negative input") }
        | false { Result.Ok(maths.sqrt(n)) }
}

// Concurrent message passing
counter_server = () void {
    ch = Channel<i32>.new(10)
    
    spawn(() => {
        count ::= 0
        loop {
            ch.receive() ?
                | Some(1) { count = count + 1 }
                | Some(-1) { count = count - 1 }
                | Some(0) { 
                    io.println("Final count: ${count}")
                    break
                }
                | None { break }
        }
    })
    
    ch.send(1)
    ch.send(1)
    ch.send(-1)
    ch.send(0)
}

// FFI integration  
inline.c("""
    static double fast_inverse_sqrt(double number) {
        long i;
        float x2, y;
        const float threehalfs = 1.5F;
        x2 = number * 0.5F;
        y = number;
        i = * ( long * ) &y;
        i = 0x5f3759df - ( i >> 1 );
        y = * ( float * ) &i;
        y = y * ( threehalfs - ( x2 * y * y ) );
        return y;
    }
""")

main = () void {
    io.println("\n═══ Zen Language Features ═══\n")
    
    // Pattern matching
    shapes = [Circle(3.0), Rectangle(4.0, 5.0), Point]
    total = shapes.fold(0.0, (sum, shape) => sum + shape.area())
    io.println("Total area: ${total:.1f}")
    
    // Error handling
    [4.0, -1.0, 9.0].loop((n) {
        safe_sqrt(n) ?
            | Ok(v) { io.println("√${n} = ${v:.2f}") }
            | Err(e) { io.println("√${n} failed: ${e}") }
    })
    
    // Concurrency
    io.println("\nRunning counter server...")
    counter_server()
    
    // FFI call
    n = 2.0
    io.println("\nFast inverse √${n} ≈ ${fast_inverse_sqrt(n):.4f}")
    
    io.println("\n══════════════════════════════\n")
}