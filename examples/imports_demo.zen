// Demonstration of correct import syntax in Zen
// NO comptime blocks needed for imports!

// Module-level imports - this is the CORRECT way
core := @std.core
build := @std.build
io := build.import("io")

// Example function using imported modules
demonstrate_imports = () i32 {
    // Use core module functions
    min_val := core.min(10, 20)
    max_val := core.max(10, 20)
    abs_val := core.abs(-42)
    
    // Create a range using core module
    r := core.range(0, 10)
    
    // Calculate sum of range
    sum ::= 0
    i ::= r.start
    loop {
        if i >= r.end {
            break
        }
        sum = sum + i
        i = i + r.step
    }
    
    // Use io module to print
    io.print("Import demonstration complete\n")
    io.print_int(sum)
    
    return sum
}

// Another function showing Option type usage
test_option = () i32 {
    // Create Some variant
    some_value := core.Option::Some(42)
    
    // Pattern match on Option
    result := some_value ?
        | core.Option::Some(v) => v * 2
        | core.Option::None => 0
    
    return result
}

// Test Result type for error handling
test_result = () i32 {
    // Create Ok variant
    ok_result := core.Result::Ok(100)
    
    // Pattern match on Result
    value := ok_result ?
        | core.Result::Ok(v) => v
        | core.Result::Err(e) => -1
    
    return value
}

// Main entry point
main = () i32 {
    // Test all import functionality
    sum := demonstrate_imports()
    option_result := test_option()
    result_value := test_result()
    
    // Calculate final result
    total := sum + option_result + result_value
    
    io.print("All tests passed!\n")
    io.print_int(total)
    
    return 0
}