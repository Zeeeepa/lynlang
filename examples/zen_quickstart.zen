// Zen Language Quick Start - Essential features in one file
// This demonstrates the most important and unique Zen features

comptime {
    core := @std.core
    build := @std.build
    io := build.import("io")
}

// === Key Syntax Feature #1: NO if/else keywords! ===
// All conditionals use the ? operator with pattern matching

check_temperature = (temp: int) string {
    return temp ? | t -> t < 0    => "Freezing!"
                 | 0..=10         => "Cold"
                 | 11..=25        => "Nice"
                 | t -> t > 25    => "Hot!"
                 | _              => "Unknown"
}

// === Key Syntax Feature #2: Variables use := family ===
demo_variables = () void {
    PI := 3.14159              // Immutable (constant)
    counter ::= 0              // Mutable (variable)
    name: string = "Zen"       // Explicit type, immutable
    score:: i32 = 0            // Explicit type, mutable
    
    counter = counter + 1      // Mutation
    score = score + 10
}

// === Key Syntax Feature #3: Functions use = syntax (no fn keyword) ===
add = (a: i32, b: i32) i32 {
    return a + b
}

// === Key Syntax Feature #4: Single loop keyword for everything ===
demo_loops = () void {
    // While-like loop
    count ::= 3
    loop count > 0 {
        io.print("$(count)...\n")
        count = count - 1
    }
    
    // Range loop (exclusive)
    loop i in 0..3 {
        io.print("Index: $(i)\n")
    }
    
    // Range loop (inclusive)  
    loop i in 1..=3 {
        io.print("Number: $(i)\n")
    }
}

// === Key Syntax Feature #5: Structs and Enums ===
User = {
    name: string,
    age: int,
    active:: bool = true,    // Mutable field with default
}

Status = 
    | Success
    | Error(message: string)
    | Loading(percent: int)

// === Key Syntax Feature #6: Pattern matching with -> for destructuring ===
handle_status = (status: Status) string {
    return status ? | .Success => "All good!"
                   | .Error -> msg => "Failed: $(msg)"
                   | .Loading -> pct => "Loading... $(pct)%"
}

// === Key Syntax Feature #7: Error handling as values ===
divide = (a: int, b: int) Result<int, string> {
    return b ? | 0 => .Err("Division by zero")
              | _ => .Ok(a / b)
}

// === Key Syntax Feature #8: String interpolation with $() ===
greet = (name: string, age: int) void {
    io.print("Hello $(name), you are $(age) years old!\n")
}

// === Main Demo ===
main = () void {
    // Temperature check
    io.print("15°C is: $(check_temperature(15))\n")
    io.print("-5°C is: $(check_temperature(-5))\n")
    
    // User struct
    user := User{ name: "Alice", age: 30 }
    user.active = false  // Mutate mutable field
    
    // Status handling
    statuses := [
        Status.Success,
        Status.Error("File not found"),
        Status.Loading(75),
    ]
    
    loop status in statuses {
        io.print("$(handle_status(status))\n")
    }
    
    // Error handling
    result1 := divide(10, 2)
    answer1 := result1 ? | .Ok -> val => val
                        | .Err -> _ => 0
    io.print("10 / 2 = $(answer1)\n")
    
    result2 := divide(10, 0)
    answer2 := result2 ? | .Ok -> val => val
                        | .Err -> msg => {
                            io.print("Error: $(msg)\n")
                            0
                        }
    
    // Demonstrate loops
    demo_loops()
    
    // UFCS example - call free function as method
    rect := Rectangle{ width: 5.0, height: 3.0 }
    io.print("Area: $(rect.area())\n")  // Calls area(rect)
}

// UFCS - this function can be called as rect.area()
Rectangle = { width: f64, height: f64 }
area = (rect: Rectangle) f64 {
    return rect.width * rect.height
}