// Common utilities and types for examples
// Reduces duplication across example files

{ maths } = @std

// Commonly used geometric types
Point: {
    x: f64,
    y: f64,
}

Point.distance = (self, other: Point) f64 {
    dx = self.x - other.x
    dy = self.y - other.y
    maths.sqrt(dx * dx + dy * dy)
}

Point.magnitude = (self) f64 {
    maths.sqrt(self.x * self.x + self.y * self.y)
}

// Basic shape types for demonstrations
Shape: |
    Circle({ radius: f64 })
    | Rectangle({ width: f64, height: f64 })
    | Triangle({ base: f64, height: f64 })

Shape.area = (self) f64 {
    self ?
        | Circle({ radius }) { maths.PI * radius * radius }
        | Rectangle({ width, height }) { width * height }
        | Triangle({ base, height }) { 0.5 * base * height }
}

Shape.perimeter = (self) f64 {
    self ?
        | Circle({ radius }) { 2.0 * maths.PI * radius }
        | Rectangle({ width, height }) { 2.0 * (width + height) }
        | Triangle({ base, height }) {
            // Simplified - assumes right triangle
            hypotenuse = maths.sqrt(base * base + height * height)
            base + height + hypotenuse
        }
}

// Common helper functions
clamp = (value: f64, min: f64, max: f64) f64 {
    value < min ?
        | true { min }
        | false {
            value > max ?
                | true { max }
                | false { value }
        }
}

is_even = (n: i32) bool { n % 2 == 0 }
is_odd = (n: i32) bool { n % 2 != 0 }

// Re-export for convenience
export { Point, Shape, clamp, is_even, is_odd }