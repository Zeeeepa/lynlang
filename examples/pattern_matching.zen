// Pattern matching with the ? operator in Zen
// Demonstrates the unified conditional syntax without if/else keywords

core := @std.core
build := @std.build
io := build.import("io")

// Function to get grade from score using pattern matching
get_grade = (score: int) string {
    return score ? | 90..=100 => "A"
                   | 80..=89  => "B"
                   | 70..=79  => "C"
                   | 60..=69  => "D"
                   | _        => "F"
}

// Function to handle different actions using enum patterns
handle_action = (action: Action) string {
    return action ? | .Stop => "Stopping..."
                    | .Go => "Moving forward!"
                    | .Wait -> duration => "Waiting for $(duration) seconds"
                    | .Error -> err => "Error: $(err.message)"
}

// Enum definition
Action =
    | Stop
    | Go
    | Wait(duration: int)
    | Error({ code: int, message: string })

// Function with guards
categorize_number = (n: int) string {
    return n ? | val -> val < 0 => "negative"
               | 0 => "zero"
               | val -> val > 0 && val <= 10 => "small positive"
               | val -> val > 10 => "large positive"
               | _ => "unknown"
}

main = () void {
    // Test grade function
    score1 := 95
    score2 := 73
    io.print("Score $(score1): Grade $(get_grade(score1))\n")
    io.print("Score $(score2): Grade $(get_grade(score2))\n")
    
    // Test action handling
    action1 := Action.Go
    action2 := Action.Wait(5)
    action3 := Action.Error({ code: 404, message: "Not found" })
    
    io.print("$(handle_action(action1))\n")
    io.print("$(handle_action(action2))\n")
    io.print("$(handle_action(action3))\n")
    
    // Test number categorization
    io.print("-5 is $(categorize_number(-5))\n")
    io.print("0 is $(categorize_number(0))\n")
    io.print("7 is $(categorize_number(7))\n")
    io.print("42 is $(categorize_number(42))\n")
}