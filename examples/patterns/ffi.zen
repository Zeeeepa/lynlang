// Foreign Function Interface - C integration with inline.c

{ io } = @std
{ inline } = @std

// Inline C for performance-critical operations
inline.c("""
    #include <math.h>
    
    double fast_sqrt(double n) {
        return sqrt(n);
    }
    
    int gcd(int a, int b) {
        while (b != 0) {
            int t = b;
            b = a % b;
            a = t;
        }
        return a;
    }
    
    void reverse_array(int* arr, int n) {
        for (int i = 0; i < n/2; i++) {
            int temp = arr[i];
            arr[i] = arr[n-1-i];
            arr[n-1-i] = temp;
        }
    }
""")

main = () void {
    io.println("=== FFI with inline.c ===\n")
    
    // Call C functions directly
    io.println("âˆš144 = ${fast_sqrt(144)}")
    io.println("GCD(48, 18) = ${gcd(48, 18)}")
    
    // Modify arrays in-place via C
    numbers ::= [1, 2, 3, 4, 5]
    io.println("\nOriginal: ${numbers}")
    reverse_array(numbers.ptr(), numbers.len())
    io.println("Reversed: ${numbers}")
    
    // Performance comparison
    n = 1000000
    
    // Zen version
    sum ::= 0.0
    (1..n).loop((i) { sum += 1.0 / i })
    io.println("\nHarmonic sum (${n} terms): ${sum:.6f}")
}