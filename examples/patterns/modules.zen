// Module organization patterns

{ io } = @std
{ Point, clamp } = @import("../common.zen")  // Import shared types

// Module exports pattern
module.exports = {
    Color: Color,
    mix: mix,
    brightness: brightness
}

// Color type specific to this module
Color: {
    r: u8,
    g: u8,
    b: u8,
    a: u8  // Alpha channel
}

// Public functions
mix = (c1: Color, c2: Color, t: f64) Color {
    t_clamped = clamp(t, 0.0, 1.0)  // Use imported clamp
    
    lerp = (a: u8, b: u8, t: f64) u8 {
        ((a as f64) + ((b as f64) - (a as f64)) * t) as u8
    }
    
    Color {
        r: lerp(c1.r, c2.r, t_clamped),
        g: lerp(c1.g, c2.g, t_clamped),
        b: lerp(c1.b, c2.b, t_clamped),
        a: lerp(c1.a, c2.a, t_clamped)
    }
}

brightness = (c: Color) f64 {
    // Perceived brightness formula
    (0.299 * (c.r as f64) + 
     0.587 * (c.g as f64) + 
     0.114 * (c.b as f64)) / 255.0
}

// Private helpers (not exported)
_validate_color = (c: Color) bool {
    c.r <= 255 && c.g <= 255 && c.b <= 255 && c.a <= 255
}

_to_hex = (c: Color) string {
    // Convert color to hex string
    "#${c.r:02x}${c.g:02x}${c.b:02x}${c.a:02x}"
}

main = () void {
    io.println("=== Module Patterns ===\n")
    
    // Using imported Point type from common module
    origin = Point { x: 0, y: 0 }
    target = Point { x: 3, y: 4 }
    io.println("Distance: ${origin.distance(target)}")
    
    // Color operations
    red = Color { r: 255, g: 0, b: 0, a: 255 }
    blue = Color { r: 0, g: 0, b: 255, a: 255 }
    purple = mix(red, blue, 0.5)
    
    io.println("Mixed color: rgba(${purple.r}, ${purple.g}, ${purple.b}, ${purple.a})")
    io.println("Brightness: ${brightness(purple):.2f}")
    
    // Module organization example
    io.println("\nModule exports would include:")
    io.println("  - Color type")
    io.println("  - mix() function")
    io.println("  - brightness() function")
    io.println("  (Private helpers like _validate_color are not exported)")
}