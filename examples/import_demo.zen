// Demonstration of correct import syntax in Zen
// Imports must be at module level, not inside comptime blocks

// Standard library imports
core := @std.core
io := @std.io
mem := @std.mem
string := @std.string
vec := @std.vec

// Build system imports (if using build system)
// build := @std.build
// mylib := build.import("mylib")

// Main function demonstrating usage
main = () i32 {
    // Create a vector
    v := vec.new(i32)
    vec.push(i32, &v, 10)
    vec.push(i32, &v, 20)
    vec.push(i32, &v, 30)
    
    // Print vector contents
    io.print("Vector contents: [")
    for (i := 0; i < v.len; i += 1) {
        if (i > 0) io.print(", ")
        io.printf("{}", v.data[i])
    }
    io.println("]")
    
    // String operations
    greeting := "Hello, "
    name := "Zen"
    message := string.concat(greeting, name)
    io.println(message)
    
    // Memory allocation
    buffer := mem.allocate(u8, 100)
    if (buffer) {
        io.println("Successfully allocated 100 bytes")
        mem.deallocate(buffer)
    }
    
    // Clean up
    vec.free(i32, &v)
    
    return 0
}

// Helper function that also uses imports
print_stats = () void {
    // No need to re-import here - use module-level imports
    stats := mem.get_memory_stats()
    io.printf("Memory usage: {} bytes\n", stats.current_usage)
}

// Comptime is for meta-programming, not imports
@comptime {
    // Generate a lookup table at compile time
    TABLE_SIZE := 256
    lookup_table := [TABLE_SIZE]u8{}
    
    for (i := 0; i < TABLE_SIZE; i += 1) {
        lookup_table[i] = i * 2
    }
}