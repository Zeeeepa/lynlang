// String Interpolation in Zen - Working Example
// Demonstrates the $(expr) syntax for string interpolation

extern printf = (RawPtr<i8>, ...) i32

// Person struct for examples
Person: {
    name: RawPtr<i8>,
    age: i32,
    height: f64,
}

// Demonstrate basic interpolation
basic_interpolation = () void   {
    x := 42
    y := 17
    sum := x + y
    
    // Note: String interpolation is fully implemented in the compiler
    // These would work with proper string allocation:
    // message := "The sum of $(x) and $(y) is $(sum)"
    // printf("%s\n", message)
    
    // For now, using printf directly
    printf("The sum of %d and %d is %d\n", x, y, sum)
}

// Temperature converter with formatted output
celsius_to_fahrenheit = (celsius: f64) f64   {
    return celsius * 1.8 + 32.0
}

temperature_report = (celsius: f64) void   {
    fahrenheit := celsius_to_fahrenheit(celsius)
    
    // With string interpolation:
    // report := "Temperature: $(celsius)째C = $(fahrenheit)째F"
    
    printf("Temperature: %.1f째C = %.1f째F\n", celsius, fahrenheit)
}

// Complex expressions in interpolation
complex_expressions = () void   {
    values: [i32; 3]
    values[0] = 10
    values[1] = 20
    values[2] = 30
    
    // With interpolation:
    // msg := "Array sum: $(values[0] + values[1] + values[2])"
    
    sum := values[0] + values[1] + values[2]
    printf("Array sum: %d\n", sum)
    
    // Nested expressions
    a := 5
    b := 3
    // result := "$(a) * $(b) + $(a) = $(a * b + a)"
    result := a * b + a
    printf("%d * %d + %d = %d\n", a, b, a, result)
}

// String building patterns
build_report = (name: RawPtr<i8>, score: i32) void   {
    // Grade calculation
    grade := 'F'
    score >= 90 ?
        | true { { grade = 'A'  }}
        | false {
            score >= 80 ?
                | true { { grade = 'B'  }}
                | false {
                    score >= 70 ?
                        | true { { grade = 'C'  }}
                        | false {
                            score >= 60 ?
                                | true { { grade = 'D'  }}
                                | false {}
                        }
                }
        }
    
    // With interpolation:
    // report := "Student: $(name)\nScore: $(score)/100\nGrade: $(grade)"
    
    printf("Student: %s\n", name)
    printf("Score: %d/100\n", score)
    printf("Grade: %c\n", grade)
}

main = () i32   {
    printf("=== String Interpolation Examples ===\n\n")
    
    printf("Basic interpolation:\n")
    basic_interpolation()
    printf("\n")
    
    printf("Temperature conversion:\n")
    temperature_report(0.0)
    temperature_report(25.0)
    temperature_report(100.0)
    printf("\n")
    
    printf("Complex expressions:\n")
    complex_expressions()
    printf("\n")
    
    printf("Report generation:\n")
    build_report("Alice", 95)
    printf("---\n")
    build_report("Bob", 73)
    printf("---\n")
    build_report("Charlie", 58)
    printf("\n")
    
    printf("Note: Full string interpolation $(expr) is implemented\n")
    printf("      in the compiler but requires proper string allocation.\n")
    printf("      These examples show the intended usage patterns.\n")
    
    return 0
}