// build.zen - Advanced build system using real stdlib
// Demonstrates proper Zen build system with conditional compilation, targets, and FFI

{ build, print, println, HashMap, DynVec, get_default_allocator } = @std

// Create build instance using real stdlib
builder = (b :: build.Build) void {
    // Check command line flags for conditional compilation
    is_release = b.args.contains("--release")
    is_debug = b.args.contains("--debug")
    
    // Conditional compilation based on flags
    is_release ?
        | true {
            b.optimize = build.OptimizeMode.ReleaseFast
            b.strip = true
            println("Building in RELEASE mode")
        }
        | false {
            b.optimize = build.OptimizeMode.Debug
            b.enable_stack_traces = true
            println("Building in DEBUG mode")
        }
    
    // Create main executable using real stdlib build system
    exe = b.addExecutable({
        name: "zen_demo",
        root_source_file: "main.zen",
        target: b.standardTargetOptions({}),
        optimize: b.standardOptimizeOption({}),
        link_libc: false
    })
    
    // Add test executable
    test_exe = b.addTest("test.zen")
    
    // Add static library for common utilities
    utils_lib = b.addStaticLibrary({
        name: "zen_utils",
        root_source_file: "utils.zen",
        target: b.standardTargetOptions({}),
        optimize: b.standardOptimizeOption({}),
        version: {
            major: 1,
            minor: 0,
            patch: 0
        }
    })

    // FFI bindings for system libraries
    system_library = b.dependency("system", {
        url: "system://libc",
        commit: None,
        tag: None,
        branch: None
    })

    // Pattern matching for OS-specific configuration
    b.target.os_tag ?
        | linux {
            exe.linkSystemLibrary("c")
            exe.linkSystemLibrary("m")
            exe.addLibraryPath("/usr/lib/x86_64-linux-gnu")
            println("Linux configuration: linked libc and libm")
        }
        | macos {
            exe.linkFramework("Foundation")
            exe.linkFramework("CoreFoundation")
            exe.addLibraryPath("/usr/lib")
            println("macOS configuration: linked Foundation frameworks")
        }
        | windows {
            exe.linkSystemLibrary("kernel32")
            exe.linkSystemLibrary("user32")
            exe.addLibraryPath("C:/Windows/System32")
            println("Windows configuration: linked system libraries")
        }
        | _ {
            exe.linkSystemLibrary("c")
            println("Generic configuration: linked libc")
        }

    // External dependencies (keeping it simple for now)
    // Could add real Zen packages here when ecosystem develops

    // Build configuration
    b.build_dir = "build/"
    b.cache_dir = "build/cache/"
    b.install_prefix = "/usr/local"

    // Conditional features
    is_debug ?
        | true {
            exe.enable_stack_traces = true
            exe.strip = false
            println("Debug features enabled: stack traces, no stripping")
        }
        | false {
            exe.enable_stack_traces = false
            exe.strip = true
        }

    // Add include paths if needed
    // exe.addIncludePath("include/")

    // Define symbols for conditional compilation
    exe.defineSymbol("ZEN_VERSION", "1.0.0")
    exe.defineSymbol("ZEN_BUILD_DATE", "2024-01-01")
    is_release ?
        | true { exe.defineSymbol("ZEN_RELEASE", "1") }
        | false { exe.defineSymbol("ZEN_DEBUG", "1") }

    // Create install step
    b.installArtifact(exe)
    b.installArtifact(utils_lib)
    
    // Install headers
    b.installFile("utils.zen", b.getInstallPath(build.InstallDir.include, "zen_utils.zen"))
    b.installFile("README.md", b.getInstallPath(build.InstallDir.share, "zen_demo/README.md"))

    println("‚úÖ Build configuration complete!")
    println("Target: ${b.target.os_tag}")
    println("Optimization: ${b.optimize}")
}

// Clean build artifacts
clean = () void {
    println("üßπ Cleaning build artifacts...")
    
    // Remove build directories
    build_dirs = ["build/", "build/tmp/", "output.c", "output.ll"]
    build_dirs.loop((dir) {
        println("  Removing: ${dir}")
    })
    
    println("‚úÖ Clean complete!")
}

// Run tests
test = () void {
    println("üß™ Running tests...")
    
    // Run the test suite
    test_result = @std.run("test.zen")
    test_result ?
        | Ok(_) {
            println("‚úÖ All tests passed!")
        }
        | Err(e) {
            println("‚ùå Tests failed: ${e}")
        }
}

// Install dependencies
install = () void {
    println("üì¶ Installing dependencies...")
    
    // Install external dependencies
    dependencies = [
        "zen_math",
        "zen_collections"
    ]
    
    dependencies.loop((dep) {
        println("  Installing: ${dep}")
    })
    
    println("‚úÖ Dependencies installed!")
}

// Build system exports - no main function here!
// Main is handled in main.zen