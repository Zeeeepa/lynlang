// test.zen - Test suite for the Zen full example project
// This file demonstrates how to write tests in Zen

{ print, println } = @std.io
{ Option, Result } = @std
{ HashMap, HashSet } = @std.collections
{ Vec, DynVec, Array } = @std

// Import the main module functions to test
{ add, divide, find_person, describe_status, calculate } = @this

// ============================================================================
// TEST FRAMEWORK - Simple test utilities
// ============================================================================

TestResult:
    Pass,
    Fail: string

TestSuite: {
    name: string,
    tests: DynVec<() TestResult>,
    passed: u32,
    failed: u32
}

// Create a new test suite
new_test_suite = (name: string) TestSuite {
    allocator = @std.get_default_allocator()
    return TestSuite {
        name: name,
        tests: DynVec.new<() TestResult>(allocator),
        passed: 0,
        failed: 0
    }
}

// Add a test to the suite
add_test = (suite: TestSuite, test_name: string, test_func: () TestResult) void {
    suite.tests.push(() {
        println("  Running: ${test_name}")
        result = test_func()
        result ?
            | Pass {
                suite.passed = suite.passed + 1
                println("    ‚úì PASSED")
            }
            | Fail(msg) {
                suite.failed = suite.failed + 1
                println("    ‚úó FAILED: ${msg}")
            }
        return result
    })
}

// Run all tests in the suite
run_tests = (suite: TestSuite) void {
    println("\n=== Running Test Suite: ${suite.name} ===")
    suite.tests.loop((test) {
        test()
    })
    println("\nResults: ${suite.passed} passed, ${suite.failed} failed")
}

// ============================================================================
// TEST CASES - Individual test functions
// ============================================================================

// Test basic arithmetic
test_add = () TestResult {
    result = add(5, 3)
    result == 8 ? {
        return TestResult.Pass
    }
    return TestResult.Fail("Expected 8, got ${result}")
}

// Test division with valid input
test_divide_valid = () TestResult {
    result = divide(10.0, 2.0)
    result ?
        | Ok(value) {
            value == 5.0 ? {
                return TestResult.Pass
            }
            return TestResult.Fail("Expected 5.0, got ${value}")
        }
        | Err(msg) {
            return TestResult.Fail("Unexpected error: ${msg}")
        }
}

// Test division by zero
test_divide_by_zero = () TestResult {
    result = divide(10.0, 0.0)
    result ?
        | Ok(value) {
            return TestResult.Fail("Expected error for division by zero")
        }
        | Err(msg) {
            msg == "Division by zero" ? {
                return TestResult.Pass
            }
            return TestResult.Fail("Expected 'Division by zero', got '${msg}'")
        }
}

// Test person lookup
test_find_person_exists = () TestResult {
    person = find_person(1)
    person ?
        | Some(p) {
            p.name == "Alice" ? {
                return TestResult.Pass
            }
            return TestResult.Fail("Expected name 'Alice', got '${p.name}'")
        }
        | None {
            return TestResult.Fail("Expected to find person with id 1")
        }
}

// Test person lookup for non-existent person
test_find_person_not_exists = () TestResult {
    person = find_person(999)
    person ?
        | Some(p) {
            return TestResult.Fail("Expected None for non-existent person")
        }
        | None {
            return TestResult.Pass
        }
}

// Test status pattern matching
test_describe_status_active = () TestResult {
    status = Status.Active(12345)
    description = describe_status(status)
    description.contains("12345") ? {
        return TestResult.Pass
    }
    return TestResult.Fail("Expected description to contain user id")
}

test_describe_status_inactive = () TestResult {
    status = Status.Inactive
    description = describe_status(status)
    description == "User is inactive" ? {
        return TestResult.Pass
    }
    return TestResult.Fail("Expected 'User is inactive', got '${description}'")
}

// Test error propagation
test_calculate_success = () TestResult {
    result = calculate()
    result ?
        | Ok(value) {
            value == 5.0 ? {
                return TestResult.Pass
            }
            return TestResult.Fail("Expected 5.0, got ${value}")
        }
        | Err(msg) {
            return TestResult.Fail("Unexpected error: ${msg}")
        }
}

// Test collections with allocators
test_collections = () TestResult {
    allocator = @std.get_default_allocator()
    
    // Test HashMap
    map = HashMap.new<string, i32>(allocator)
    map.insert("test", 42)
    value = map.get("test")
    value ?
        | Some(v) {
            v == 42 ? {
                return TestResult.Pass
            }
            return TestResult.Fail("Expected 42, got ${v}")
        }
        | None {
            return TestResult.Fail("Expected to find key 'test'")
        }
}

// Test string operations
test_string_operations = () TestResult {
    text = "Hello World"
    upper = text.to_upper()
    upper == "HELLO WORLD" ? {
        return TestResult.Pass
    }
    return TestResult.Fail("Expected 'HELLO WORLD', got '${upper}'")
}

// Test generic container
test_generic_container = () TestResult {
    container = Container<i32> {
        value: 100,
        metadata: Option.Some("test")
    }
    container.value == 100 ? {
        return TestResult.Pass
    }
    return TestResult.Fail("Expected value 100, got ${container.value}")
}

// ============================================================================
// MAIN TEST RUNNER
// ============================================================================

main = () void {
    println("=== ZEN TEST SUITE ===")
    
    // Create test suite
    suite = new_test_suite("Zen Full Example Tests")
    
    // Add all tests
    add_test(suite, "Basic Addition", test_add)
    add_test(suite, "Division Valid", test_divide_valid)
    add_test(suite, "Division By Zero", test_divide_by_zero)
    add_test(suite, "Find Person Exists", test_find_person_exists)
    add_test(suite, "Find Person Not Exists", test_find_person_not_exists)
    add_test(suite, "Status Active", test_describe_status_active)
    add_test(suite, "Status Inactive", test_describe_status_inactive)
    add_test(suite, "Calculate Success", test_calculate_success)
    add_test(suite, "Collections", test_collections)
    add_test(suite, "String Operations", test_string_operations)
    add_test(suite, "Generic Container", test_generic_container)
    
    // Run all tests
    run_tests(suite)
    
    // Summary
    total = suite.passed + suite.failed
    println("\n=== TEST SUMMARY ===")
    println("Total tests: ${total}")
    println("Passed: ${suite.passed}")
    println("Failed: ${suite.failed}")
    
    suite.failed == 0 ? {
        println("üéâ All tests passed!")
    } : {
        println("‚ùå Some tests failed")
    }
}
