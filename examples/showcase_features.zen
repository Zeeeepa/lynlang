// Zen Language Feature Showcase
// Demonstrates core language features and stdlib usage

// Import statements - clean syntax without comptime
io := @std.io
core := @std.core
string := @std.string
vec := @std.vec
math := @std.math
utils := @std.utils

// Custom types
Person = {
    name: string,
    age: u32,
    email: Option<string>,
}

// Enum with associated data
Status = enum {
    Active -> since: i64,
    Inactive,
    Banned -> reason: string,
}

// Generic data structure
LinkedList<T> = enum {
    Empty,
    Node -> {
        value: T,
        next: Box<LinkedList<T>>,
    },
}

// Trait definition
Printable = trait {
    to_string = (self: Self) string
}

// Implement trait for Person
impl Printable for Person {
    to_string = (self: Person) string {
        age_str := string.from_int(self.age)
        email_str := match self.email {
            | Some(e) => string.concat(", email: ", e)
            | None => ""
        }
        return string.concat(self.name, " (", age_str, " years old", email_str, ")")
    }
}

// Generic function with trait bound
print_item = <T: Printable>(item: T) void {
    io.print(item.to_string())
    io.print("\n")
}

// Higher-order function
apply_twice = <T>(f: fn(T) T, x: T) T {
    return f(f(x))
}

// Closure example
make_adder = (n: i32) fn(i32) i32 {
    return (x: i32) i32 { return x + n }
}

// Pattern matching on custom types
describe_status = (status: Status) string {
    match status {
        | Active(since) => {
            days := (core.time_now() - since) / 86400
            return string.format("Active for {} days", days)
        }
        | Inactive => "Currently inactive"
        | Banned(reason) => string.concat("Banned: ", reason)
    }
}

// Recursive function with pattern matching
list_length = <T>(list: LinkedList<T>) usize {
    match list {
        | Empty => 0
        | Node(_, next) => 1 + list_length(*next)
    }
}

// Error handling with Result type
divide = (a: f64, b: f64) Result<f64, string> {
    if b == 0.0 {
        return Result.Err("Division by zero")
    }
    return Result.Ok(a / b)
}

// Async function (conceptual - requires runtime support)
async fetch_data = (url: string) Result<string, string> {
    // In a real implementation, this would make an HTTP request
    await core.sleep_ms(100)
    return Result.Ok("Sample data from " + url)
}

// Macro example (compile-time code generation)
macro vec_of = ($($elem:expr),*) {
    {
        v := vec.new()
        $(v.push($elem);)*
        v
    }
}

// Compile-time computation
comptime {
    FIBONACCI_10 := compute_fib(10)
    VERSION_STRING := string.concat("v", "1.0.0")
}

compute_fib = (n: i32) i32 {
    if n <= 1 { return n }
    return compute_fib(n - 1) + compute_fib(n - 2)
}

// Memory management with smart pointers
demonstrate_memory = () void {
    // Unique pointer (single ownership)
    unique := Box.new(42)
    io.print_int(*unique)
    io.print("\n")
    
    // Reference counted pointer (shared ownership)
    shared := Rc.new("shared string")
    another_ref := shared.clone()
    io.print(*another_ref)
    io.print("\n")
    
    // Weak pointer (non-owning reference)
    weak := Rc.downgrade(shared)
    if let Some(strong) = weak.upgrade() {
        io.print(*strong)
        io.print("\n")
    }
}

// Iterator implementation
range_iter = (start: i32, end: i32) Iterator<i32> {
    current := start
    return Iterator {
        next: () Option<i32> {
            if current < end {
                val := current
                current += 1
                return Option.Some(val)
            }
            return Option.None
        }
    }
}

// Main function demonstrating features
main = () i32 {
    io.print("=== Zen Language Feature Showcase ===\n\n")
    
    // 1. Basic types and operations
    io.print("1. Basic Operations:\n")
    x := 10
    y := 20
    io.print_int(x + y)
    io.print(" = 10 + 20\n")
    
    // 2. String manipulation
    io.print("\n2. String Operations:\n")
    greeting := "Hello"
    name := "Zen"
    message := string.concat(greeting, ", ", name, "!")
    io.print(message)
    io.print("\n")
    
    // 3. Vector operations
    io.print("\n3. Vector Operations:\n")
    numbers := vec_of!(1, 2, 3, 4, 5)
    doubled := utils.map(numbers, (n: i32) i32 { return n * 2 })
    sum := utils.reduce(doubled, 0, (acc: i32, n: i32) i32 { return acc + n })
    io.print("Sum of doubled [1,2,3,4,5]: ")
    io.print_int(sum)
    io.print("\n")
    
    // 4. Custom types
    io.print("\n4. Custom Types:\n")
    person := Person {
        name: "Alice",
        age: 30,
        email: Option.Some("alice@example.com"),
    }
    print_item(person)
    
    // 5. Pattern matching
    io.print("\n5. Pattern Matching:\n")
    status := Status.Active(core.time_now() - 864000)  // 10 days ago
    io.print(describe_status(status))
    io.print("\n")
    
    // 6. Error handling
    io.print("\n6. Error Handling:\n")
    result := divide(10.0, 2.0)
    match result {
        | Ok(val) => {
            io.print("10 / 2 = ")
            io.print_float(val)
            io.print("\n")
        }
        | Err(msg) => {
            io.print("Error: ")
            io.print(msg)
            io.print("\n")
        }
    }
    
    // 7. Higher-order functions
    io.print("\n7. Higher-Order Functions:\n")
    add_five := make_adder(5)
    result := apply_twice(add_five, 10)
    io.print("apply_twice(add_five, 10) = ")
    io.print_int(result)
    io.print("\n")
    
    // 8. Functional programming
    io.print("\n8. Functional Programming:\n")
    evens := utils.filter(range(1, 11), (n: i32) bool { return n % 2 == 0 })
    io.print("Even numbers from 1 to 10: ")
    for n in evens {
        io.print_int(n)
        io.print(" ")
    }
    io.print("\n")
    
    // 9. Compile-time computation
    io.print("\n9. Compile-Time Computation:\n")
    io.print("Fibonacci(10) computed at compile time: ")
    io.print_int(FIBONACCI_10)
    io.print("\n")
    
    // 10. Memory management
    io.print("\n10. Memory Management:\n")
    demonstrate_memory()
    
    io.print("\n=== Showcase Complete ===\n")
    return 0
}