// Demonstration of Zen's new import system
// Shows how to use module-level imports without comptime

// Standard library imports - clean and simple
io := @std.io
string := @std.string
vec := @std.vec
math := @std.math
result := @std.result

// Example: String manipulation
demo_strings = () void {
    io.println("=== String Operations ===")
    
    greeting := "Hello"
    name := "Zen"
    
    // String concatenation
    full_greeting := string.append(greeting, ", ")
    full_greeting = string.append(full_greeting, name)
    full_greeting = string.append(full_greeting, "!")
    
    io.println(full_greeting)
    
    // String analysis
    io.print("Length: ")
    io.print_int(string.len(full_greeting))
    io.println("")
    
    // Case conversion
    upper := string.to_upper(full_greeting)
    io.print("Uppercase: ")
    io.println(upper)
    
    lower := string.to_lower(full_greeting)
    io.print("Lowercase: ")
    io.println(lower)
}

// Example: Vector operations
demo_vectors = () void {
    io.println("\n=== Vector Operations ===")
    
    // Create and populate a vector
    mut numbers := vec.new()
    numbers = vec.push(numbers, 10)
    numbers = vec.push(numbers, 20)
    numbers = vec.push(numbers, 30)
    numbers = vec.push(numbers, 40)
    numbers = vec.push(numbers, 50)
    
    io.print("Vector length: ")
    io.print_int(vec.len(numbers))
    io.println("")
    
    // Access elements
    io.print("First element: ")
    first_elem := vec.first(numbers)
    if vec.len(numbers) > 0 {
        io.print_int(vec.get_unchecked(numbers, 0))
    } else {
        io.print("empty")
    }
    io.println("")
    
    io.print("Last element: ")
    if vec.len(numbers) > 0 {
        io.print_int(vec.get_unchecked(numbers, vec.len(numbers) - 1))
    } else {
        io.print("empty")
    }
    io.println("")
    
    // Sum all elements
    sum := vec.fold(numbers, 0, (acc, x) => acc + x)
    io.print("Sum of all elements: ")
    io.print_int(sum)
    io.println("")
}

// Example: Math operations
demo_math = () void {
    io.println("\n=== Math Operations ===")
    
    a := 42
    b := -17
    
    io.print("abs(-17) = ")
    io.print_int(math.abs(b))
    io.println("")
    
    io.print("max(42, -17) = ")
    io.print_int(math.max(a, b))
    io.println("")
    
    io.print("min(42, -17) = ")
    io.print_int(math.min(a, b))
    io.println("")
    
    io.print("pow(2, 8) = ")
    io.print_float(math.pow(2.0, 8.0))
    io.println("")
    
    io.print("sqrt(144) = ")
    io.print_float(math.sqrt(144.0))
    io.println("")
}

// Example: Error handling with Result
divide = (a: i32, b: i32) result<i32, string> {
    if b == 0 {
        return result.err("Division by zero")
    }
    return result.ok(a / b)
}

demo_error_handling = () void {
    io.println("\n=== Error Handling ===")
    
    // Successful division
    res1 := divide(10, 2)
    io.print("10 / 2 = ")
    match res1 {
        result.Ok(val) => {
            io.print_int(val)
            io.println("")
        },
        result.Err(msg) => {
            io.print("Error: ")
            io.println(msg)
        },
    }
    
    // Division by zero
    res2 := divide(10, 0)
    io.print("10 / 0 = ")
    match res2 {
        result.Ok(val) => {
            io.print_int(val)
            io.println("")
        },
        result.Err(msg) => {
            io.print("Error: ")
            io.println(msg)
        },
    }
}

// Example: Custom data structures
Person = {
    name: string,
    age: i32,
}

create_person = (name: string, age: i32) Person {
    return Person {
        name: name,
        age: age,
    }
}

person_to_string = (p: Person) string {
    mut result := string.append(p.name, " (age: ")
    age_str := string.from_int(p.age)
    result = string.append(result, age_str)
    result = string.append(result, ")")
    return result
}

demo_structs = () void {
    io.println("\n=== Custom Structs ===")
    
    alice := create_person("Alice", 30)
    bob := create_person("Bob", 25)
    
    io.print("Person 1: ")
    io.println(person_to_string(alice))
    
    io.print("Person 2: ")
    io.println(person_to_string(bob))
    
    // Create a vector of people
    mut people := vec.new()
    people = vec.push(people, alice)
    people = vec.push(people, bob)
    
    io.print("Total people: ")
    io.print_int(vec.len(people))
    io.println("")
}

// Example: Pattern matching
describe_number = (n: i32) string {
    match n {
        0 => return "zero",
        1 => return "one",
        2 => return "two",
        n if n < 0 => return "negative",
        n if n > 100 => return "large",
        _ => return "other",
    }
}

demo_pattern_matching = () void {
    io.println("\n=== Pattern Matching ===")
    
    test_numbers := [-5, 0, 1, 2, 42, 150]
    
    for num in test_numbers {
        io.print_int(num)
        io.print(" is ")
        io.println(describe_number(num))
    }
}

// Main function - entry point
main = () i32 {
    io.println("ðŸš€ Zen Language Demo - New Import System")
    io.println("=========================================")
    
    demo_strings()
    demo_vectors()
    demo_math()
    demo_error_handling()
    demo_structs()
    demo_pattern_matching()
    
    io.println("\nâœ… All demonstrations completed successfully!")
    return 0
}