// Comprehensive Zenlang Demo
// Showcases all major language features with the latest syntax

// ========================================
// Module System & Imports
// ========================================
io = @std
string = @std
Vec, DynVec = @std
HashMap = @std
math = @std
GPA, AsyncPool, Allocator = @std
Result = @std
Option = @std
Thread = @std
FFI = @std
mem = @std
requires, implements, reflect, meta, inline, simd = @std
{ Actor, Channel, Mutex, AtomicU32 } = @std

// ========================================
// Type Definitions (New Syntax)
// ========================================

// Simple struct
Point: {
    x: f64,
    y: f64,
}

// Complex struct with nested types
Person: {
    name: string,
    age: u32,
    email: string,
    address: Address,
}

Address: {
    street: string,
    city: string,
    country: string,
}

// Enum without leading | (new syntax)
Color: Red, Green, Blue, Custom: {value: u32}

// Complex enum with associated data
Message: Text: {content: string} | Warning: {text: string} | Error: {code: i32} | Binary

// Type aliases
UserId: u64
Score: f32
Timestamp: i64

// Generic types
Container<T>: {
    value: T,
    tag: string,
}

Pair<A, B>: {
    first: A,
    second: B,
}

// ========================================
// Functions (New Syntax)
// ========================================

// Simple function with new syntax
add = (a: i32, b: i32) i32 {
    return a + b
}

// Multiple parameters with same type
max3 = (a: i32, b: i32, c: i32) i32 {
    max ::= a
    b > max ?
        | true { max = b }
        | false { }
    c > max ?
        | true { max = c }
        | false { }
    return max
}

// Function returning Result
divide = (a: f64, b: f64) Result<f64, string> {
    b == 0.0 ?
        | true { return Err("Division by zero") }
        | false { return Ok(a / b) }
}

// Generic function
swap<T> = (a: T, b: T) Pair<T, T> {
    return Pair { first: b, second: a }
}

// Higher-order function
map<T, U> = (items: Vec<T>, f: (T) U) Vec<U> {
    result = Vec<U>()
    items.loop((item) {
        result.push(f(item))
    })
    return result
}

// Function with optional parameters
greet = (name: string, greeting: Option<string>) string {
    g = greeting ?
        | Some(val) { val }
        | None { "Hello" }
    return "${g}, ${name}!"
}

// ========================================
// Pattern Matching (? Operator)
// ========================================

// Fibonacci with pattern matching
fibonacci = (n: u32) u32 {
    n == 0 ?
        | true { return 0 }
        | false {
            n == 1 ?
                | true { return 1 }
                | false { return fibonacci(n - 1) + fibonacci(n - 2) }
        }
}

// Color processing
describe_color = (c: Color) string {
    c ?
        | .Red { return "Primary: Red" }
        | .Green { return "Primary: Green" }
        | .Blue { return "Primary: Blue" }
        | .Custom(custom) { return "Custom color: ${custom.value}" }
}

// Message handler with destructuring
handle_message = (msg: Message) void {
    msg ?
        | .Text(text) {
            io.println("Text: ${text.content}")
        }
        | .Warning(warn) {
            io.println("[WARN] ${warn.text}")
        }
        | Error(err) {
            io.println("ERROR ${err.code}")
        }
        | .Binary {
            io.println("Binary data received")
        }
}

// Nested pattern matching
process_result = (r: Result<i32, string>) string {
    r ?
        | Ok(val) {
            val > 0 ?
                | true { return "Positive: ${val}" }
                | false {
                    val < 0 ?
                        | true { return "Negative: ${val}" }
                        | false { return "Zero" }
                }
        }
        | Err(err) { return "Error: ${err}" }
}

// ========================================
// Variable Bindings
// ========================================

demo_bindings = () void {
    // Immutable binding (use = for immutable)
    x = 42
    
    // Mutable binding (use ::= for mutable)
    y ::= 100
    y ::= y + 1
    
    // Destructuring
    point = Point { x: 3.14, y: 2.71 }
    // Direct field access
    px = point.x
    py = point.y
    
    // Pattern matching in binding
    result = divide(10.0, 2.0)
    value = result ?
        | Ok(v) { v }
        | Err(_) { 0.0 }
}

// ========================================
// Memory Management
// ========================================

// Smart pointers
demo_pointers = () void {
    // Create a smart pointer (using Ptr<T> from spec)
    ptr = Ptr<i32>.new(42)
    
    // Access value
    val = ptr.val
    io.println("Value: ${val}")
    
    // Get address
    addr = ptr.addr
    io.println("Address: ${addr}")
}

// Reference counting
SharedData: {
    data: DynVec<i32>,
    ref_count: AtomicU32,
}

create_shared = (alloc: Allocator) Ptr<SharedData> {
    return Ptr<SharedData>.new(SharedData {
        data: DynVec<i32>(alloc),
        ref_count: AtomicU32(1),
    })
}

// ========================================
// Colorless Concurrency
// ========================================

// Function that works sync or async based on allocator
fetch_data = (url: string, alloc: Allocator) Result<string, string> {
    // Allocator determines sync/async behavior
    // This is a simplified example
    return Ok("Data from ${url}")
}

// Parallel processing demonstration
process_parallel = (items: DynVec<i32>, alloc: Allocator) DynVec<i32> {
    results = DynVec<i32>(alloc)
    
    // Process items (parallel with async allocator)
    items.loop((item) {
        results.push(item * item)
    })
    
    return results
}

// ========================================
// Error Handling
// ========================================

// Chain of operations that can fail
process_string = (s: string) Result<i32, string> {
    // Validate
    s.is_empty() ?
        | true { return Err("Empty string") }
        | false { }
    
    // Parse (simplified - would use actual parsing)
    num = 42  // Placeholder for parsing
    
    // Process
    num < 0 ?
        | true { return Err("Negative number not allowed") }
        | false { return Ok(num * 2) }
}

// Error propagation with .raise()
calculate_safe = (a: string, b: string) Result<f64, string> {
    // Simplified parsing for demo
    num_a = 10.0
    num_b = 2.0
    
    return divide(num_a, num_b)
}

// ========================================
// Traits (Behaviors)
// ========================================

Drawable: {
    draw: (self) void,
    get_bounds: (self) {x: f64, y: f64, w: f64, h: f64},
}

Serializable: {
    serialize: (self) string,
    deserialize: (data: string) Result<Self, string>,
}

Circle: {
    center: Point,
    radius: f64,
}

// Implement trait using .implements()
Circle.implements(Drawable, {
    draw = (self) void {
        io.println("Circle at (${self.center.x}, ${self.center.y}) r=${self.radius}")
    },
    
    get_bounds = (self) {x: f64, y: f64, w: f64, h: f64} {
        return {
            x: self.center.x - self.radius,
            y: self.center.y - self.radius,
            w: self.radius * 2.0,
            h: self.radius * 2.0,
        }
    },
})

// Generic trait
Comparable<T>: {
    compare: (self, other: T) i32,
}

// ========================================
// Builder Pattern
// ========================================

HttpRequestBuilder: {
    url: string,
    method: string,
    headers: HashMap<string, string>,
    body: Option<string>,
    timeout: u32,
}

HttpRequestBuilder_new = () HttpRequestBuilder {
    return HttpRequestBuilder {
        url: "",
        method: "GET",
        headers: HashMap<string, string>(),
        body: None,
        timeout: 30000,
    }
}

// Fluent interface methods using UFCS
set_url = (self: HttpRequestBuilder, url: string) HttpRequestBuilder {
    self.url = url
    return self
}

set_method = (self: HttpRequestBuilder, method: string) HttpRequestBuilder {
    self.method = method
    return self
}

add_header = (self: HttpRequestBuilder, key: string, value: string) HttpRequestBuilder {
    self.headers.insert(key, value)
    return self
}

set_json = (self: HttpRequestBuilder, data: string) HttpRequestBuilder {
    self.body = Some(data)
    self.headers.insert("Content-Type", "application/json")
    return self
}

set_timeout = (self: HttpRequestBuilder, ms: u32) HttpRequestBuilder {
    self.timeout = ms
    return self
}

// ========================================
// UFCS (Uniform Function Call Syntax)
// ========================================

// Extension methods
times = (n: i32, f: () void) void {
    (0..n).loop((_) {
        f()
    })
}

squared = (n: i32) i32 {
    return n * n
}

// Can be called as: 5.times(() { io.println("Hi") })
// Or: 10.squared()

// ========================================
// Loops and Iteration
// ========================================

demo_loops = () void {
    // Range iteration
    (0..10).loop((i) {
        io.print("${i} ")
    })
    io.println("")
    
    // Infinite loop with break
    counter ::= 10
    loop(() {
        counter = counter - 1
        counter <= 0 ?
            | true { break }
            | false { }
    })
    
    // Loop with filtering
    (0..10).loop((j) {
        j % 2 == 0 ?
            | true { }  // Skip even numbers
            | false { io.print("${j} ") }
    })
    io.println("")
}

// ========================================
// Compile-time Execution
// ========================================

// Compile-time constants
BUFFER_SIZE = 4096
MAX_CONNECTIONS = 100

// Compile-time computed value
CACHE_SIZE = @meta.comptime((){
    BUFFER_SIZE * 4
})

// ========================================
// Foreign Function Interface
// ========================================

// C function declarations
malloc = FFI.declare("malloc", (usize) RawPtr<u8>)
free = FFI.declare("free", (RawPtr<u8>) void)
printf = FFI.declare("printf", (string) i32)

// Safe wrapper
allocate = (size: usize) Ptr<u8> {
    raw_ptr = malloc(size)
    return Ptr<u8>.from_raw(raw_ptr)
}

// ========================================
// Testing (simplified)
// ========================================

test_arithmetic = () void {
    assert(add(2, 3) == 5)
    assert(add(-1, 1) == 0)
    assert(max3(1, 5, 3) == 5)
}

test_pattern_matching = () void {
    assert(fibonacci(0) == 0)
    assert(fibonacci(1) == 1)
    assert(fibonacci(10) == 55)
    
    color = Color.Custom {value: 255}
    desc = describe_color(color)
    assert(desc.contains("Custom"))
}

test_error_handling = () void {
    divide(10.0, 0.0) ?
        | Ok(_) { panic("Should have failed") }
        | Err(e) { assert(e == "Division by zero") }
    
    divide(10.0, 2.0) ?
        | Ok(v) { assert(v == 5.0) }
        | Err(_) { panic("Should have succeeded") }
}

test_builder_pattern = () void {
    request = HttpRequestBuilder_new()
        .set_url("https://api.example.com")
        .set_method("POST")
        .add_header("Authorization", "Bearer token")
        .set_json("{\"key\": \"value\"}")
        .set_timeout(5000)
    
    assert(request.url == "https://api.example.com")
    assert(request.method == "POST")
    assert(request.timeout == 5000)
}

// ========================================
// Defer Statement
// ========================================

demo_defer = () void {
    // Simulated file operations
    io.println("Opening file...")
    @this.defer(io.println("File closed"))
    
    // Use file...
    io.println("Reading file content...")
}

// ========================================
// Main Entry Point
// ========================================

main = () void {
    io.println("=== Zenlang Comprehensive Demo ===\n")
    
    // Create allocators
    sync_alloc = GPA.init()
    @this.defer(sync_alloc.deinit())
    
    // Arithmetic
    io.println("Arithmetic:")
    io.println("  2 + 3 = ${add(2, 3)}")
    io.println("  max(1, 5, 3) = ${max3(1, 5, 3)}")
    
    // Pattern Matching
    io.println("\nPattern Matching:")
    io.println("  fibonacci(10) = ${fibonacci(10)}")
    io.println("  ${describe_color(Color.Blue)}")
    io.println("  ${describe_color(Color.Custom(128))}")
    
    // Error Handling
    io.println("\nError Handling:")
    result1 = divide(10.0, 2.0)
    io.println("  10 / 2 = ${process_result(result1)}")
    
    result2 = divide(10.0, 0.0)
    result2 ?
        | Ok(_) { }
        | Err(e) { io.println("  Error: ${e}") }
    
    // Structs and Builders
    io.println("\nStructs and Builders:")
    point = Point { x: 3.14, y: 2.71 }
    io.println("  Point: (${point.x}, ${point.y})")
    
    request = HttpRequestBuilder_new()
        .set_url("https://api.example.com/data")
        .set_method("GET")
        .add_header("Accept", "application/json")
        .set_timeout(10000)
    io.println("  Request: ${request.method} ${request.url}")
    
    // Behaviors
    io.println("\nBehaviors:")
    circle = Circle {
        center: Point { x: 10.0, y: 10.0 },
        radius: 5.0,
    }
    circle.draw()
    bounds = circle.get_bounds()
    io.println("  Bounds: (${bounds.x}, ${bounds.y}) ${bounds.w}x${bounds.h}")
    
    // Messages
    io.println("\nMessage Handling:")
    messages = DynVec<Message>(sync_alloc)
    @this.defer(messages.deinit())
    
    messages.push(Message.Text {content: "Hello, World!"})
    messages.push(Message.Warning {text: "Low memory"})
    messages.push(Message.Error {code: 404})
    
    messages.loop((msg) {
        handle_message(msg)
    })
    
    // UFCS
    io.println("\nUFCS Examples:")
    io.print("  Repeat 3 times: ")
    3.times(() { io.print("Hi! ") })
    io.println("")
    io.println("  5 squared = ${5.squared()}")
    
    // Loops
    io.println("\nLoops:")
    demo_loops()
    
    // Compile-time constants
    io.println("\nCompile-time:")
    io.println("  BUFFER_SIZE = ${BUFFER_SIZE}")
    io.println("  CACHE_SIZE = ${CACHE_SIZE}")
    
    // Memory
    io.println("\nMemory Management:")
    demo_pointers()
    
    // Concurrent operations
    io.println("\nConcurrent Operations:")
    nums = DynVec<i32>(sync_alloc)
    @this.defer(nums.deinit())
    
    (1..6).loop((i) {
        nums.push(i)
    })
    
    squared_nums = process_parallel(nums, sync_alloc)
    @this.defer(squared_nums.deinit())
    
    io.print("  Squared: ")
    squared_nums.loop((n) {
        io.print("${n} ")
    })
    io.println("")
    
    // Defer demo
    io.println("\nDefer Statement:")
    demo_defer()
    
    io.println("\n=== Demo Complete ===")
}