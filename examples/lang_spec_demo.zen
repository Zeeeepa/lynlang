// Zen Language Demo - Following lang.md specification exactly
// This file demonstrates all language features as specified in lang.md

// 1. Compile-time imports and module setup
comptime {
    core := @std.core
    build := @std.build
    
    io := build.import("io")
    mem := build.import("mem")
    math := build.import("math")
    collections := build.import("collections")
}

// 2. Basic struct definition
Point = {
    x: f64,
    y: f64,
}

// 3. Enum definition with variants
Action =
    | Stop
    | Go
    | Wait(duration: int)
    | Error({ code: int, message: string })

// 4. Function definitions using = syntax
calculate_distance = (p1: Point, p2: Point) f64 {
    dx := p1.x - p2.x
    dy := p1.y - p2.y
    return math.sqrt(dx*dx + dy*dy)
}

// 5. UFCS (Uniform Function Call Syntax) example
area = (rect: Rectangle) f64 {
    return rect.width * rect.height
}

Rectangle = { 
    width: f64, 
    height: f64,
}

// 6. Pattern matching with ? operator (NO if/else keywords!)
grade_score = (score: int) string {
    return score ? | 90..=100 => "A"
                   | 80..=89  => "B"
                   | 70..=79  => "C"
                   | 60..=69  => "D"
                   | _        => "F"
}

// 7. Error handling with Result type
parse_number = (s: string) Result<int, string> {
    // Simplified for demonstration
    return s ? | "42" => .Ok(42)
              | "0"  => .Ok(0)
              | _    => .Err("Invalid number")
}

// 8. Loop constructs
demo_loops = () void {
    // Conditional loop (while-like)
    counter ::= 10
    loop counter > 0 {
        io.print("$(counter) ")
        counter = counter - 1
    }
    
    // Range loop
    loop i in 0..5 {
        io.print("Index: $(i)\n")
    }
    
    // Iterating over collection
    names := ["Alice", "Bob", "Charlie"]
    loop name in names {
        io.print("Hello, $(name)!\n")
    }
}

// 9. Variable declarations showcase
demo_variables = () void {
    // Immutable with inferred type
    PI := 3.14159
    
    // Mutable with inferred type
    counter ::= 0
    
    // Immutable with explicit type
    MAX_SIZE: u32 = 1000
    
    // Mutable with explicit type
    current_score:: i32 = 0
    
    // Mutation
    counter = counter + 1
    current_score = current_score + 10
}

// 10. Pattern matching with destructuring using ->
handle_action = (action: Action) string {
    return action ? | .Stop => "Stopping"
                   | .Go => "Going"
                   | .Wait -> duration => "Waiting $(duration)ms"
                   | .Error -> err => "Error $(err.code): $(err.message)"
}

// 11. Complex pattern matching with guards
categorize_value = (value: int) string {
    return value ? | v -> v < 0 => "Negative"
                   | v -> v == 0 => "Zero"
                   | v -> v > 0 && v <= 10 => "Small positive"
                   | v -> v > 10 && v <= 100 => "Medium positive"
                   | _ => "Large positive"
}

// 12. Nested namespaces
Geometry = {
    PI := 3.1415926535,
    
    Circle = {
        radius: f64,
    },
    
    circumference = (c: Circle) f64 {
        return 2.0 * PI * c.radius
    },
    
    area = (c: Circle) f64 {
        return PI * c.radius * c.radius
    },
}

// 13. Compile-time computation
LOOKUP_TABLE := comptime {
    table:: [256]int
    loop i in 0..256 {
        table[i] = i * i
    }
    table
}

// 14. Generic function with comptime parameters
make_array = (comptime T: type, comptime N: usize) [N]T {
    return [N]T{}
}

// 15. Main entry point demonstrating everything
main = () void {
    // Using structs
    origin := Point{ x: 0.0, y: 0.0 }
    destination := Point{ x: 3.0, y: 4.0 }
    dist := calculate_distance(origin, destination)
    io.print("Distance: $(dist)\n")
    
    // Using UFCS
    rect := Rectangle{ width: 10.0, height: 5.0 }
    rect_area := rect.area()  // UFCS call
    io.print("Rectangle area: $(rect_area)\n")
    
    // Pattern matching for grades
    grades := [95, 85, 75, 65, 55]
    loop score in grades {
        letter := grade_score(score)
        io.print("Score $(score) = Grade $(letter)\n")
    }
    
    // Error handling with pattern matching
    result := parse_number("42")
    value := result ? | .Ok -> n => {
        io.print("Parsed: $(n)\n")
        n
    }
    | .Err -> msg => {
        io.print("Error: $(msg)\n")
        0
    }
    
    // Action handling
    actions := [
        Action.Go,
        Action.Wait(500),
        Action.Error({ code: 404, message: "Not found" }),
        Action.Stop,
    ]
    
    loop action in actions {
        response := handle_action(action)
        io.print("$(response)\n")
    }
    
    // Using nested namespace
    circle := Geometry.Circle{ radius: 5.0 }
    circ := Geometry.circumference(circle)
    area := Geometry.area(circle)
    io.print("Circle: circumference=$(circ), area=$(area)\n")
    
    // Using compile-time lookup table
    io.print("Square of 16: $(LOOKUP_TABLE[16])\n")
    
    // Creating generic array
    my_array := make_array(i32, 10)
    io.print("Created array of size 10\n")
    
    // Demonstrate loops
    demo_loops()
    
    // Value categorization with guards
    test_values := [-5, 0, 3, 50, 150]
    loop val in test_values {
        category := categorize_value(val)
        io.print("$(val) is $(category)\n")
    }
}