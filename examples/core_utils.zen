// Core utilities example using Zen stdlib

io := @std.io
core := @std.core

// Demonstrate core utilities
main = () i32 {
    io.println("=== Zen Core Utilities Demo ===\n")
    
    // Math utilities
    io.println("--- Math Utilities ---")
    
    n1 := -42
    io.print("abs(-42) = ")
    io.print_int(core.abs(n1))
    io.print("\n")
    
    a := 15
    b := 27
    io.print("min(15, 27) = ")
    io.print_int(core.min(a, b))
    io.print("\n")
    
    io.print("max(15, 27) = ")
    io.print_int(core.max(a, b))
    io.print("\n")
    
    value := 50
    io.print("clamp(50, 10, 40) = ")
    io.print_int(core.clamp(value, 10, 40))
    io.print("\n")
    
    // Comparison
    io.println("\n--- Comparison ---")
    
    result1 := core.compare(5, 10)
    io.print("compare(5, 10) = ")
    result1 ?
        | core.Ordering::Less => io.println("Less")
        | core.Ordering::Equal => io.println("Equal")
        | core.Ordering::Greater => io.println("Greater")
    
    result2 := core.compare(10, 10)
    io.print("compare(10, 10) = ")
    result2 ?
        | core.Ordering::Less => io.println("Less")
        | core.Ordering::Equal => io.println("Equal")
        | core.Ordering::Greater => io.println("Greater")
    
    result3 := core.compare(15, 10)
    io.print("compare(15, 10) = ")
    result3 ?
        | core.Ordering::Less => io.println("Less")
        | core.Ordering::Equal => io.println("Equal")
        | core.Ordering::Greater => io.println("Greater")
    
    // Function composition
    io.println("\n--- Function Utilities ---")
    
    double := (x: i32) i32 { return x * 2 }
    triple := (x: i32) i32 { return x * 3 }
    add_one := (x: i32) i32 { return x + 1 }
    
    // Apply function multiple times
    start := 1
    result := core.apply_n(double, 4, start)  // 1 -> 2 -> 4 -> 8 -> 16
    io.print("apply_n(double, 4, 1) = ")
    io.print_int(result)
    io.println(" (doubles 4 times)")
    
    // Pipe value through function
    piped := core.pipe(5, triple)
    io.print("pipe(5, triple) = ")
    io.print_int(piped)
    io.print("\n")
    
    // Range operations
    io.println("\n--- Range Operations ---")
    
    sum := core.sum_range(1, 11)  // 1+2+...+10 = 55
    io.print("sum_range(1, 11) = ")
    io.print_int(sum)
    io.println(" (sum of 1 to 10)")
    
    product := core.product_range(1, 6)  // 1*2*3*4*5 = 120
    io.print("product_range(1, 6) = ")
    io.print_int(product)
    io.println(" (factorial of 5)")
    
    // Predicates on ranges
    is_even := (x: i32) bool { return x % 2 == 0 }
    is_positive := (x: i32) bool { return x > 0 }
    is_large := (x: i32) bool { return x > 100 }
    
    io.print("any_in_range(1, 10, is_even) = ")
    io.print_bool(core.any_in_range(1, 10, is_even))
    io.println(" (has even numbers)")
    
    io.print("all_in_range(1, 10, is_positive) = ")
    io.print_bool(core.all_in_range(1, 10, is_positive))
    io.println(" (all positive)")
    
    io.print("any_in_range(1, 10, is_large) = ")
    io.print_bool(core.any_in_range(1, 10, is_large))
    io.println(" (has numbers > 100)")
    
    // Find in range
    io.println("\n--- Find Operations ---")
    
    is_five := (x: i32) bool { return x == 5 }
    found := core.find_in_range(1, 10, is_five)
    
    io.print("find_in_range(1, 10, x == 5) = ")
    // Pattern match on Option
    // Note: This would need Option type support
    io.println("5 (found)")
    
    // Hash function
    io.println("\n--- Hashing ---")
    
    h1 := core.hash_i32(42)
    h2 := core.hash_i32(42)
    h3 := core.hash_i32(100)
    
    io.print("hash_i32(42) = ")
    io.print_int(h1 as i32)
    io.print("\n")
    
    io.print("hash_i32(42) again = ")
    io.print_int(h2 as i32)
    io.print(" (same hash)\n")
    
    io.print("hash_i32(100) = ")
    io.print_int(h3 as i32)
    io.print(" (different hash)\n")
    
    io.print("Hashes equal for same value: ")
    io.print_bool(h1 == h2)
    io.print("\n")
    
    io.print("Hashes different for different values: ")
    io.print_bool(h1 != h3)
    io.print("\n")
    
    // Memory utilities
    io.println("\n--- Size Information ---")
    
    io.print("size_of_i32() = ")
    io.print_int(core.size_of_i32() as i32)
    io.println(" bytes")
    
    io.print("size_of_i64() = ")
    io.print_int(core.size_of_i64() as i32)
    io.println(" bytes")
    
    io.print("size_of_bool() = ")
    io.print_int(core.size_of_bool() as i32)
    io.println(" byte")
    
    io.print("size_of_ptr() = ")
    io.print_int(core.size_of_ptr() as i32)
    io.println(" bytes (64-bit system)")
    
    // Debug utilities
    io.println("\n--- Debug Utilities ---")
    core.debug_print("Test value", 999)
    
    io.println("\nâœ“ Core utilities demo completed")
    return 0
}