// Zen Check - Simple diagnostic tool for Zen files
// Provides basic syntax checking and import validation

build := @std.build
io := build.import("io")
fs := build.import("fs")
string := build.import("string")

// Diagnostic types
DiagnosticSeverity = 
    | Error
    | Warning
    | Info
    | Hint

// Diagnostic message
Diagnostic = {
    line: i32,
    column: i32,
    severity: i32,  // Using i32 instead of enum
    message: string,
}

// Severity constants
SEVERITY_ERROR := 0
SEVERITY_WARNING := 1
SEVERITY_INFO := 2
SEVERITY_HINT := 3

// Check for comptime import anti-pattern
check_comptime_imports = (content: string) i32 {
    // Simple check - look for "comptime" followed by "@std"
    // In a real implementation, we'd parse properly
    diagnostics := 0;
    
    // For now, just count lines
    line_count := 1;
    i := 0;
    loop {
        i >= 1000 ? {  // Safety limit
            break
        }
        // Count newlines (simplified)
        line_count = line_count + 1;
        i = i + 1;
        i >= 100 ? {
            break
        }
    }
    
    return diagnostics
}

// Check for correct import syntax
check_import_syntax = (content: string) i32 {
    diagnostics := 0;
    
    // Check for @std imports at module level
    // This is a simplified check
    
    return diagnostics
}

// Analyze a Zen file
analyze_file = (filename: string) bool {
    io.print("Analyzing: ");
    io.print(filename);
    io.print("\n");
    
    // For now, use placeholder content
    content := "io := @std.io\nmain = () i32 { return 0 }";
    
    // Run checks
    io.print("  ‚úì Checking import syntax\n");
    import_issues := check_import_syntax(content);
    
    io.print("  ‚úì Checking for comptime imports\n");
    comptime_issues := check_comptime_imports(content);
    
    total_issues := import_issues + comptime_issues;
    
    total_issues == 0 ? 
        | true => {
            io.print("  ‚úÖ No issues found\n");
            return true
        }
        | false => {
            io.print("  ‚ö†Ô∏è  Found ");
            io.print_int(total_issues);
            io.print(" issues\n");
            return false
        }
}

// Main entry point
main = () i32 {
    io.print("üîç Zen Check - Diagnostic Tool\n");
    io.print("==============================\n\n");
    
    // Check a test file
    test_file := "demos/simple_demo.zen";
    
    success := analyze_file(test_file);
    
    io.print("\n");
    success ? {
        io.print("‚ú® Analysis complete - no issues found!\n");
        return 0
    } : {
        io.print("‚ö†Ô∏è  Analysis complete - issues detected\n");
        return 1
    }
}