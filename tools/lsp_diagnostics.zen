// LSP Diagnostics for Zen Language Server
// Provides error reporting and diagnostic capabilities

core := @std.core
string := @std.string
array := @std.array
json := @std.json
io := @std.io

// Diagnostic severity levels (LSP spec)
DiagnosticSeverity = |
    Error = 1,
    Warning = 2,
    Information = 3,
    Hint = 4,

// Diagnostic tags (LSP spec)
DiagnosticTag = |
    Unnecessary = 1,
    Deprecated = 2,

// Position in document
Position = struct {
    line: u32,
    character: u32,
}

// Range in document
Range = struct {
    start: Position,
    end: Position,
}

// Location in document
Location = struct {
    uri: String,
    range: Range,
}

// Diagnostic related information
DiagnosticRelatedInformation = struct {
    location: Location,
    message: String,
}

// Code action kind
CodeActionKind = struct {
    value: String,
}

// Code action kinds constants
CodeActionKinds = struct {
    quickfix: CodeActionKind = CodeActionKind{value: "quickfix"},
    refactor: CodeActionKind = CodeActionKind{value: "refactor"},
    refactor_extract: CodeActionKind = CodeActionKind{value: "refactor.extract"},
    refactor_inline: CodeActionKind = CodeActionKind{value: "refactor.inline"},
    refactor_rewrite: CodeActionKind = CodeActionKind{value: "refactor.rewrite"},
    source: CodeActionKind = CodeActionKind{value: "source"},
    source_organize_imports: CodeActionKind = CodeActionKind{value: "source.organizeImports"},
    source_fix_all: CodeActionKind = CodeActionKind{value: "source.fixAll"},
}

// Diagnostic structure
Diagnostic = struct {
    range: Range,
    severity: DiagnosticSeverity,
    code: ?String,
    code_description: ?CodeDescription,
    source: ?String,
    message: String,
    tags: Array(DiagnosticTag),
    related_information: Array(DiagnosticRelatedInformation),
    data: ?JsonValue,
}

// Code description
CodeDescription = struct {
    href: String,
}

// Diagnostic context for collecting diagnostics
DiagnosticContext = struct {
    diagnostics: Array(Diagnostic),
    current_file: String,
    max_diagnostics: usize,
}

// JSON value placeholder
JsonValue = struct {
    data: String,
}

// Create new diagnostic context
new_context = (file: String, max_diagnostics: usize) DiagnosticContext {
    return DiagnosticContext{
        diagnostics: array.new(Diagnostic, 32),
        current_file: file,
        max_diagnostics: max_diagnostics,
    }
}

// Create position
make_position = (line: u32, character: u32) Position {
    return Position{
        line: line,
        character: character,
    }
}

// Create range
make_range = (start_line: u32, start_char: u32, end_line: u32, end_char: u32) Range {
    return Range{
        start: make_position(start_line, start_char),
        end: make_position(end_line, end_char),
    }
}

// Add error diagnostic
add_error = (ctx: *DiagnosticContext, range: Range, message: String) void {
    if (ctx.diagnostics.len >= ctx.max_diagnostics) {
        return
    }
    
    diag := Diagnostic{
        range: range,
        severity: DiagnosticSeverity.Error,
        code: null,
        code_description: null,
        source: string.from_literal("zen"),
        message: message,
        tags: array.new(DiagnosticTag, 0),
        related_information: array.new(DiagnosticRelatedInformation, 0),
        data: null,
    }
    
    array.push(Diagnostic, &ctx.diagnostics, diag)
}

// Add warning diagnostic
add_warning = (ctx: *DiagnosticContext, range: Range, message: String) void {
    if (ctx.diagnostics.len >= ctx.max_diagnostics) {
        return
    }
    
    diag := Diagnostic{
        range: range,
        severity: DiagnosticSeverity.Warning,
        code: null,
        code_description: null,
        source: string.from_literal("zen"),
        message: message,
        tags: array.new(DiagnosticTag, 0),
        related_information: array.new(DiagnosticRelatedInformation, 0),
        data: null,
    }
    
    array.push(Diagnostic, &ctx.diagnostics, diag)
}

// Add information diagnostic
add_info = (ctx: *DiagnosticContext, range: Range, message: String) void {
    if (ctx.diagnostics.len >= ctx.max_diagnostics) {
        return
    }
    
    diag := Diagnostic{
        range: range,
        severity: DiagnosticSeverity.Information,
        code: null,
        code_description: null,
        source: string.from_literal("zen"),
        message: message,
        tags: array.new(DiagnosticTag, 0),
        related_information: array.new(DiagnosticRelatedInformation, 0),
        data: null,
    }
    
    array.push(Diagnostic, &ctx.diagnostics, diag)
}

// Add hint diagnostic
add_hint = (ctx: *DiagnosticContext, range: Range, message: String) void {
    if (ctx.diagnostics.len >= ctx.max_diagnostics) {
        return
    }
    
    diag := Diagnostic{
        range: range,
        severity: DiagnosticSeverity.Hint,
        code: null,
        code_description: null,
        source: string.from_literal("zen"),
        message: message,
        tags: array.new(DiagnosticTag, 0),
        related_information: array.new(DiagnosticRelatedInformation, 0),
        data: null,
    }
    
    array.push(Diagnostic, &ctx.diagnostics, diag)
}

// Add diagnostic with code
add_diagnostic_with_code = (ctx: *DiagnosticContext, range: Range, 
                           severity: DiagnosticSeverity, code: String, 
                           message: String) void {
    if (ctx.diagnostics.len >= ctx.max_diagnostics) {
        return
    }
    
    diag := Diagnostic{
        range: range,
        severity: severity,
        code: code,
        code_description: null,
        source: string.from_literal("zen"),
        message: message,
        tags: array.new(DiagnosticTag, 0),
        related_information: array.new(DiagnosticRelatedInformation, 0),
        data: null,
    }
    
    array.push(Diagnostic, &ctx.diagnostics, diag)
}

// Add related information to last diagnostic
add_related_info = (ctx: *DiagnosticContext, location: Location, message: String) void {
    if (ctx.diagnostics.len == 0) {
        return
    }
    
    last_diag := &ctx.diagnostics.data[ctx.diagnostics.len - 1]
    
    info := DiagnosticRelatedInformation{
        location: location,
        message: message,
    }
    
    array.push(DiagnosticRelatedInformation, &last_diag.related_information, info)
}

// Mark diagnostic as deprecated
mark_deprecated = (ctx: *DiagnosticContext, index: usize) void {
    if (index >= ctx.diagnostics.len) {
        return
    }
    
    diag := &ctx.diagnostics.data[index]
    array.push(DiagnosticTag, &diag.tags, DiagnosticTag.Deprecated)
}

// Mark diagnostic as unnecessary
mark_unnecessary = (ctx: *DiagnosticContext, index: usize) void {
    if (index >= ctx.diagnostics.len) {
        return
    }
    
    diag := &ctx.diagnostics.data[index]
    array.push(DiagnosticTag, &diag.tags, DiagnosticTag.Unnecessary)
}

// Common error diagnostics
add_syntax_error = (ctx: *DiagnosticContext, range: Range, details: String) void {
    message := string.format("Syntax error: {}", details)
    add_diagnostic_with_code(ctx, range, DiagnosticSeverity.Error, 
                            string.from_literal("E001"), message)
}

add_type_error = (ctx: *DiagnosticContext, range: Range, expected: String, 
                 found: String) void {
    message := string.format("Type mismatch: expected '{}', found '{}'", 
                           expected, found)
    add_diagnostic_with_code(ctx, range, DiagnosticSeverity.Error,
                            string.from_literal("E002"), message)
}

add_undefined_symbol = (ctx: *DiagnosticContext, range: Range, symbol: String) void {
    message := string.format("Undefined symbol: '{}'", symbol)
    add_diagnostic_with_code(ctx, range, DiagnosticSeverity.Error,
                            string.from_literal("E003"), message)
}

add_duplicate_symbol = (ctx: *DiagnosticContext, range: Range, symbol: String) void {
    message := string.format("Duplicate symbol: '{}'", symbol)
    add_diagnostic_with_code(ctx, range, DiagnosticSeverity.Error,
                            string.from_literal("E004"), message)
}

add_unused_variable = (ctx: *DiagnosticContext, range: Range, variable: String) void {
    message := string.format("Unused variable: '{}'", variable)
    add_diagnostic_with_code(ctx, range, DiagnosticSeverity.Warning,
                            string.from_literal("W001"), message)
}

add_unused_import = (ctx: *DiagnosticContext, range: Range, import: String) void {
    message := string.format("Unused import: '{}'", import)
    add_diagnostic_with_code(ctx, range, DiagnosticSeverity.Warning,
                            string.from_literal("W002"), message)
}

add_deprecated_usage = (ctx: *DiagnosticContext, range: Range, feature: String,
                       alternative: String) void {
    message := string.format("'{}' is deprecated, use '{}' instead", 
                           feature, alternative)
    add_diagnostic_with_code(ctx, range, DiagnosticSeverity.Warning,
                            string.from_literal("W003"), message)
}

// Convert diagnostics to JSON for LSP
diagnostics_to_json = (ctx: *DiagnosticContext) String {
    result := string.from_literal("[")
    
    for (i := 0; i < ctx.diagnostics.len; i += 1) {
        if (i > 0) {
            result = string.concat(result, ",")
        }
        result = string.concat(result, diagnostic_to_json(&ctx.diagnostics.data[i]))
    }
    
    result = string.concat(result, "]")
    return result
}

// Convert single diagnostic to JSON
diagnostic_to_json = (diag: *Diagnostic) String {
    result := string.from_literal("{")
    
    // Range
    result = string.concat(result, "\"range\":")
    result = string.concat(result, range_to_json(&diag.range))
    result = string.concat(result, ",")
    
    // Severity
    result = string.concat(result, "\"severity\":")
    result = string.concat(result, string.from_int(diag.severity as i32))
    result = string.concat(result, ",")
    
    // Source
    if (diag.source != null) {
        result = string.concat(result, "\"source\":\"")
        result = string.concat(result, diag.source)
        result = string.concat(result, "\",")
    }
    
    // Code
    if (diag.code != null) {
        result = string.concat(result, "\"code\":\"")
        result = string.concat(result, diag.code)
        result = string.concat(result, "\",")
    }
    
    // Message
    result = string.concat(result, "\"message\":\"")
    result = string.concat(result, escape_json_string(diag.message))
    result = string.concat(result, "\"")
    
    // Tags
    if (diag.tags.len > 0) {
        result = string.concat(result, ",\"tags\":[")
        for (i := 0; i < diag.tags.len; i += 1) {
            if (i > 0) {
                result = string.concat(result, ",")
            }
            result = string.concat(result, string.from_int(diag.tags.data[i] as i32))
        }
        result = string.concat(result, "]")
    }
    
    // Related information
    if (diag.related_information.len > 0) {
        result = string.concat(result, ",\"relatedInformation\":[")
        for (i := 0; i < diag.related_information.len; i += 1) {
            if (i > 0) {
                result = string.concat(result, ",")
            }
            result = string.concat(result, 
                                 related_info_to_json(&diag.related_information.data[i]))
        }
        result = string.concat(result, "]")
    }
    
    result = string.concat(result, "}")
    return result
}

// Convert range to JSON
range_to_json = (range: *Range) String {
    return string.format("{{\"start\":{{\"line\":{},\"character\":{}}},\"end\":{{\"line\":{},\"character\":{}}}}}",
                        range.start.line, range.start.character,
                        range.end.line, range.end.character)
}

// Convert related information to JSON
related_info_to_json = (info: *DiagnosticRelatedInformation) String {
    result := string.from_literal("{\"location\":{\"uri\":\"")
    result = string.concat(result, info.location.uri)
    result = string.concat(result, "\",\"range\":")
    result = string.concat(result, range_to_json(&info.location.range))
    result = string.concat(result, "},\"message\":\"")
    result = string.concat(result, escape_json_string(info.message))
    result = string.concat(result, "\"}")
    return result
}

// Escape string for JSON
escape_json_string = (s: String) String {
    // Simple escaping - would need full implementation
    result := string.replace(s, "\\", "\\\\")
    result = string.replace(result, "\"", "\\\"")
    result = string.replace(result, "\n", "\\n")
    result = string.replace(result, "\r", "\\r")
    result = string.replace(result, "\t", "\\t")
    return result
}

// Clear all diagnostics
clear_diagnostics = (ctx: *DiagnosticContext) void {
    array.clear(Diagnostic, &ctx.diagnostics)
}

// Get diagnostic count
diagnostic_count = (ctx: *DiagnosticContext) usize {
    return ctx.diagnostics.len
}

// Get error count
error_count = (ctx: *DiagnosticContext) usize {
    count := 0
    for (i := 0; i < ctx.diagnostics.len; i += 1) {
        if (ctx.diagnostics.data[i].severity == DiagnosticSeverity.Error) {
            count += 1
        }
    }
    return count
}

// Get warning count
warning_count = (ctx: *DiagnosticContext) usize {
    count := 0
    for (i := 0; i < ctx.diagnostics.len; i += 1) {
        if (ctx.diagnostics.data[i].severity == DiagnosticSeverity.Warning) {
            count += 1
        }
    }
    return count
}

// Free diagnostic context
free_context = (ctx: *DiagnosticContext) void {
    for (i := 0; i < ctx.diagnostics.len; i += 1) {
        diag := &ctx.diagnostics.data[i]
        array.free(DiagnosticTag, &diag.tags)
        array.free(DiagnosticRelatedInformation, &diag.related_information)
    }
    array.free(Diagnostic, &ctx.diagnostics)
}