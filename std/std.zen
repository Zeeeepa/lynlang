// Zen Standard Library - Main module
// This is the entry point for @std

// Core types
{ Option, Result, Ptr, MutPtr, RawPtr } = module.import("core")
{ String, StringBuilder } = module.import("core")
{ Vec, DynVec, Allocator, GPA, AsyncPool } = module.import("core")
{ Actor, Channel, Mutex, AtomicU32 } = module.import("core")
{ Range, range, range_step } = module.import("core")

// IO operations
io = module.import("io")

// Math operations  
math = module.import("math")

// Meta-programming
meta = module.import("meta")
reflect = module.import("reflect")

// Inline operations
inline = module.import("inline")
simd = module.import("simd")

// Import function for external modules
import = (name: string) any {
    return module.import(name)
}

// Defer implementation for @this.defer
defer = (f: () void) void {
    // Compiler intrinsic - will be executed at scope exit
    @compiler.defer(f)
}

// Module exports - everything from @std
module.exports = {
    // Core types
    Option: Option,
    Result: Result,
    Ptr: Ptr,
    MutPtr: MutPtr,
    RawPtr: RawPtr,
    String: String,
    StringBuilder: StringBuilder,
    Vec: Vec,
    DynVec: DynVec,
    Allocator: Allocator,
    GPA: GPA,
    AsyncPool: AsyncPool,
    Actor: Actor,
    Channel: Channel,
    Mutex: Mutex,
    AtomicU32: AtomicU32,
    Range: Range,
    range: range,
    range_step: range_step,
    
    // Modules
    io: io,
    math: math,
    meta: meta,
    reflect: reflect,
    inline: inline,
    simd: simd,
    
    // Functions
    import: import,
    defer: defer,
}