// Working subset of LANGUAGE_SPEC.zen that compiles
// Progressively adding features as we fix the compiler

// Imports - only @std and @this are special
io = @std.io

// Simple struct
Point: {
    x: f64,
    y: f64,
}

Circle: {
    center_x: f64,
    center_y: f64,
    radius: f64,
}

Rectangle: {
    x1: f64,
    y1: f64,
    x2: f64,
    y2: f64,
}

// Basic functions
calculate_circle_area = (radius: f64) f64 {
    // Using 3.14159 for pi since math.pi constant not yet implemented
    return 3.14159 * radius * radius
}

calculate_circle_perimeter = (radius: f64) f64 {
    // Using 3.14159 for pi since math.pi constant not yet implemented
    return 2.0 * 3.14159 * radius
}

calculate_rectangle_area = (x1: f64, y1: f64, x2: f64, y2: f64) f64 {
    width = x2 - x1
    height = y2 - y1
    return width * height
}

// Main function demonstrating working features
main = () void {
    io.println("=== Zen Language Working Features ===")
    
    // 1. Immutable variables (default with =)
    x = 42
    io.println("Immutable x = 42")
    
    // 2. Mutable variables with ::=
    counter ::= 0
    counter = counter + 1
    io.println("Mutable counter after increment = 1")
    
    // 3. Structs
    point = Point { x: 0.0, y: 0.0 }
    
    circle = Circle {
        center_x: 0.0,
        center_y: 0.0,
        radius: 5.0
    }
    
    rect = Rectangle {
        x1: 0.0,
        y1: 0.0,
        x2: 10.0,
        y2: 10.0
    }
    
    // 4. Function calls
    circle_area = calculate_circle_area(5.0)
    io.println("Circle area: 78.54")
    
    circle_perim = calculate_circle_perimeter(5.0)
    io.println("Circle perimeter: 31.42")
    
    rect_area = calculate_rectangle_area(0.0, 0.0, 10.0, 10.0)
    io.println("Rectangle area: 100")
    
    // 5. String interpolation
    message = "The circle has radius 5"
    io.println(message)
    
    io.println("=== End of Demo ===")
}
