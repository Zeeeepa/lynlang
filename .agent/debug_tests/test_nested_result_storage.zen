// Test storing and retrieving nested Result values
{ io } = @std
{ Result } = @std

// Function that returns Result<Result<i32, string>, string>
make_nested = (val: i32) Result<Result<i32, string>, string> {
    inner = Result.Ok(val)
    return Result.Ok(inner)
}

// Function that extracts value from nested Result using raise
extract_nested = () i32 {
    nested = make_nested(555)
    inner = nested.raise()  // Should extract inner Result
    // Debug: Check what type inner has
    inner ?
        | Result.Ok(val) {
            io.println("Inner is Ok with value: ${val}")
            return val as i32
        }
        | Result.Err(e) {
            io.println("Inner is Err with: ${e}")
            return -1
        }
}

main = () void {
    // Test 1: Store nested result in variable and extract
    io.println("Test 1: Store and extract nested Result")
    
    stored = make_nested(42)
    stored ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(val) {
                    io.println("Stored value: ${val}")  // Should print 42
                }
                | Result.Err(e) {
                    io.println("Inner error: ${e}")
                }
        }
        | Result.Err(e) {
            io.println("Outer error: ${e}")
        }
    
    // Test 2: Extract using raise()
    io.println("Test 2: Extract using raise()")
    
    value = extract_nested()
    io.println("Extracted value: ${value}")  // Should print 555
    
    // Test 3: Complex nesting with multiple levels
    io.println("Test 3: Triple nesting")
    
    level1 = Result.Ok(999)
    level2 = Result.Ok(level1)
    level3 = Result.Ok(level2)
    
    level3 ?
        | Result.Ok(l2) {
            l2 ?
                | Result.Ok(l1) {
                    l1 ?
                        | Result.Ok(final_val) {
                            io.println("Triple nested value: ${final_val}")  // Should print 999
                        }
                        | Result.Err(e) {
                            io.println("Level 1 error: ${e}")
                        }
                }
                | Result.Err(e) {
                    io.println("Level 2 error: ${e}")
                }
        }
        | Result.Err(e) {
            io.println("Level 3 error: ${e}")
        }
}