// Test to debug what's happening with heap allocation
{ io, Result } = @std

get_inner_result = () Result<i32, string> {
    return Result.Ok(42)
}

main = () i32 {
    io.println("=== Debug Heap Inspection ===")
    
    // Test 1: Function call that returns Result
    inner1 = get_inner_result()
    inner1 ?
        | Result.Ok(v) { io.println("Function inner: ${v}") }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test 2: Direct creation 
    inner2 = Result.Ok(42)
    inner2 ?
        | Result.Ok(v) { io.println("Direct inner: ${v}") }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test 3: Nested with function result
    outer1 = Result.Ok(get_inner_result())
    outer1 ?
        | Result.Ok(r) {
            r ?
                | Result.Ok(v) { 
                    io.println("Nested function: ${v}")
                    v != 42 ? | true { return 1 } | false {}
                }
                | Result.Err(e) { io.println("Err: ${e}") }
        }
        | Result.Err(e) {}
    
    // Test 4: Nested with direct creation (THIS FAILS)
    outer2 = Result.Ok(Result.Ok(42))
    outer2 ?
        | Result.Ok(r) {
            r ?
                | Result.Ok(v) { 
                    io.println("Nested direct: ${v}")
                    v != 42 ? | true { return 1 } | false {}
                }
                | Result.Err(e) { io.println("Err: ${e}") }
        }
        | Result.Err(e) {}
    
    return 0
}
