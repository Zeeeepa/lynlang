// Simplified test to debug nested generic issue
{ io } = @std
{ Result, Option } = @std

main = () void {
    io.println("=== Testing Direct Nested Generic Creation ===")
    
    // Create Option<i32> directly
    inner_opt = Option.Some(42)
    inner_opt ?
        | Option.Some(val) { io.println("Direct Option.Some: ${val}") }
        | Option.None { io.println("Direct Option.None") }
    
    // Create Result<Option<i32>, string> directly
    outer_result = Result.Ok(inner_opt)
    outer_result ?
        | Result.Ok(opt) {
            io.println("Got Result.Ok with Option payload")
            opt ?
                | Option.Some(val) { io.println("  Inner Option.Some: ${val}") }
                | Option.None { io.println("  Inner Option.None") }
        }
        | Result.Err(e) { io.println("Result.Err: ${e}") }
    
    // Test with inline creation
    io.println("\n--- Testing Inline Creation ---")
    inline_nested = Result.Ok(Option.Some(99))
    inline_nested ?
        | Result.Ok(opt2) {
            io.println("Got inline Result.Ok")
            opt2 ?
                | Option.Some(v) { io.println("  Inline inner: ${v}") }
                | Option.None { io.println("  Inline inner: None") }
        }
        | Result.Err(e) { io.println("Inline Result.Err: ${e}") }
}