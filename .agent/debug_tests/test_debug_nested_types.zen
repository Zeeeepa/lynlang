// Debug what types we're dealing with
{ io, Result } = @std

main = () i32 {
    io.println("=== Debug Nested Types ===")
    
    // Create inner Result
    inner = Result.Ok(100)
    io.println("Created inner Result.Ok(100)")
    
    // Test inner directly
    inner ?
        | Result.Ok(v) { 
            io.println("Direct inner value: ${v}")
            v == 100 ? | true {} | false { return 1 }
        }
        | Result.Err(e) { return 2 }
    
    // Create outer with inner
    outer = Result.Ok(inner)
    io.println("\nCreated outer Result.Ok(inner)")
    
    // Extract and test
    outer ?
        | Result.Ok(extracted) {
            io.println("Extracted inner from outer")
            extracted ?
                | Result.Ok(v2) {
                    io.println("Nested inner value: ${v2}")
                    v2 == 100 ?
                        | true { 
                            io.println("✅ Test 1 passed")
                        }
                        | false { 
                            io.println("❌ Test 1 failed: got ${v2}")
                            return 3
                        }
                }
                | Result.Err(e) { return 4 }
        }
        | Result.Err(e) { return 5 }
    
    // Now test inline creation
    io.println("\n--- Testing inline creation ---")
    inline_outer = Result.Ok(Result.Ok(200))
    io.println("Created inline Result.Ok(Result.Ok(200))")
    
    inline_outer ?
        | Result.Ok(inline_inner) {
            io.println("Extracted inline inner")
            inline_inner ?
                | Result.Ok(v3) {
                    io.println("Inline nested value: ${v3}")
                    v3 == 200 ?
                        | true { 
                            io.println("✅ Test 2 passed")
                            return 0
                        }
                        | false { 
                            io.println("❌ Test 2 failed: got ${v3}")
                            return 6
                        }
                }
                | Result.Err(e) { return 7 }
        }
        | Result.Err(e) { return 8 }
}
