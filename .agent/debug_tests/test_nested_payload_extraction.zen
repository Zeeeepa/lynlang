// Test nested generic payload extraction
{ io, Result, Option } = @std

// Test basic nested Result<Result<i32, string>, string>
test_nested_result = () void {
    io.println("Testing nested Result<Result<i32, string>, string>")
    
    // Create inner Result.Ok(42)
    inner_ok = Result.Ok(42)
    
    // Create outer Result.Ok(inner_ok)
    outer_ok = Result.Ok(inner_ok)
    
    // Extract outer
    outer_ok ?
        | Result.Ok(inner) {
            io.println("  Extracted inner Result from outer")
            inner ?
                | Result.Ok(val) {
                    io.println("  Extracted value: ${val}")
                    val == 42 ?
                        | true { io.println("  ✓ Correct value extracted") }
                        | false { io.println("  ✗ Wrong value: expected 42, got ${val}") }
                }
                | Result.Err(e) { io.println("  Inner was Err: ${e}") }
        }
        | Result.Err(e) { io.println("  Outer was Err: ${e}") }
}

// Test Result<Option<i32>, string>
test_result_option = () void {
    io.println("")
    io.println("Testing Result<Option<i32>, string>")
    
    // Create Some(100)
    some_val = Option.Some(100)
    
    // Create Result.Ok(Some(100))
    result = Result.Ok(some_val)
    
    // Extract
    result ?
        | Result.Ok(opt) {
            io.println("  Extracted Option from Result")
            opt ?
                | Option.Some(val) {
                    io.println("  Extracted value: ${val}")
                    val == 100 ?
                        | true { io.println("  ✓ Correct value extracted") }
                        | false { io.println("  ✗ Wrong value: expected 100, got ${val}") }
                }
                | Option.None { io.println("  Got None") }
        }
        | Result.Err(e) { io.println("  Result was Err: ${e}") }
}

// Test Option<Result<i32, string>>
test_option_result = () void {
    io.println("")
    io.println("Testing Option<Result<i32, string>>")
    
    // Create Result.Ok(200)
    ok_val = Result.Ok(200)
    
    // Create Option.Some(Result.Ok(200))
    option = Option.Some(ok_val)
    
    // Extract
    option ?
        | Option.Some(res) {
            io.println("  Extracted Result from Option")
            res ?
                | Result.Ok(val) {
                    io.println("  Extracted value: ${val}")
                    val == 200 ?
                        | true { io.println("  ✓ Correct value extracted") }
                        | false { io.println("  ✗ Wrong value: expected 200, got ${val}") }
                }
                | Result.Err(e) { io.println("  Result was Err: ${e}") }
        }
        | Option.None { io.println("  Option was None") }
}

// Test deeply nested: Result<Option<Result<i32, string>>, string>
test_triple_nested = () void {
    io.println("")
    io.println("Testing Result<Option<Result<i32, string>>, string>")
    
    // Create innermost Result.Ok(300)
    inner_result = Result.Ok(300)
    
    // Create middle Option.Some(Result.Ok(300))
    middle_option = Option.Some(inner_result)
    
    // Create outer Result.Ok(Option.Some(Result.Ok(300)))
    outer = Result.Ok(middle_option)
    
    // Extract
    outer ?
        | Result.Ok(opt) {
            io.println("  Extracted Option from outer Result")
            opt ?
                | Option.Some(res) {
                    io.println("  Extracted Result from middle Option")
                    res ?
                        | Result.Ok(val) {
                            io.println("  Extracted value: ${val}")
                            val == 300 ?
                                | true { io.println("  ✓ Correct value extracted") }
                                | false { io.println("  ✗ Wrong value: expected 300, got ${val}") }
                        }
                        | Result.Err(e) { io.println("  Inner Result was Err: ${e}") }
                }
                | Option.None { io.println("  Middle Option was None") }
        }
        | Result.Err(e) { io.println("  Outer Result was Err: ${e}") }
}

main = () i32 {
    io.println("=== Nested Generic Payload Extraction Tests ===")
    io.println("")
    
    test_nested_result()
    test_result_option()
    test_option_result()
    test_triple_nested()
    
    io.println("")
    io.println("=== All tests complete ===")
    0
}