// Test raise() with Result created from variable
{ io, Result } = @std

// Function returning nested Result where inner is a variable
get_with_variable = () Result<Result<i32, string>, string> {
    inner = Result.Ok(42)
    io.println("Created inner: Result.Ok(42)")
    
    outer = Result.Ok(inner)
    io.println("Created outer: Result.Ok(inner)")
    
    outer
}

// Function returning nested Result directly
get_direct = () Result<Result<i32, string>, string> {
    Result.Ok(Result.Ok(42))
}

main = () i32 {
    io.println("=== Testing variable construction with raise ===")
    
    // First raise to get inner from variable construction
    inner_from_var = get_with_variable().raise()
    io.println("After first raise on variable")
    
    // Pattern match to see what we got
    inner_from_var ? | Result.Ok(v) => io.println("Inner is Ok: ${v}")
                     | Result.Err(e) => io.println("Inner is Err: ${e}")
    
    // Try second raise
    value_from_var = inner_from_var.raise()
    io.println("Value from variable construction: ${value_from_var}")
    
    io.println("\n=== Testing direct construction with raise ===")
    
    // First raise to get inner from direct construction
    inner_from_direct = get_direct().raise()
    io.println("After first raise on direct")
    
    // Pattern match to see what we got
    inner_from_direct ? | Result.Ok(v) => io.println("Inner is Ok: ${v}")
                       | Result.Err(e) => io.println("Inner is Err: ${e}")
    
    // Try second raise
    value_from_direct = inner_from_direct.raise()
    io.println("Value from direct construction: ${value_from_direct}")
    
    // Check if both are 42
    value_from_var == 42 ? | true => {
        value_from_direct == 42 ? | true => 0 | false => 1
    } | false => 2
}