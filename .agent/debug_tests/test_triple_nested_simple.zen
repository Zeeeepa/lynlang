// Simple test for triple nested generic issue
{ io, Result, Option } = @std

main = () i32 {
    // Triple nested: Option<Result<Option<i32>, string>>
    inner_some = Option.Some(999)
    middle_ok = Result.Ok(inner_some)
    outer_some = Option.Some(middle_ok)
    
    io.println("Starting extraction...")
    
    // Extract outer Option
    outer_some ?
        | Option.Some(res) {
            io.println("Outer Some extracted")
            // Extract middle Result
            res ?
                | Result.Ok(opt) {
                    io.println("Middle Ok extracted")
                    // Extract inner Option
                    opt ?
                        | Option.Some(v) { 
                            io.println("Inner Some extracted")
                            io.println("Value: ${v}")
                            // This is where the comparison fails
                            io.println("Testing comparison...")
                            test = v == 999 ? | true { 1 } | false { 0 }
                            io.println("Comparison result: ${test}")
                        }
                        | Option.None { io.println("Inner None") }
                }
                | Result.Err(e) { io.println("Middle Err: ${e}") }
        }
        | Option.None { io.println("Outer None") }
    
    0
}