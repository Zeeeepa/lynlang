// Debug nested Result issue
{ io, Result } = @std

main = () void {
    // Step 1: Create inner Result
    io.println("Creating inner = Result.Ok(42)")
    inner = Result.Ok(42)
    
    // Verify inner works
    inner ?
        | Result.Ok(v) { io.println("Inner value: ${v}") }
        | Result.Err(e) { io.println("Inner error: ${e}") }
    
    // Step 2: Create outer Result with inner
    io.println("\nCreating outer = Result.Ok(inner)")
    outer = Result.Ok(inner)
    
    // Step 3: Extract from outer
    io.println("\nExtracting from outer:")
    outer ?
        | Result.Ok(inner_result) {
            io.println("Got inner result from outer")
            inner_result ?
                | Result.Ok(val) { 
                    io.println("Final value: ${val}")
                    val == 42 ?
                        | true { io.println("SUCCESS: Got correct value 42") }
                        | false { io.println("ERROR: Got wrong value ${val}") }
                }
                | Result.Err(e) { io.println("Inner error: ${e}") }
        }
        | Result.Err(e) { io.println("Outer error: ${e}") }
}