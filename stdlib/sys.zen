// Low-level system call interface for Zen
// Consolidates all POSIX system calls in one place

// File operations
__sys_open = (path: RawPtr<u8>, flags: i32, mode: u32) i32 {
    inline.c("""
        return open(${path.addr}, ${flags}, ${mode});
    """)
}

__sys_close = (fd: i32) i32 {
    inline.c("""
        return close(${fd});
    """)
}

__sys_read = (fd: i32, buf: RawPtr<u8>, count: usize) i64 {
    inline.c("""
        return read(${fd}, ${buf.addr}, ${count});
    """)
}

__sys_write = (fd: i32, buf: RawPtr<u8>, count: usize) i64 {
    inline.c("""
        return write(${fd}, ${buf.addr}, ${count});
    """)
}

__sys_lseek = (fd: i32, offset: i64, whence: i32) i64 {
    inline.c("""
        return lseek(${fd}, ${offset}, ${whence});
    """)
}

__sys_fsync = (fd: i32) i32 {
    inline.c("""
        return fsync(${fd});
    """)
}

// File metadata operations
__sys_fstat = (fd: i32, buf: Ptr<StatBuf>) i32 {
    inline.c("""
        return fstat(${fd}, ${buf.addr});
    """)
}

__sys_stat = (path: RawPtr<u8>, buf: Ptr<StatBuf>) i32 {
    inline.c("""
        return stat(${path.addr}, ${buf.addr});
    """)
}

__sys_access = (path: RawPtr<u8>, mode: i32) i32 {
    inline.c("""
        return access(${path.addr}, ${mode});
    """)
}

// File operations
__sys_unlink = (path: RawPtr<u8>) i32 {
    inline.c("""
        return unlink(${path.addr});
    """)
}

__sys_rename = (old: RawPtr<u8>, new: RawPtr<u8>) i32 {
    inline.c("""
        return rename(${old.addr}, ${new.addr});
    """)
}

// Directory operations
__sys_mkdir = (path: RawPtr<u8>, mode: u32) i32 {
    inline.c("""
        return mkdir(${path.addr}, ${mode});
    """)
}

__sys_rmdir = (path: RawPtr<u8>) i32 {
    inline.c("""
        return rmdir(${path.addr});
    """)
}

__sys_opendir = (path: RawPtr<u8>) RawPtr<void> {
    inline.c("""
        return opendir(${path.addr});
    """)
}

__sys_readdir = (dir: RawPtr<void>) Ptr<DirEnt> {
    inline.c("""
        return readdir(${dir.addr});
    """)
}

__sys_closedir = (dir: RawPtr<void>) i32 {
    inline.c("""
        return closedir(${dir.addr});
    """)
}

// Network operations
__sys_socket = (domain: i32, type: i32, protocol: i32) i32 {
    inline.c("""
        return socket(${domain}, ${type}, ${protocol});
    """)
}

__sys_bind = (fd: i32, addr: RawPtr<SockAddrIn>, len: u32) i32 {
    inline.c("""
        return bind(${fd}, ${addr.addr}, ${len});
    """)
}

__sys_listen = (fd: i32, backlog: i32) i32 {
    inline.c("""
        return listen(${fd}, ${backlog});
    """)
}

__sys_accept = (fd: i32, addr: RawPtr<SockAddrIn>, len: RawPtr<u32>) i32 {
    inline.c("""
        return accept(${fd}, ${addr.addr}, ${len.addr});
    """)
}

__sys_connect = (fd: i32, addr: RawPtr<SockAddrIn>, len: u32) i32 {
    inline.c("""
        return connect(${fd}, ${addr.addr}, ${len});
    """)
}

__sys_send = (fd: i32, buf: RawPtr<u8>, len: usize, flags: i32) i64 {
    inline.c("""
        return send(${fd}, ${buf.addr}, ${len}, ${flags});
    """)
}

__sys_recv = (fd: i32, buf: RawPtr<u8>, len: usize, flags: i32) i64 {
    inline.c("""
        return recv(${fd}, ${buf.addr}, ${len}, ${flags});
    """)
}

__sys_sendto = (fd: i32, buf: RawPtr<u8>, len: usize, flags: i32, addr: RawPtr<SockAddrIn>, addr_len: u32) i64 {
    inline.c("""
        return sendto(${fd}, ${buf.addr}, ${len}, ${flags}, ${addr.addr}, ${addr_len});
    """)
}

__sys_recvfrom = (fd: i32, buf: RawPtr<u8>, len: usize, flags: i32, addr: RawPtr<SockAddrIn>, addr_len: RawPtr<u32>) i64 {
    inline.c("""
        return recvfrom(${fd}, ${buf.addr}, ${len}, ${flags}, ${addr.addr}, ${addr_len.addr});
    """)
}

__sys_setsockopt = (fd: i32, level: i32, optname: i32, optval: RawPtr<void>, optlen: u32) i32 {
    inline.c("""
        return setsockopt(${fd}, ${level}, ${optname}, ${optval.addr}, ${optlen});
    """)
}

__sys_fcntl = (fd: i32, cmd: i32, arg: i32) i32 {
    inline.c("""
        return fcntl(${fd}, ${cmd}, ${arg});
    """)
}

// System constants
O_RDONLY: i32 = 0
O_WRONLY: i32 = 1
O_RDWR: i32 = 2
O_CREAT: i32 = 0o100
O_TRUNC: i32 = 0o1000
O_APPEND: i32 = 0o2000
O_NONBLOCK: i32 = 2048

SEEK_SET: i32 = 0
SEEK_CUR: i32 = 1
SEEK_END: i32 = 2

F_OK: i32 = 0
R_OK: i32 = 4
W_OK: i32 = 2
X_OK: i32 = 1

S_IFDIR: u32 = 0o040000
S_IFREG: u32 = 0o100000
S_IFLNK: u32 = 0o120000

AF_INET: i32 = 2
AF_INET6: i32 = 10
SOCK_STREAM: i32 = 1
SOCK_DGRAM: i32 = 2
SOL_SOCKET: i32 = 1
SO_REUSEADDR: i32 = 2
F_GETFL: i32 = 3
F_SETFL: i32 = 4

// Shared data structures
StatBuf: {
    st_dev: u64,
    st_ino: u64,
    st_mode: u32,
    st_nlink: u64,
    st_uid: u32,
    st_gid: u32,
    st_rdev: u64,
    st_size: u64,
    st_blksize: u64,
    st_blocks: u64,
    st_atime: u64,
    st_mtime: u64,
    st_ctime: u64,
}

DirEnt: {
    d_ino: u64,
    d_off: i64,
    d_reclen: u16,
    d_type: u8,
    d_name: [256]u8,
}

SockAddrIn: {
    sin_family: u16,
    sin_port: u16,
    sin_addr: u32,
    sin_zero: [8]u8,
}
