// Environment variables and system information module

{ 
core,
string,
option,
result,
hashmap,
    Vec, 
    DynVec } = @std

// Get environment variable value
get = (key: string) Option<string>   {
    // Internal function to get env var from system
    value := __builtin_get_env(key)
    value == None ? { return Option.None }
    return Option.Some(value)
}

// Get environment variable with default value
get_or = (key: string, default: string) string   {
    get(key).unwrap_or(default)
}

// Set environment variable
set = (key: string, value: string) Result<void, string>   {
    if key.is_empty() {
        return Result.Err("Environment variable name cannot be empty")
    }
    
    success := __builtin_set_env(key, value)
    if success {
        return Result.Ok(void)
    }
    return Result.Err("Failed to set environment variable")
}

// Remove environment variable
remove = (key: string) Result<void, string>   {
    if key.is_empty() {
        return Result.Err("Environment variable name cannot be empty")
    }
    
    success := __builtin_unset_env(key)
    if success {
        return Result.Ok(void)
    }
    return Result.Err("Failed to remove environment variable")
}

// Get all environment variables as a hashmap
vars = () HashMap<string, string>   {
    map := hashmap.new<string, string>()
    env_list := __builtin_get_env_list()
    
    for env_pair in env_list {
        parts := string.split(env_pair, "=", 2)
        if parts.len == 2 {
            hashmap.insert(&map, parts[0], parts[1])
        }
    }
    
    return map
}

// Check if environment variable exists
exists = (key: string) bool   {
    get(key).is_some()
}

// Clear all environment variables (use with caution!)
clear = () void   {
    __builtin_clear_env()
}

// System information structure
SystemInfo: {
    os: string,           // Operating system name
    arch: string,         // CPU architecture
    hostname: string,     // System hostname
    username: string,     // Current username
    home_dir: string,     // Home directory path
    temp_dir: string,     // Temporary directory path
    num_cpus: u32,        // Number of CPU cores
    total_memory: u64,    // Total system memory in bytes
    available_memory: u64, // Available memory in bytes
}

// Get system information
system_info = () SystemInfo   {
    return SystemInfo {
        os: __builtin_os_name(),
        arch: __builtin_cpu_arch(),
        hostname: __builtin_hostname(),
        username: __builtin_username(),
        home_dir: __builtin_home_dir(),
        temp_dir: __builtin_temp_dir(),
        num_cpus: __builtin_num_cpus(),
        total_memory: __builtin_total_memory(),
        available_memory: __builtin_available_memory(),
    }
}

// Get current operating system
os = () string   {
    return __builtin_os_name()
}

// Get CPU architecture
arch = () string   {
    return __builtin_cpu_arch()
}

// Get hostname
hostname = () string   {
    return __builtin_hostname()
}

// Get current username
username = () string   {
    return __builtin_username()
}

// Get home directory
home_dir = () string   {
    return __builtin_home_dir()
}

// Get temporary directory
temp_dir = () string   {
    return __builtin_temp_dir()
}

// Get number of CPU cores
num_cpus = () u32   {
    return __builtin_num_cpus()
}

// Get current working directory
current_dir = () Result<string, string>   {
    dir := __builtin_current_dir()
    if dir .== None {
        return Result.Err("Failed to get current directory")
    }
    return Result.Ok(dir)
}

// Set current working directory
set_current_dir = (path: string) Result<void, string>   {
    if path.is_empty() {
        return Result.Err("Path cannot be empty")
    }
    
    success := __builtin_set_current_dir(path)
    if success {
        return Result.Ok(void)
    }
    return Result.Err("Failed to change directory: " + path)
}

// Get executable path
exe_path = () Result<string, string>   {
    path := __builtin_exe_path()
    if path .== None {
        return Result.Err("Failed to get executable path")
    }
    return Result.Ok(path)
}

// Get command line arguments
args = () DynVec<string>   {
    return __builtin_args()
}

// Join paths in a platform-independent way
join_paths = (paths: ...string) string   {
    if paths.len == 0 {
        return ""
    }
    
    separator := if os() == "windows" { "\\" } else { "/" }
    result := paths[0]
    
    for i := 1; i < paths.len; i += 1 {
        path := paths[i]
        
        // Remove trailing separator from result
        if result.ends_with(separator) {
            result = result[0..result.len-1]
        }
        
        // Remove leading separator from path
        if path.starts_with(separator) {
            path = path[1..]
        }
        
        // Join with separator
        if path.len > 0 {
            result = result + separator + path
        }
    }
    
    return result
}

// Split PATH environment variable into list
path_list = () DynVec<string>   {
    path_var := get("PATH").unwrap_or("")
    separator := if os() == "windows" { ";" } else { ":" }
    return string.split(path_var, separator)
}

// Add directory to PATH
add_to_path = (dir: string) Result<void, string>   {
    paths := path_list()
    
    // Check if already in PATH
    for path in paths {
        if path == dir {
            return Result.Ok(void)  // Already present
        }
    }
    
    // Add to PATH
    paths.push(dir)
    separator := if os() == "windows" { ";" } else { ":" }
    new_path := string.join(paths, separator)
    
    return set("PATH", new_path)
}

// Environment variable builder for child processes
EnvBuilder: {
    vars: HashMap<string, string>,
}

// Create new environment builder
env_builder = () EnvBuilder   {
    return EnvBuilder {
        vars: vars(),  // Start with current environment
    }
}

// Add or update variable in builder
env_builder_set = (builder: MutPtr<EnvBuilder>, key: string, value: string) MutPtr<EnvBuilder> {
    hashmap.insert(&builder.vars, key, value)
    return builder
}

// Remove variable from builder
env_builder_remove = (builder: MutPtr<EnvBuilder>, key: string) MutPtr<EnvBuilder> {
    hashmap.remove(&builder.vars, key)
    return builder
}

// Clear all variables in builder
env_builder_clear = (builder: MutPtr<EnvBuilder>) MutPtr<EnvBuilder> {
    hashmap.clear(&builder.vars)
    return builder
}

// Build environment for subprocess
env_builder_build = (builder: &EnvBuilder) HashMap<string, string>   {
    return builder.vars
}