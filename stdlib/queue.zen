// Queue module - Queue implementation using List
// Provides queue data structure (FIFO - First In, First Out)

// Import list functionality to build queue on top of it
list_module = import("collections/list")
{ List, ListNode } = list_module

// Queue implementation using linked list
Queue<T> = List<T>

// Queue operations  
queue_new<T> = () Queue<T> {
    return list_module.new<T>()
}

queue_enqueue<T> = (queue: &mut Queue<T>, value: T) void {
    list_module.push_back<T>(queue, value)
}

queue_dequeue<T> = (queue: &mut Queue<T>) Option<T> {
    return list_module.pop_front<T>(queue)
}

queue_peek<T> = (queue: &Queue<T>) Option<T> {
    return list_module.peek_front<T>(queue)
}

queue_size<T> = (queue: &Queue<T>) usize {
    return list_module.len<T>(queue)
}

queue_is_empty<T> = (queue: &Queue<T>) bool {
    return list_module.is_empty<T>(queue)
}

queue_clear<T> = (queue: &mut Queue<T>) void {
    list_module.clear<T>(queue)
}

module.exports = { 
    Queue, queue_new, queue_enqueue, queue_dequeue, queue_peek, 
    queue_size, queue_is_empty, queue_clear 
}
