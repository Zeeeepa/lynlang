// Set module - re-exports from collections and provides HashSet
// Provides set data structure using HashMap

// Import hashmap functionality
hashmap_module = import("collections/hashmap")

// Re-export HashMap types and functions
module.exports = hashmap_module

// HashSet implementation using HashMap
HashSet<T>: {
    map: hashmap_module.HashMap<T, bool>
}

// Create new set
HashSet<T>.new = () HashSet<T> {
    return HashSet<T>{
        map: hashmap_module.hashmap_new<T, bool>()
    }
}

// Add element to set
HashSet<T>.add = (self: *HashSet<T>, value: T, hash_func: (T) i64) core.Result<bool, core.Error> {
    contains := hashmap_module.hashmap_contains(&self.map, value, hash_func)
    contains ? | true {
        return core.Result:Ok(false)  // Already exists
    } | false {
        result := hashmap_module.hashmap_insert(&self.map, value, true, hash_func)
        return result ? | Ok(_) => core.Result:Ok(true) | Err(e) => core.Result:Err(e)
    }
}

// Remove element from set
HashSet<T>.remove = (self: *HashSet<T>, value: T, hash_func: (T) i64) bool {
    result := hashmap_module.hashmap_remove(&self.map, value, hash_func)
    return result ? | Some(_) => true | None => false
}

// Check if element exists in set
HashSet<T>.contains = (self: *HashSet<T>, value: T, hash_func: (T) i64) bool {
    return hashmap_module.hashmap_contains(&self.map, value, hash_func)
}

// Get set size
HashSet<T>.size = (self: *HashSet<T>) i64 {
    return hashmap_module.hashmap_len(&self.map)
}

// Check if set is empty
HashSet<T>.is_empty = (self: *HashSet<T>) bool {
    return hashmap_module.hashmap_is_empty(&self.map)
}

// Clear set
HashSet<T>.clear = (self: *HashSet<T>) void {
    hashmap_module.hashmap_clear(&self.map)
}

// Export HashSet along with hashmap functionality
module.exports = { ...hashmap_module, HashSet }
