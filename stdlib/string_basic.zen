// Basic string utilities module written in pure Zen
// Provides fundamental string manipulation functions

// String length (assuming null-terminated C strings for now)
strlen = (s: string) i32 {
    len := 0
    i := 0
    
    // Loop until we hit null terminator
    while (s[i] != '\0') {
        len = len + 1
        i = i + 1
    }
    
    return len
}

// Compare two strings
strcmp = (s1: string, s2: string) i32 {
    i := 0
    
    while (s1[i] != '\0' && s2[i] != '\0') {
        if (s1[i] < s2[i]) {
            return -1
        }
        if (s1[i] > s2[i]) {
            return 1
        }
        i = i + 1
    }
    
    // Check if one string is longer
    if (s1[i] != '\0') {
        return 1
    }
    if (s2[i] != '\0') {
        return -1
    }
    
    return 0
}

// Check if strings are equal
str_equal = (s1: string, s2: string) bool {
    return strcmp(s1, s2) == 0
}

// Check if string starts with prefix
starts_with = (s: string, prefix: string) bool {
    i := 0
    
    while (prefix[i] != '\0') {
        if (s[i] == '\0' || s[i] != prefix[i]) {
            return false
        }
        i = i + 1
    }
    
    return true
}

// Check if string ends with suffix
ends_with = (s: string, suffix: string) bool {
    s_len := strlen(s)
    suffix_len := strlen(suffix)
    
    if (suffix_len > s_len) {
        return false
    }
    
    offset := s_len - suffix_len
    i := 0
    
    while (suffix[i] != '\0') {
        if (s[offset + i] != suffix[i]) {
            return false
        }
        i = i + 1
    }
    
    return true
}

// Find character in string (returns index or -1)
index_of_char = (s: string, c: char) i32 {
    i := 0
    
    while (s[i] != '\0') {
        if (s[i] == c) {
            return i
        }
        i = i + 1
    }
    
    return -1
}

// Find last occurrence of character
last_index_of_char = (s: string, c: char) i32 {
    last_index := -1
    i := 0
    
    while (s[i] != '\0') {
        if (s[i] == c) {
            last_index = i
        }
        i = i + 1
    }
    
    return last_index
}

// Check if character is alphabetic
is_alpha = (c: char) bool {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
}

// Check if character is digit
is_digit = (c: char) bool {
    return c >= '0' && c <= '9'
}

// Check if character is alphanumeric
is_alnum = (c: char) bool {
    return is_alpha(c) || is_digit(c)
}

// Check if character is whitespace
is_space = (c: char) bool {
    return c == ' ' || c == '\t' || c == '\n' || c == '\r'
}

// Convert character to lowercase
to_lower_char = (c: char) char {
    if (c >= 'A' && c <= 'Z') {
        return c + ('a' - 'A')
    }
    return c
}

// Convert character to uppercase
to_upper_char = (c: char) char {
    if (c >= 'a' && c <= 'z') {
        return c - ('a' - 'A')
    }
    return c
}

// Count occurrences of character in string
count_char = (s: string, c: char) i32 {
    count := 0
    i := 0
    
    while (s[i] != '\0') {
        if (s[i] == c) {
            count = count + 1
        }
        i = i + 1
    }
    
    return count
}

// Check if string contains only alphabetic characters
is_all_alpha = (s: string) bool {
    if (s[0] == '\0') {
        return false
    }
    
    i := 0
    while (s[i] != '\0') {
        if (!is_alpha(s[i])) {
            return false
        }
        i = i + 1
    }
    
    return true
}

// Check if string contains only digits
is_all_digits = (s: string) bool {
    if (s[0] == '\0') {
        return false
    }
    
    i := 0
    while (s[i] != '\0') {
        if (!is_digit(s[i])) {
            return false
        }
        i = i + 1
    }
    
    return true
}

// Simple string to integer conversion (no error checking)
str_to_i32 = (s: string) i32 {
    result := 0
    sign := 1
    i := 0
    
    // Handle negative sign
    if (s[0] == '-') {
        sign = -1
        i = 1
    } else if (s[0] == '+') {
        i = 1
    }
    
    while (s[i] != '\0' && is_digit(s[i])) {
        result = result * 10 + (s[i] - '0')
        i = i + 1
    }
    
    return result * sign
}