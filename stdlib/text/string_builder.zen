// StringBuilder implementation for Zen
// From LANGUAGE_SPEC.zen lines 386-394

{ Allocator } = @std

// StringBuilder for efficient string building
StringBuilder: {
    buffer:: string,
    allocator: Allocator,
}

// Constructor
StringBuilder = (alloc: Allocator) StringBuilder {
    return StringBuilder {
        buffer: "",
        allocator: alloc,
    }
}

// Append a string
append = (sb:: MutPtr<StringBuilder>, s: string) MutPtr<StringBuilder> {
    sb.val.buffer = sb.val.buffer + s
    return sb
}

// Append a string with newline
append_line = (sb:: MutPtr<StringBuilder>, s: string) MutPtr<StringBuilder> {
    sb.val.buffer = sb.val.buffer + s + "\n"
    return sb
}

// Build the final string
build = (sb: Ptr<StringBuilder>) string {
    return sb.val.buffer
}

// Cleanup
deinit = (sb:: MutPtr<StringBuilder>) void {
    // Clean up resources if needed
    sb.val.buffer = ""
}

// Module exports
module.exports = { StringBuilder, append, append_line, build, deinit }