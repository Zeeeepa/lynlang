// Memory allocator interface and implementations

// Allocator trait - all allocators must provide these operations
// Note: This is currently built into the compiler as intrinsics
// This file documents the interface and provides helper functions

// Get the default system allocator
// This is a compiler intrinsic that returns the system's default allocator
get_default_allocator = () Allocator {
    // Built-in function provided by compiler
    return __builtin_get_default_allocator()
}

// Arena allocator - allocates from a fixed-size buffer
struct ArenaAllocator {
    buffer: [u8; 65536],  // 64KB buffer
    offset: i32
}

// Create a new arena allocator
new_arena = () ArenaAllocator {
    return ArenaAllocator {
        buffer: [0; 65536],
        offset: 0
    }
}

// Allocate memory from arena
arena_alloc = (arena: ArenaAllocator, size: i32) *void {
    arena.offset + size > 65536 ? {
        panic("Arena allocator out of memory")
    }
    
    ptr = &arena.buffer[arena.offset]
    arena.offset = arena.offset + size
    return ptr
}

// Free is a no-op for arena allocator (freed when arena is destroyed)
arena_free = (arena: ArenaAllocator, ptr: *void) void {
    // No-op - memory is freed when arena is destroyed
}

// Reset arena allocator to reuse memory
arena_reset = (arena: ArenaAllocator) void {
    arena.offset = 0
}

// Stack allocator - LIFO allocation pattern
struct StackAllocator {
    buffer: [u8; 32768],  // 32KB buffer
    offset: i32,
    last_alloc_size: i32
}

// Create a new stack allocator
new_stack = () StackAllocator {
    return StackAllocator {
        buffer: [0; 32768],
        offset: 0,
        last_alloc_size: 0
    }
}

// Allocate from stack
stack_alloc = (stack: StackAllocator, size: i32) *void {
    stack.offset + size > 32768 ? {
        panic("Stack allocator out of memory")
    }
    
    ptr = &stack.buffer[stack.offset]
    stack.last_alloc_size = size
    stack.offset = stack.offset + size
    return ptr
}

// Free from stack (only works for last allocation)
stack_free = (stack: StackAllocator, ptr: *void) void {
    // Can only free the last allocation
    expected_ptr = &stack.buffer[stack.offset - stack.last_alloc_size]
    ptr == expected_ptr ? {
        stack.offset = stack.offset - stack.last_alloc_size
        stack.last_alloc_size = 0
    } : {
        panic("Stack allocator: can only free last allocation")
    }
}