// Zen Standard Library - Clean Public API
// Single entry point with organized imports

// Core types
{ Option, Some, None } = import("core/option.zen")
{ Result, Ok, Err } = import("core/result.zen")

// Collections - all from collections/ directory  
{ Vec, DynVec } = import("vec.zen")
{ HashMap } = import("collections/hashmap.zen") 
{ Set } = import("collections/set.zen")
{ List } = import("collections/list.zen")
{ Queue } = import("collections/queue.zen")
{ Stack } = import("collections/stack.zen")

// Memory management
{ Allocator, malloc, free } = import("memory.zen")

// Concurrency
{ Actor, Task, Future } = import("concurrent/concurrency.zen")

// I/O
{ print, println } = import("io/io.zen")

// File system
{ read_file, write_file } = import("fs/fs.zen")

// Build system
{ build } = import("build.zen")

// Math
{ min, max, abs } = import("math.zen")

// Testing
{ test, assert } = import("testing/testing.zen")

// Export everything for @std access
module.exports = {
    // Core
    Option, Some, None,
    Result, Ok, Err,
    
    // Collections
    Vec, DynVec,
    HashMap, Set, List,
    Queue, Stack,
    
    // Memory & concurrency
    Allocator, malloc, free,
    Actor, Task, Future,
    
    // I/O & file system
    print, println,
    read_file, write_file,
    
    // Tools
    build, test, assert,
    min, max, abs,
}
