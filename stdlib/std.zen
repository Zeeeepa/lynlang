// Zen Standard Library Main Module
// This module re-exports the most commonly used standard library modules

// Core modules - essential functionality
{ core } = @std.core
{ io } = @std.io
{ mem } = @std.mem
{ math } = @std.math
{ string } = @std.string

// Collections
{ vec } = @std.vec
{ hashmap } = @std.hashmap
{ list } = @std.list
{ set } = @std.set
{ queue } = @std.queue
{ stack } = @std.stack

// File system and OS interaction
{ fs } = @std.fs
{ path } = @std.path
{ env } = @std.env
{ process } = @std.process
{ args } = @std.args

// Error handling and testing
{ result } = @std.result
{ option } = @std.option
{ error } = @std.error
{ testing } = @std.testing
{ assert } = @std.assert

// Algorithms and utilities
{ algorithm } = @std.algorithm
{ iterator } = @std.iterator
{ random } = @std.random
{ utils } = @std.utils

// Time and date
{ time } = @std.time
{ datetime } = @std.datetime

// Networking and concurrency (via allocators)
{ net } = @std.net
{ http } = @std.http
{ concurrency } = @std.concurrency  // Concurrency module (allocator-based)
{ thread } = @std.thread

// Encoding and serialization
{ json } = @std.json
{ encoding } = @std.encoding
{ url } = @std.url

// Advanced features
{ regex } = @std.regex
{ crypto } = @std.crypto
{ log } = @std.log

// Compiler modules (for self-hosting)
compiler := {
    lexer: @std.compiler.lexer,
    parser: @std.compiler.parser,
    type_checker: @std.compiler.type_checker,
    codegen: @std.compiler.codegen,
    symbol_table: @std.compiler.symbol_table,
    token: @std.compiler.token,
}

// Version information
VERSION := "0.1.0"
ZEN_VERSION := "1.0.0-alpha"

// Initialize the standard library
init = () void   {
    // Perform any necessary initialization
    // This could set up global state, configure the runtime, etc.
}

// Panic function for unrecoverable errors
panic = (message: RawPtr<i8>) void   {
    io.print("PANIC: ")
    io.println(message)
    process.exit(1)
}

// Debug print function (only in debug builds)
debug_print = (message: RawPtr<i8>) void {
    @comptime {
        DEBUG ?
            | true {
                io.print("[DEBUG] ")
                io.println(message)
            }
            | false {}
    }
}

// Standard prelude - commonly used items
prelude := {
    // Re-export commonly used types
    Result: result.Result,
    Option: option.Option,
    Vec: vec.Vec,
    HashMap: hashmap.HashMap,
    String: string.String,
    
    // Re-export commonly used functions
    print: io.print,
    println: io.println,
    assert: assert.assert,
    panic: panic,
    unwrap: result.unwrap,
    expect: result.expect,
}