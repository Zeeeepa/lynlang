// Zen Standard Library Main Module
// This module re-exports the most commonly used standard library modules

// Core modules - essential functionality
pub core := @std.core
pub io := @std.io
pub mem := @std.mem
pub math := @std.math
pub string := @std.string

// Collections
pub vec := @std.vec
pub hashmap := @std.hashmap
pub list := @std.list
pub set := @std.set
pub queue := @std.queue
pub stack := @std.stack

// File system and OS interaction
pub fs := @std.fs
pub path := @std.path
pub env := @std.env
pub process := @std.process
pub args := @std.args

// Error handling and testing
pub result := @std.result
pub option := @std.option
pub error := @std.error
pub testing := @std.testing
pub assert := @std.assert

// Algorithms and utilities
pub algorithm := @std.algorithm
pub iterator := @std.iterator
pub random := @std.random
pub utils := @std.utils

// Time and date
pub time := @std.time
pub datetime := @std.datetime

// Networking and concurrency (via allocators)
pub net := @std.net
pub http := @std.http
pub concurrency := @std.concurrency  // Concurrency module (allocator-based)
pub thread := @std.thread

// Encoding and serialization
pub json := @std.json
pub encoding := @std.encoding
pub url := @std.url

// Advanced features
pub regex := @std.regex
pub crypto := @std.crypto
pub log := @std.log

// Compiler modules (for self-hosting)
pub compiler := {
    lexer: @std.compiler.lexer,
    parser: @std.compiler.parser,
    type_checker: @std.compiler.type_checker,
    codegen: @std.compiler.codegen,
    symbol_table: @std.compiler.symbol_table,
    token: @std.compiler.token,
}

// Version information
VERSION := "0.1.0"
ZEN_VERSION := "1.0.0-alpha"

// Initialize the standard library
init: () void  = {
    // Perform any necessary initialization
    // This could set up global state, configure the runtime, etc.
}

// Panic function for unrecoverable errors
panic: (message: *i8) void  = {
    io.print("PANIC: ")
    io.println(message)
    process.exit(1)
}

// Debug print function (only in debug builds)
debug_print: (message: *i8) void  = {
    comptime {
        DEBUG ?
            | true => {
                io.print("[DEBUG] ")
                io.println(message)
            }
            | false => {}
    }
}

// Standard prelude - commonly used items
prelude := {
    // Re-export commonly used types
    Result: result.Result,
    Option: option.Option,
    Vec: vec.Vec,
    HashMap: hashmap.HashMap,
    String: string.String,
    
    // Re-export commonly used functions
    print: io.print,
    println: io.println,
    assert: assert.assert,
    panic: panic,
    unwrap: result.unwrap,
    expect: result.expect,
}