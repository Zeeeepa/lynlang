// Zen Standard Library Prelude
// Common types and functions automatically available in Zen programs
// This is what gets imported when you use `@std`

// Core types - no I/O dependencies
{ Option, Some, None } = import("core/option.zen")
{ Result, Ok, Err } = import("core/result.zen")

// Essential containers  
{ Vec, DynVec } = import("vec.zen")
{ List } = import("collections/list.zen")
{ HashMap } = import("collections/hashmap.zen")
{ Set } = import("collections/set.zen")

// Memory management
{ Allocator, GPA, ArenaAllocator } = import("allocator.zen")
{ Ptr, RawPtr, MutPtr, Ref } = import("memory.zen")

// Essential I/O
{ print, println, error, debug } = import("io.zen")

// String handling
{ String, StringBuilder } = import("string.zen")

// Fundamental math
{ min, max, abs, sqrt, pow } = import("math.zen")

// Error handling utilities
{ panic, assert, debug_assert } = import("assert.zen")

// Core iteration
{ Iterator, Range } = import("iterator.zen")

// Common utility functions
{ clone, copy, move, swap } = import("utils.zen")

// Re-export everything for easy access
module.exports = {
    // Core types
    Option: Option,
    Some: Some, 
    None: None,
    Result: Result,
    Ok: Ok,
    Err: Err,
    
    // Containers
    Vec: Vec,
    DynVec: DynVec,
    List: List,
    HashMap: HashMap,
    Set: Set,
    
    // Memory
    Allocator: Allocator,
    GPA: GPA,
    ArenaAllocator: ArenaAllocator,
    Ptr: Ptr,
    RawPtr: RawPtr,
    MutPtr: MutPtr,
    Ref: Ref,
    
    // I/O
    print: print,
    println: println,
    error: error,
    debug: debug,
    
    // String
    String: String,
    StringBuilder: StringBuilder,
    
    // Math
    min: min,
    max: max,
    abs: abs,
    sqrt: sqrt,
    pow: pow,
    
    // Error handling
    panic: panic,
    assert: assert,
    debug_assert: debug_assert,
    
    // Iteration
    Iterator: Iterator,
    Range: Range,
    
    // Utils
    clone: clone,
    copy: copy,
    move: move,
    swap: swap,
}
