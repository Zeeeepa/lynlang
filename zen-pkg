#!/bin/bash
# Zen Package Manager
# Simple package management for Zen projects

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
ZEN_HOME="${ZEN_HOME:-$HOME/.zen}"
ZEN_PACKAGES="$ZEN_HOME/packages"
ZEN_CACHE="$ZEN_HOME/cache"
MANIFEST_FILE="zen.toml"

# Ensure directories exist
mkdir -p "$ZEN_PACKAGES"
mkdir -p "$ZEN_CACHE"

# Print colored message
print_color() {
    local color=$1
    shift
    echo -e "${color}$@${NC}"
}

# Initialize a new Zen package
cmd_init() {
    if [ -f "$MANIFEST_FILE" ]; then
        print_color "$RED" "Error: $MANIFEST_FILE already exists"
        exit 1
    fi
    
    print_color "$CYAN" "Initializing new Zen package..."
    
    # Get package information
    read -p "Package name: " name
    read -p "Version [0.1.0]: " version
    version=${version:-0.1.0}
    read -p "Description: " description
    read -p "Author: " author
    read -p "License [MIT]: " license
    license=${license:-MIT}
    
    # Create manifest
    cat > "$MANIFEST_FILE" << EOF
[package]
name = "$name"
version = "$version"
description = "$description"
author = "$author"
license = "$license"
entry = "src/main.zen"

[dependencies]

[dev-dependencies]

[scripts]
build = "zen-compile src/main.zen -o build/$name"
test = "zen tests/test.zen"
run = "zen src/main.zen"
EOF
    
    # Create directory structure
    mkdir -p src tests docs build
    
    # Create main file
    cat > src/main.zen << EOF
// $name - $description
// Author: $author

core := @std.core
build := @std.build
io := build.import("io")

main = () i32 {
    io.println("Hello from $name!")
    return 0
}
EOF
    
    # Create test file
    cat > tests/test.zen << EOF
// Tests for $name

core := @std.core
build := @std.build
test := build.import("test")
io := build.import("io")

test_basic = () void {
    test.assert(true, "Basic test")
}

main = () i32 {
    io.println("Running tests for $name...")
    test_basic()
    io.println("All tests passed!")
    return 0
}
EOF
    
    # Create README
    cat > README.md << EOF
# $name

$description

## Installation

\`\`\`bash
zen-pkg install
\`\`\`

## Usage

\`\`\`bash
zen-pkg run
\`\`\`

## Development

\`\`\`bash
# Run tests
zen-pkg test

# Build project
zen-pkg build
\`\`\`

## License

$license
EOF
    
    # Create .gitignore
    cat > .gitignore << EOF
# Zen package files
zen_modules/
*.zen.lock
build/
dist/
*.o
*.so
*.a

# Editor files
.vscode/
.idea/
*.swp
*.swo
*~
EOF
    
    print_color "$GREEN" "✓ Package initialized successfully!"
    print_color "$GREEN" "  Name: $name"
    print_color "$GREEN" "  Version: $version"
    print_color "$GREEN" "  Entry: src/main.zen"
}

# Install dependencies
cmd_install() {
    if [ ! -f "$MANIFEST_FILE" ]; then
        print_color "$RED" "Error: No $MANIFEST_FILE found"
        exit 1
    fi
    
    print_color "$CYAN" "Installing dependencies..."
    
    # Create zen_modules directory
    mkdir -p zen_modules
    
    # For now, just copy stdlib modules
    if [ -d "$(dirname $0)/stdlib" ]; then
        cp -r "$(dirname $0)/stdlib" zen_modules/
        print_color "$GREEN" "✓ Standard library installed"
    fi
    
    # Create lock file
    touch zen.lock
    
    print_color "$GREEN" "✓ Dependencies installed"
}

# Run a script from manifest
cmd_run() {
    local script_name=${1:-run}
    
    if [ ! -f "$MANIFEST_FILE" ]; then
        print_color "$RED" "Error: No $MANIFEST_FILE found"
        exit 1
    fi
    
    # Extract script command from manifest
    local cmd=$(grep "^$script_name = " "$MANIFEST_FILE" | cut -d'"' -f2)
    
    if [ -z "$cmd" ]; then
        # If no script found, try to run main file
        if [ "$script_name" = "run" ] && [ -f "src/main.zen" ]; then
            cmd="zen src/main.zen"
        else
            print_color "$RED" "Error: Script '$script_name' not found"
            exit 1
        fi
    fi
    
    print_color "$CYAN" "Running: $cmd"
    eval "$cmd"
}

# Build the package
cmd_build() {
    if [ ! -f "$MANIFEST_FILE" ]; then
        print_color "$RED" "Error: No $MANIFEST_FILE found"
        exit 1
    fi
    
    # Extract package name
    local name=$(grep '^name = ' "$MANIFEST_FILE" | cut -d'"' -f2)
    local version=$(grep '^version = ' "$MANIFEST_FILE" | cut -d'"' -f2)
    
    print_color "$CYAN" "Building $name v$version..."
    
    # Create build directory
    mkdir -p build
    
    # Run build script if exists
    if grep -q '^build = ' "$MANIFEST_FILE"; then
        cmd_run build
    else
        # Default build
        if [ -f "src/main.zen" ]; then
            zen src/main.zen --emit-c --output "build/${name}.c"
            gcc -O2 -o "build/$name" "build/${name}.c" 2>/dev/null || true
        fi
    fi
    
    print_color "$GREEN" "✓ Build complete"
}

# Run tests
cmd_test() {
    if [ ! -f "$MANIFEST_FILE" ]; then
        print_color "$RED" "Error: No $MANIFEST_FILE found"
        exit 1
    fi
    
    print_color "$CYAN" "Running tests..."
    
    # Run test script if exists
    if grep -q '^test = ' "$MANIFEST_FILE"; then
        cmd_run test
    else
        # Default test runner
        if [ -d "tests" ]; then
            for test_file in tests/*.zen; do
                if [ -f "$test_file" ]; then
                    print_color "$CYAN" "Running: $test_file"
                    zen "$test_file"
                fi
            done
        else
            print_color "$YELLOW" "No tests found"
        fi
    fi
}

# Clean build artifacts
cmd_clean() {
    print_color "$CYAN" "Cleaning build artifacts..."
    rm -rf build dist *.o *.so *.a
    print_color "$GREEN" "✓ Clean complete"
}

# List installed packages
cmd_list() {
    print_color "$CYAN" "Installed packages:"
    if [ -d "zen_modules" ]; then
        ls -1 zen_modules/ 2>/dev/null | while read pkg; do
            echo "  - $pkg"
        done
    else
        print_color "$YELLOW" "No packages installed"
    fi
}

# Show help
cmd_help() {
    cat << EOF
Zen Package Manager

Usage: zen-pkg <command> [options]

Commands:
  init              Initialize a new package
  install           Install dependencies
  run [script]      Run a script (default: run)
  build             Build the package
  test              Run tests
  clean             Remove build artifacts
  list              List installed packages
  help              Show this help message

Examples:
  zen-pkg init      # Initialize new package
  zen-pkg install   # Install dependencies
  zen-pkg run       # Run the project
  zen-pkg build     # Build the project
  zen-pkg test      # Run tests

Environment:
  ZEN_HOME          Zen home directory (default: ~/.zen)
EOF
}

# Main command dispatcher
case "${1:-help}" in
    init)
        cmd_init
        ;;
    install|i)
        cmd_install
        ;;
    run|r)
        cmd_run "${2:-run}"
        ;;
    build|b)
        cmd_build
        ;;
    test|t)
        cmd_test
        ;;
    clean)
        cmd_clean
        ;;
    list|ls)
        cmd_list
        ;;
    help|h|--help|-h)
        cmd_help
        ;;
    *)
        print_color "$RED" "Unknown command: $1"
        cmd_help
        exit 1
        ;;
esac