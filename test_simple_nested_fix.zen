// Minimal test for nested Result fix
{ io, Result } = @std

main = () void {
    // Create inner Result with specific value
    inner_value = 999
    io.println("Creating Result.Ok(${inner_value})")
    inner = Result.Ok(inner_value)
    
    // Pattern match to verify inner is correct
    inner ? | Result.Ok(v) => io.println("Inner contains: ${v}")
           | Result.Err(e) => io.println("Inner error: ${e}")
    
    // Wrap in outer
    io.println("Wrapping inner in outer Result.Ok")
    outer = Result.Ok(inner)
    
    // Extract and check
    io.println("Extracting from outer...")
    outer ? | Result.Ok(extracted) => {
        io.println("Got extracted Result, checking it...")
        extracted ? | Result.Ok(val) => io.println("SUCCESS: extracted value = ${val}")
                   | Result.Err(e) => io.println("FAIL: inner error = ${e}")
    } | Result.Err(e) => {
        io.println("FAIL: outer error = ${e}")
    }
    
    io.println("\nExpected: SUCCESS: extracted value = 999")
}