// Comprehensive test of working Zen language features
// Based on LANGUAGE_SPEC.zen

{ io } = @std

// Enum definitions
MyOption: .Some | .None
Status: .Success | .Error | .Pending

main = () void {
    // ========== Basic Types ==========
    x = 42          // Immutable i32
    y ::= 100       // Mutable i64
    pi = 3.14159    // f64
    flag = true     // bool
    name = "Zen"    // string
    
    // ========== String Interpolation ==========
    greeting = "Hello, ${name}!"
    io.println(greeting)
    
    // ========== Enums ==========
    // Enum variant constructors now work!
    status1 = Status.Success
    status2 = Status.Error
    
    opt1 = MyOption.Some
    opt2 = MyOption.None
    
    // ========== Pattern Matching ==========
    
    // Boolean pattern - short form
    flag ? {
        io.println("Flag is true")
    }
    
    // Boolean pattern - full form
    ready = false
    ready ?
        | true { io.println("Ready!") }
        | false { io.println("Not ready") }
    
    // ========== Ranges and Loops ==========
    
    // Range with .loop() method (UFC works for ranges!)
    (0..5).loop((i) {
        io.println("Count")
    })
    
    // Inclusive range
    (1..=3).loop((n) {
        io.println("Number")
    })
    
    // ========== Mutable Variables ==========
    counter ::= 0
    counter = counter + 1
    counter = counter + 1
    
    // ========== Comparisons and Arithmetic ==========
    result = 10 + 20 * 3  // 70
    is_greater = result > 50  // true
    is_equal = 42 == 42  // true
    
    // ========== Defer ==========
    // @this.defer(io.println("Cleanup at end"))  // Not yet fully implemented
    
    io.println("Program finished successfully!")
}