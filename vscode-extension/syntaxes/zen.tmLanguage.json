{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Zen",
    "patterns": [
        { "include": "#comments" },
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#types" },
        { "include": "#functions" },
        { "include": "#operators" },
        { "include": "#punctuation" },
        { "include": "#imports" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.zen",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.zen",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.zen",
                    "match": "\\b(loop|return|break|continue)\\b"
                },
                {
                    "name": "keyword.other.zen",
                    "match": "\\b(defer|type|void)\\b"
                },
                {
                    "name": "constant.language.zen",
                    "match": "\\b(true|false|None|Some|Ok|Err)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.zen",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.zen",
                            "match": "\\\\."
                        },
                        {
                            "name": "meta.embedded.zen",
                            "begin": "\\$\\{",
                            "end": "\\}",
                            "patterns": [{ "include": "$self" }]
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.zen",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.zen",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.zen",
                    "match": "\\b[0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?\\b"
                },
                {
                    "name": "constant.numeric.integer.zen",
                    "match": "\\b(0x[0-9a-fA-F]+|0b[01]+|0o[0-7]+|[0-9]+)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type.primitive.zen",
                    "match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|bool|void|usize)\\b"
                },
                {
                    "name": "storage.type.zen",
                    "match": "\\b(String|Option|Result|Vec|DynVec|HashMap|HashSet|Array|Ptr|MutPtr|RawPtr)\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.zen",
                    "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*(?=\\s*=\\s*\\()"
                },
                {
                    "name": "meta.function.call.zen",
                    "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*(?=\\()",
                    "captures": {
                        "1": { "name": "entity.name.function.zen" }
                    }
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.zen",
                    "match": "(::=|:=|::)"
                },
                {
                    "name": "keyword.operator.assignment.immutable.zen",
                    "match": "(?<!:)=(?!=)"
                },
                {
                    "name": "keyword.operator.comparison.zen",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.arithmetic.zen",
                    "match": "(\\+|\\-|\\*|\\/|%)"
                },
                {
                    "name": "keyword.operator.logical.zen",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "name": "keyword.operator.zen",
                    "match": "(\\?|\\.|->|=>|\\||\\.\\.)"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.separator.zen",
                    "match": "[,;]"
                },
                {
                    "name": "punctuation.brackets.zen",
                    "match": "[\\[\\]\\(\\)\\{\\}]"
                }
            ]
        },
        "imports": {
            "patterns": [
                {
                    "name": "keyword.control.import.zen",
                    "match": "@(std|this|meta)\\b"
                },
                {
                    "name": "support.type.module.zen",
                    "match": "\\bmodule\\.(exports|import)\\b"
                }
            ]
        }
    },
    "scopeName": "source.zen"
}