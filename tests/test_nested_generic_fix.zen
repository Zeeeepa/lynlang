// Test to understand and fix nested generic payload issue
{ io, Result, Option } = @std

// Test inline creation of triple nested Results
test_triple_inline = () Result<Result<Result<i32, string>, string>, string> {
    // Create the innermost Result first
    inner = Result.Ok(999)
    
    // Wrap it in another Result
    middle = Result.Ok(inner)
    
    // Wrap that in the outermost Result
    outer = Result.Ok(middle)
    
    outer
}

// Test direct inline creation (all at once)
test_inline_direct = () Result<Result<Result<i32, string>, string>, string> {
    Result.Ok(Result.Ok(Result.Ok(777)))
}

// Test mixed nesting Result/Option
test_mixed_nesting = () Result<Option<Result<i32, string>>, string> {
    Result.Ok(Option.Some(Result.Ok(555)))
}

// Test with variables
test_with_vars = () Result<Result<i32, string>, string> {
    value = 123
    inner_result = Result.Ok(value)
    Result.Ok(inner_result)
}

main = () void {
    io.println("Testing nested generic payload fixes")
    
    // Test 1: Step by step creation
    io.println("\n1. Step-by-step triple nesting:")
    r1 = test_triple_inline()
    r1 ?
        | Result.Ok(level2) {
            level2 ?
                | Result.Ok(level3) {
                    level3 ?
                        | Result.Ok(v) {
                            io.println("  Got value: ${v}")
                            v == 999 ?
                                | true { io.println("  ✓ Step-by-step works!") }
                                | false { io.println("  ✗ Failed: got ${v} instead of 999") }
                        }
                        | Result.Err(e) { io.println("  Inner error: ${e}") }
                }
                | Result.Err(e) { io.println("  Middle error: ${e}") }
        }
        | Result.Err(e) { io.println("  Outer error: ${e}") }
    
    // Test 2: Direct inline creation
    io.println("\n2. Direct inline creation:")
    r2 = test_inline_direct()
    r2 ?
        | Result.Ok(level2) {
            level2 ?
                | Result.Ok(level3) {
                    level3 ?
                        | Result.Ok(v) {
                            io.println("  Got value: ${v}")
                            v == 777 ?
                                | true { io.println("  ✓ Direct inline works!") }
                                | false { io.println("  ✗ Failed: got ${v} instead of 777") }
                        }
                        | Result.Err(e) { io.println("  Inner error: ${e}") }
                }
                | Result.Err(e) { io.println("  Middle error: ${e}") }
        }
        | Result.Err(e) { io.println("  Outer error: ${e}") }
    
    // Test 3: Mixed nesting
    io.println("\n3. Mixed Result/Option nesting:")
    r3 = test_mixed_nesting()
    r3 ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(inner_res) {
                    inner_res ?
                        | Result.Ok(v) {
                            io.println("  Got value: ${v}")
                            v == 555 ?
                                | true { io.println("  ✓ Mixed nesting works!") }
                                | false { io.println("  ✗ Failed: got ${v} instead of 555") }
                        }
                        | Result.Err(e) { io.println("  Inner error: ${e}") }
                }
                | Option.None { io.println("  Got None") }
        }
        | Result.Err(e) { io.println("  Outer error: ${e}") }
    
    // Test 4: With variables
    io.println("\n4. With variables:")
    r4 = test_with_vars()
    r4 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) {
                    io.println("  Got value: ${v}")
                    v == 123 ?
                        | true { io.println("  ✓ With variables works!") }
                        | false { io.println("  ✗ Failed: got ${v} instead of 123") }
                }
                | Result.Err(e) { io.println("  Inner error: ${e}") }
        }
        | Result.Err(e) { io.println("  Outer error: ${e}") }
    
    io.println("\n✓ All nested generic tests completed!")
}