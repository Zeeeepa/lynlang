// Test nested generics returned from functions
{ io } = @std
{ Result, Option } = @std

// Function that returns Result<Result<i32, string>, string>
get_nested_result = () Result<Result<i32, string>, string> {
    inner = Result.Ok(100)
    return Result.Ok(inner)
}

// Function that returns Result<Result<i32, string>, string> with inner error
get_nested_result_inner_err = () Result<Result<i32, string>, string> {
    inner = Result.Err("inner function error")
    return Result.Ok(inner)
}

// Function that returns Option<Result<i32, string>>
get_option_result = () Option<Result<i32, string>> {
    inner = Result.Ok(200)
    return Option.Some(inner)
}

// Function that returns Result<Option<i32>, string>
get_result_option = () Result<Option<i32>, string> {
    inner = Option.Some(300)
    return Result.Ok(inner)
}

main = () void {
    // Test 1: Function returning nested Result<Result<T,E>,E2>
    io.println("Test 1: Function returning nested Result")
    
    result = get_nested_result()
    result ?
        | Result.Ok(inner_result) {
            inner_result ?
                | Result.Ok(value) {
                    io.println("Value from function: ${value}")  // Should print 100
                }
                | Result.Err(err) {
                    io.println("Inner error: ${err}")
                }
        }
        | Result.Err(err) {
            io.println("Outer error: ${err}")
        }
    
    // Test 2: Function returning nested Result with inner error
    io.println("Test 2: Function with inner error")
    
    result2 = get_nested_result_inner_err()
    result2 ?
        | Result.Ok(inner_result) {
            inner_result ?
                | Result.Ok(value) {
                    io.println("Value from function: ${value}")
                }
                | Result.Err(err) {
                    io.println("Inner error: ${err}")  // Should print "inner function error"
                }
        }
        | Result.Err(err) {
            io.println("Outer error: ${err}")
        }
    
    // Test 3: Function returning Option<Result<T,E>>
    io.println("Test 3: Function returning Option<Result>")
    
    opt_result = get_option_result()
    opt_result ?
        | Option.Some(inner_result) {
            inner_result ?
                | Result.Ok(value) {
                    io.println("Value from function: ${value}")  // Should print 200
                }
                | Result.Err(err) {
                    io.println("Inner error: ${err}")
                }
        }
        | Option.None {
            io.println("Option is None")
        }
    
    // Test 4: Function returning Result<Option<T>,E>
    io.println("Test 4: Function returning Result<Option>")
    
    res_option = get_result_option()
    res_option ?
        | Result.Ok(inner_option) {
            inner_option ?
                | Option.Some(value) {
                    io.println("Value from function: ${value}")  // Should print 300
                }
                | Option.None {
                    io.println("Option is None")
                }
        }
        | Result.Err(err) {
            io.println("Outer error: ${err}")
        }
}