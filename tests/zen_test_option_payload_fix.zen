// Test that Option<T> payload extraction now works correctly
// The payload should preserve its type and be accessible

{ io } = @std

Option<T>: Some(T) | None

main = () void {
    // Test with i32
    maybe_int: Option<i32> = Some(42)
    maybe_int ?
        | Some(v) { 
            io.println("Option<i32> works! Value: ${v}")
        }
        | None { 
            io.println("Was None") 
        }
    
    // Test with string
    maybe_string: Option<string> = Some("Hello Zen!")
    maybe_string ?
        | Some(s) {
            io.println("Option<string> works! Value: ${s}")
        }
        | None {
            io.println("Was None")
        }
    
    // Test with None
    nothing: Option<i32> = None
    nothing ?
        | Some(v) { 
            io.println("Had value: ${v}")
        }
        | None { 
            io.println("Option None works correctly!")
        }
    
    io.println("All Option tests passed!")
}