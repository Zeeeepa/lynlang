// Comprehensive test suite for Zen language features
// Based on LANGUAGE_SPEC.zen
{ io } = @std

// Test data structures
Point: {
    x:: f64,
    y:: f64
}

Color: Red | Green | Blue

Option<T>: Some(T) | None

main = () void {
    io.println("=== Zen Language Test Suite ===")
    passed ::= 0
    failed ::= 0
    
    // Test 1: Variable declarations
    io.print("Test 1 - Variable Declarations: ")
    x: i32
    x = 42
    y = 100
    z ::= 200
    z = 300
    (x == 42 && y == 100 && z == 300) ?
        | true { io.println("PASSED") passed = passed + 1 }
        | false { io.println("FAILED") failed = failed + 1 }
    
    // Test 2: String interpolation
    io.print("Test 2 - String Interpolation: ")
    name = "Zen"
    result = "Hello ${name}"
    (result == "Hello Zen") ?
        | true { io.println("PASSED") passed = passed + 1 }
        | false { io.println("FAILED") failed = failed + 1 }
    
    // Test 3: Arithmetic
    io.print("Test 3 - Arithmetic: ")
    a = 10 + 5 * 2
    b = (10 + 5) * 2
    (a == 20 && b == 30) ?
        | true { io.println("PASSED") passed = passed + 1 }
        | false { io.println("FAILED") failed = failed + 1 }
    
    // Test 4: Structs
    io.print("Test 4 - Structs: ")
    p = Point { x: 10.0, y: 20.0 }
    p.x = 15.0
    (p.x == 15.0 && p.y == 20.0) ?
        | true { io.println("PASSED") passed = passed + 1 }
        | false { io.println("FAILED") failed = failed + 1 }
    
    // Test 5: Functions
    io.print("Test 5 - Functions: ")
    sum = 3 + 4  // Simple test for now
    (sum == 7) ?
        | true { io.println("PASSED") passed = passed + 1 }
        | false { io.println("FAILED") failed = failed + 1 }
    
    // Test 6: Range loops
    io.print("Test 6 - Range Loops: ")
    count ::= 0
    (0..5).loop((i) {
        count = count + 1
    })
    (count == 5) ?
        | true { io.println("PASSED") passed = passed + 1 }
        | false { io.println("FAILED") failed = failed + 1 }
    
    // Test 7: Infinite loop with break
    io.print("Test 7 - Loop with Break: ")
    counter ::= 0
    loop(() {
        counter = counter + 1
        (counter >= 3) ? { break }
    })
    (counter == 3) ?
        | true { io.println("PASSED") passed = passed + 1 }
        | false { io.println("FAILED") failed = failed + 1 }
    
    // Test 8: Simple enums
    io.print("Test 8 - Simple Enums: ")
    color = Color.Red
    color ?
        | Red { io.println("PASSED") passed = passed + 1 }
        | Green { io.println("FAILED") failed = failed + 1 }
        | Blue { io.println("FAILED") failed = failed + 1 }
    
    // Test 9: Arrays (simplified for now)
    io.print("Test 9 - Arrays: ")
    // TODO: Array indexing needs work
    io.println("SKIPPED") 
    
    // Test 10: Option type (simplified)
    io.print("Test 10 - Option Type: ")
    opt: Option<i32> = Option.Some(42)
    opt ?
        | Some(val) { io.println("PASSED") passed = passed + 1 }
        | None { io.println("FAILED - was None") failed = failed + 1 }
    
    // Summary
    io.println("\n=== Test Summary ===")
    io.println("Passed: ${passed}/10")
    io.println("Failed: ${failed}/10")
    
    total = passed + failed
    all_passed = (total == 10) && (failed == 0)
    all_passed ?
        | true { io.println("\nAll tests PASSED! âœ“") }
        | false { io.println("\nSome tests failed.") }
}