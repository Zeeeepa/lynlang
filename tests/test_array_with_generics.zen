// Test Array with nested generic types
{ io, Option, Array , get_default_allocator} = @std

main = () void {
    alloc = get_default_allocator()
    io.println("Testing Array with Option<i32>")
    
    // First test: Can we create the array?
    arr = Array<Option<i32>>()
    io.println("Created array")
    
    // Test: Can we push to it?
    opt1 = Option.Some(100)
    arr.push(opt1)
    io.println("Pushed Some(100)")
    
    opt2 = Option.None
    arr.push(opt2)
    io.println("Pushed None")
    
    // Test: Can we get from it?
    val0 = arr.get(0)
    val0 ?
        | Option.Some(v) {
            io.println("arr[0] = Some(${v})")
        }
        | Option.None {
            io.println("arr[0] = None")
        }
    
    val1 = arr.get(1)
    val1 ?
        | Option.Some(v) {
            io.println("arr[1] = Some(${v})")
        }
        | Option.None {
            io.println("arr[1] = None")
        }
    
    io.println("Test complete")
}