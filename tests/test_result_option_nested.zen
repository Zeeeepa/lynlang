// Test Result<Option<i32>, StaticString> nesting
{ io, Result, Option , get_default_allocator} = @std

main = () void {
    alloc = get_default_allocator()
    io.println("=== Testing Result<Option<i32>, StaticString> ===")
    
    // Test Result.Ok with Option.Some
    result1 = Result.Ok(Option.Some(42))
    io.println("Created Result.Ok(Option.Some(42))")
    
    result1 ?
        | Result.Ok(opt) {
            io.println("Extracted Ok with Option")
            opt ?
                | Option.Some(val) {
                    io.println("Value: ${val}")
                    val == 42 ?
                        | true { io.println("✓ Result<Option<i32>, StaticString> works!") }
                        | false { io.println("✗ Wrong value: ${val}") }
                }
                | Option.None { io.println("✗ Got None but expected Some") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test Result.Ok with Option.None
    result2 = Result.Ok(Option.None)
    io.println("\nCreated Result.Ok(Option.None)")
    
    result2 ?
        | Result.Ok(opt) {
            io.println("Extracted Ok with Option")
            opt ?
                | Option.Some(val) { io.println("✗ Got Some(${val}) but expected None") }
                | Option.None { io.println("✓ Result<Option<_>, StaticString> with None works!") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test Result.Err
    result3 = Result.Err("test error")
    io.println("\nCreated Result.Err(\"test error\")")
    
    result3 ?
        | Result.Ok(opt) { io.println("✗ Got Ok but expected Err") }
        | Result.Err(e) { 
            io.println("Error: ${e}")
            e == "test error" ?
                | true { io.println("✓ Result.Err works!") }
                | false { io.println("✗ Wrong error: ${e}") }
        }
}
