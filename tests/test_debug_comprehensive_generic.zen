// Debug individual cases from comprehensive generic test
{ io, Result, Option } = @std

main = () i32 {
    io.println("=== Debugging Comprehensive Generic Issues ===")
    
    // Test 2: Nested Generic Types - Test each case individually
    
    // Case 1: Result<Option<i32>, string>
    io.println("\n--- Case 1: Result<Option<i32>, string> ---")
    nested1 = Result.Ok(Option.Some(100))
    nested1 ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(v) { io.println("Value: ${v} (expected 100)") }
                | Option.None { io.println("Got None") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Case 2: Option<Result<string, i32>>
    io.println("\n--- Case 2: Option<Result<string, i32>> ---")
    nested2 = Option.Some(Result.Ok("nested"))
    nested2 ?
        | Option.Some(res) {
            res ?
                | Result.Ok(v) { io.println("Value: ${v} (expected 'nested')") }
                | Result.Err(e) { io.println("Inner error: ${e}") }
        }
        | Option.None { io.println("None") }
    
    // Case 3: Result<Result<i32, string>, string>
    io.println("\n--- Case 3: Result<Result<i32, string>, string> ---")
    nested3 = Result.Ok(Result.Ok(42))
    nested3 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) { io.println("Value: ${v} (expected 42)") }
                | Result.Err(e) { io.println("Inner error: ${e}") }
        }
        | Result.Err(e) { io.println("Outer error: ${e}") }
    
    // Test 5: Complex Nested Generics - Triple nested
    io.println("\n--- Case 4: Triple nested Option<Result<Option<i32>, string>> ---")
    deep = Option.Some(Result.Ok(Option.Some(999)))
    deep ?
        | Option.Some(res) {
            res ?
                | Result.Ok(opt) {
                    opt ?
                        | Option.Some(v) { io.println("Triple nested value: ${v} (expected 999)") }
                        | Option.None { io.println("Inner None") }
                }
                | Result.Err(e) { io.println("Middle error: ${e}") }
        }
        | Option.None { io.println("Outer None") }
    
    // Test 6: Type Inference - function returns
    io.println("\n--- Case 5: Function returning Result<i32, string> ---")
    make_result = (success: bool) Result<i32, string> {
        success ?
            | true { Result.Ok(42) }
            | false { Result.Err("failed") }
    }
    
    res5 = make_result(true)
    res5 ?
        | Result.Ok(v) { io.println("Function result value: ${v} (expected 42)") }
        | Result.Err(e) { io.println("Function result error: ${e}") }
    
    // Test 7: Integer payload issue
    io.println("\n--- Case 6: Large integer payload ---")
    int_result = Result.Ok(314159)
    int_result ?
        | Result.Ok(i) { io.println("Integer payload: ${i} (expected 314159)") }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    0
}