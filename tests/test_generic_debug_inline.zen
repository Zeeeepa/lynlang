// Debug inline nested generic issue
{ io, Result } = @std

main = () void {
    io.println("Debug inline vs variable nested generics")
    
    // Test 1: Fully inline
    io.println("\n1. Fully inline: Result.Ok(Result.Ok(42))")
    r1 = Result.Ok(Result.Ok(42))
    r1 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) { io.println("  Value: ${v}") }
                | Result.Err(e) { io.println("  Error") }
        }
        | Result.Err(e) { io.println("  Outer error") }
    
    // Test 2: Inner as variable
    io.println("\n2. Inner as variable:")
    inner2 = Result.Ok(43)
    r2 = Result.Ok(inner2)
    r2 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) { io.println("  Value: ${v}") }
                | Result.Err(e) { io.println("  Error") }
        }
        | Result.Err(e) { io.println("  Outer error") }
    
    // Test 3: Value as variable
    io.println("\n3. Value as variable:")
    val3 = 44
    r3 = Result.Ok(Result.Ok(val3))
    r3 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) { io.println("  Value: ${v}") }
                | Result.Err(e) { io.println("  Error") }
        }
        | Result.Err(e) { io.println("  Outer error") }
    
    // Test 4: Everything as variables
    io.println("\n4. Everything as variables:")
    val4 = 45
    inner4 = Result.Ok(val4)
    r4 = Result.Ok(inner4)
    r4 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) { io.println("  Value: ${v}") }
                | Result.Err(e) { io.println("  Error") }
        }
        | Result.Err(e) { io.println("  Outer error") }
    
    // Test 5: Inline with explicit number
    io.println("\n5. Inline with (46):")
    r5 = Result.Ok(Result.Ok((46)))
    r5 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) { io.println("  Value: ${v}") }
                | Result.Err(e) { io.println("  Error") }
        }
        | Result.Err(e) { io.println("  Outer error") }
}