// Final demonstration of working Zen language features from LANGUAGE_SPEC.zen
{ io, math } = @std

// Core types from spec
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

// Structs
Point: {
    x:: f64,
    y:: f64
}

Circle: {
    center: Point,
    radius: f64,
}

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

// Trait definition
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Trait implementations
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// Enum type with trait requirement
Shape: Circle | Rectangle
Shape.requires(Geometric)

main = () i32 {
    io.println("=== ZEN LANGUAGE FEATURES DEMO ===")
    io.println("")
    
    // 1. Variable Declarations (all 6 forms)
    io.println("1. Variables:")
    num1: i32
    num1 = 10
    num2 = 20
    num3: i32 = 30
    mut1:: i32
    mut1 = 40
    mut2 ::= 50
    mut3:: i32 = 60
    
    io.println("  Immutable: ${num1}, ${num2}, ${num3}")
    io.println("  Mutable: ${mut1}, ${mut2}, ${mut3}")
    
    // Mutation demo
    mut1 = 100
    mut2 = 200
    mut3 = 300
    io.println("  After mutation: ${mut1}, ${mut2}, ${mut3}")
    io.println("")
    
    // 2. Pattern Matching with ?
    io.println("2. Pattern Matching:")
    
    ready = true
    ready ? {
        io.println("  System ready!")
    }
    
    value = 42
    value > 40 ?
        | true { io.println("  Value is large: ${value}") }
        | false { io.println("  Value is small: ${value}") }
    io.println("")
    
    // 3. Option Type
    io.println("3. Option Type:")
    maybe: Option<i32> = Some(100)
    maybe ?
        | Some(n) { io.println("  Got value: ${n}") }
        | None { io.println("  No value") }
    io.println("")
    
    // 4. Result Type  
    io.println("4. Result Type:")
    success: Result<i32, string> = Ok(42)
    success ?
        | Ok(v) { io.println("  Success: ${v}") }
        | Err(e) { io.println("  Error: ${e}") }
    
    failure: Result<i32, string> = Err("Something went wrong")
    failure ?
        | Ok(v) { io.println("  Success: ${v}") }
        | Err(e) { io.println("  Error: ${e}") }
    io.println("")
    
    // 5. Structs and Traits
    io.println("5. Traits:")
    
    circ = Circle {
        center: Point { x: 0, y: 0 },
        radius: 5
    }
    io.println("  Circle:")
    io.println("    Area: ${circ.area()}")
    io.println("    Perimeter: ${circ.perimeter()}")
    
    rect = Rectangle {
        top_left: Point { x: 0, y: 0 },
        bottom_right: Point { x: 10, y: 5 }
    }
    io.println("  Rectangle:")
    io.println("    Area: ${rect.area()}")
    io.println("    Perimeter: ${rect.perimeter()}")
    io.println("")
    
    // 6. Ranges and Loops
    io.println("6. Loops and Ranges:")
    
    io.println("  Range loop (0..3):")
    (0..3).loop((i) {
        io.println("    ${i}")
    })
    
    io.println("  Loop with break:")
    cnt ::= 0
    loop(() {
        cnt = cnt + 1
        io.println("    Loop ${cnt}")
        cnt >= 3 ? { break }
    })
    io.println("")
    
    // 7. Pointers
    io.println("7. Pointers:")
    
    obj = Circle { center: Point { x: 10, y: 10 }, radius: 15 }
    ptr: Ptr<Circle> = obj.ref()
    mut_ptr: MutPtr<Circle> = obj.mut_ref()
    
    io.println("  Area via ptr: ${ptr.val.area()}")
    mut_ptr.val.radius = 20
    io.println("  After mutation: ${mut_ptr.val.area()}")
    io.println("  Address: ${ptr.addr}")
    io.println("")
    
    // 8. String Interpolation
    io.println("8. String Interpolation:")
    lang = "Zen"
    year = 2025
    io.println("  Welcome to ${lang} in ${year}!")
    io.println("")
    
    io.println("=== ALL FEATURES WORKING ===")
    return 0
}