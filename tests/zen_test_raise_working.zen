// Test that .raise() error propagation works
{ io } = @std

// Define Result type
Result<T, E>: Ok(T) | Err(E)

// Function that might fail
parse_number = (s: string) Result<i32, string> {
    // Simple check - if string is "42" return Ok, else Err
    // In real implementation, would parse the string
    return Result.Ok(42)  // For now, always succeed for testing
}

// Function that uses .raise() to propagate errors
process = () Result<i32, string> {
    io.println("About to call parse_number...")
    
    // This should unwrap Ok value or propagate Err
    num = parse_number("42").raise()
    
    io.println("Successfully got number")
    
    return Result.Ok(num * 2)
}

main = () void {
    io.println("Testing .raise() error propagation")
    
    result = process()
    
    result ?
        | Ok(val) { 
            io.print("Success! Value: ")
            io.print_int(val)
            io.println("")
        }
        | Err(msg) {
            io.println("Error: ${msg}")
        }
}