// Test string.starts_with() and string.ends_with() methods
{ get_default_allocator } = @std

main = () i32 {
    alloc = get_default_allocator()
    text = "Hello, World!"
    
    // Test starts_with
    text.starts_with("Hello") ?
        | true { io.println("Test 1 passed: starts_with('Hello')") }
        | false { io.println("Test 1 FAILED: Should start with 'Hello'"); return 1 }
    
    text.starts_with("World") ?
        | true { io.println("Test 2 FAILED: Should not start with 'World'"); return 1 }
        | false { io.println("Test 2 passed: Correctly doesn't start with 'World'") }
    
    text.starts_with("") ?
        | true { io.println("Test 3 passed: Empty prefix always matches") }
        | false { io.println("Test 3 FAILED: Empty prefix should match"); return 1 }
    
    text.starts_with("Hello, World!") ?
        | true { io.println("Test 4 passed: Full string matches itself") }
        | false { io.println("Test 4 FAILED: Full string should match"); return 1 }
    
    text.starts_with("H") ?
        | true { io.println("Test 5 passed: Single character 'H'") }
        | false { io.println("Test 5 FAILED: Should start with 'H'"); return 1 }
    
    // Test ends_with
    text.ends_with("World!") ?
        | true { io.println("Test 6 passed: ends_with('World!')") }
        | false { io.println("Test 6 FAILED: Should end with 'World!'"); return 1 }
    
    text.ends_with("Hello") ?
        | true { io.println("Test 7 FAILED: Should not end with 'Hello'"); return 1 }
        | false { io.println("Test 7 passed: Correctly doesn't end with 'Hello'") }
    
    text.ends_with("") ?
        | true { io.println("Test 8 passed: Empty suffix always matches") }
        | false { io.println("Test 8 FAILED: Empty suffix should match"); return 1 }
    
    text.ends_with("!") ?
        | true { io.println("Test 9 passed: Single character '!'") }
        | false { io.println("Test 9 FAILED: Should end with '!'"); return 1 }
    
    text.ends_with("Hello, World!") ?
        | true { io.println("Test 10 passed: Full string matches itself") }
        | false { io.println("Test 10 FAILED: Full string should match"); return 1 }
    
    // Test with variables
    prefix = "Hello"
    suffix = "World!"
    
    text.starts_with(prefix) ?
        | true { io.println("Test 11 passed: Variable prefix") }
        | false { io.println("Test 11 FAILED: Should match variable prefix"); return 1 }
    
    text.ends_with(suffix) ?
        | true { io.println("Test 12 passed: Variable suffix") }
        | false { io.println("Test 12 FAILED: Should match variable suffix"); return 1 }
    
    // Edge case - suffix longer than string
    short = "Hi"
    short.ends_with("Hello") ?
        | true { io.println("Test 13 FAILED: Suffix longer than string"); return 1 }
        | false { io.println("Test 13 passed: Correctly rejects longer suffix") }
    
    io.println("All starts_with/ends_with tests passed!")
    return 0
}