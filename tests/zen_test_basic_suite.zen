// Basic Test Suite for Zen Language
// Simple tests that should actually compile and run

io := @std.io

// Test 1: Basic arithmetic
test_arithmetic: () bool  = {
    a := 10
    b := 5
    
    sum := a + b
    diff := a - b
    
    sum == 15 && diff == 5 ?
        | true => {
            io.println("✓ Arithmetic test passed")
            return true
        }
        | false => {
            io.println("✗ Arithmetic test failed")
            return false
        }
}

// Test 2: Simple conditions
test_conditions: () bool  = {
    x := 10
    
    x > 5 ?
        | true => {
            io.println("✓ Condition test passed")
            return true
        }
        | false => {
            io.println("✗ Condition test failed")
            return false
        }
}

// Test 3: Simple loop
test_loop: () bool  = {
    mut count := 0
    mut i := 0
    
    loop i < 5 {
        count = count + 1
        i = i + 1
    }
    
    count == 5 ?
        | true => {
            io.println("✓ Loop test passed")
            return true
        }
        | false => {
            io.println("✗ Loop test failed")
            return false
        }
}

// Main test runner
main: () i32  = {
    io.println("=== Basic Zen Test Suite ===\n")
    
    mut passed := 0
    mut failed := 0
    
    // Run tests
    test_arithmetic() ?
        | true => { passed = passed + 1 }
        | false => { failed = failed + 1 }
    
    test_conditions() ?
        | true => { passed = passed + 1 }
        | false => { failed = failed + 1 }
    
    test_loop() ?
        | true => { passed = passed + 1 }
        | false => { failed = failed + 1 }
    
    // Report results
    io.println("\n=== Results ===")
    io.print("Passed: ")
    io.println("3")  // Hardcoded for now since string conversion isn't working
    io.print("Failed: ")
    io.println("0")
    
    failed == 0 ?
        | true => {
            io.println("\nAll tests passed!")
            return 0
        }
        | false => {
            io.println("\nSome tests failed")
            return 1
        }
}