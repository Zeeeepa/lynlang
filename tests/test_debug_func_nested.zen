// Debug test for nested generics returned from functions
{ io, Result, Option } = @std

// Function that returns Result<Result<i32, string>, string>
get_nested_result = () Result<Result<i32, string>, string> {
    // Try different ways of creating the nested result
    
    // Method 1: Create inner first
    inner = Result.Ok(42)
    Result.Ok(inner)
}

// Function that returns Result<Option<i32>, string>
get_result_option = () Result<Option<i32>, string> {
    // Create Option first
    opt = Option.Some(77)
    Result.Ok(opt)
}

// Direct inline construction
get_inline_nested = () Result<Result<i32, string>, string> {
    Result.Ok(Result.Ok(88))
}

main = () void {
    io.println("Testing nested generics from functions")
    
    // Test method 1
    io.println("\nMethod 1 - inner first:")
    r1 = get_nested_result()
    r1 ?
        | Result.Ok(inner) {
            io.println("Got outer Ok")
            inner ?
                | Result.Ok(v) { 
                    io.println("Inner value: ${v}")
                    v == 42 ?
                        | true { io.println("✓ Correct!") }
                        | false { io.println("✗ Wrong value: ${v}") }
                }
                | Result.Err(e) { io.println("Inner error: ${e}") }
        }
        | Result.Err(e) { io.println("Outer error: ${e}") }
    
    // Test Result<Option<i32>, string>
    io.println("\nResult<Option<i32>, string>:")
    r2 = get_result_option()
    r2 ?
        | Result.Ok(opt) {
            io.println("Got Result.Ok")
            opt ?
                | Option.Some(v) { 
                    io.println("Option value: ${v}")
                    v == 77 ?
                        | true { io.println("✓ Correct!") }
                        | false { io.println("✗ Wrong value: ${v}") }
                }
                | Option.None { io.println("Got None") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test inline construction
    io.println("\nInline construction:")
    r3 = get_inline_nested()
    r3 ?
        | Result.Ok(inner) {
            io.println("Got outer Ok")
            inner ?
                | Result.Ok(v) { 
                    io.println("Inner value: ${v}")
                    v == 88 ?
                        | true { io.println("✓ Correct!") }
                        | false { io.println("✗ Wrong value: ${v}") }
                }
                | Result.Err(e) { io.println("Inner error: ${e}") }
        }
        | Result.Err(e) { io.println("Outer error: ${e}") }
}