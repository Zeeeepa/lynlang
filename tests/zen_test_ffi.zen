// Test FFI Builder Pattern
// Following Language Spec v1.1.0

// Import FFI module
ffi := @std.ffi

// Test building a library configuration
test_ffi_builder: () void  = {
    // Create sqlite3 library configuration using builder pattern
    sqlite := ffi.FFI.lib("sqlite3")
        .set_path("/usr/lib/libsqlite3.so")
        .add_function("sqlite3_open", ffi.FnSignature{
            params: ffi.Vec:new(),  // Would add string and ptr params
            returns: ffi.type_i32(),
        })
        .add_function("sqlite3_close", ffi.FnSignature{
            params: ffi.Vec:new(),  // Would add ptr param
            returns: ffi.type_i32(),
        })
        .add_constant("SQLITE_OK", ffi.type_i32())
        .build_library()
    
    // Note: This just tests the builder pattern, 
    // actual FFI calls would require library loading
}

main: () void  = {
    test_ffi_builder()
    // If we get here without crashing, the FFI builder works
    io := @std.io
    io.print("FFI builder pattern test passed!\n")
}