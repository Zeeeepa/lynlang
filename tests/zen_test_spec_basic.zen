// Test: Basic Zen Language Features from LANGUAGE_SPEC.zen
// This test covers core language features including:
// - Variable declarations (immutable/mutable)  
// - Pattern matching with ?
// - No keywords philosophy

{ io } = @std

main = () void {
    io.println("=== Testing Basic Variable Declarations ===")
    
    // Immutable declarations
    x: i32  // forward declaration
    x = 10
    io.println("Forward declared x: ${x}")
    
    y = 20  // Immutable assignment with inference
    io.println("Inferred y: ${y}")
    
    z: i32 = 30  // Immutable with type
    io.println("Typed z: ${z}")
    
    // Mutable declarations
    w:: i32  // mutable forward declaration
    w = 40
    io.println("Mutable forward w: ${w}")
    w = 50  // Can reassign
    io.println("Reassigned w: ${w}")
    
    v ::= 60  // Mutable with inference
    io.println("Mutable inferred v: ${v}")
    v = 70
    io.println("Reassigned v: ${v}")
    
    u:: i32 = 80  // mutable with type
    io.println("Mutable typed u: ${u}")
    u = 90
    io.println("Reassigned u: ${u}")
    
    io.println("\n=== Testing Boolean Pattern Matching ===")
    
    // Simple boolean pattern
    is_ready = true
    is_ready ? {
        io.println("System is ready!")
    }
    
    // Full boolean pattern match  
    has_data = false
    has_data ?
        | true { io.println("Processing data...") }
        | false { io.println("Waiting for data...") }
    
    io.println("\n=== Testing String Interpolation ===")
    
    name = "Zen"
    version = 1
    io.println("Welcome to ${name} v${version}!")
    
    // Expression interpolation
    a = 5
    b = 3
    io.println("${a} + ${b} = ${a + b}")
    io.println("${a} * ${b} = ${a * b}")
    
    io.println("\n=== Testing Loops ===")
    
    // Range loop
    io.println("Counting 0 to 4:")
    (0..5).loop((i) {
        io.println("  ${i}")
    })
    
    // Infinite loop with break
    io.println("Loop with break:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { break }
            | false { io.println("  Counter: ${counter}") }
    })
    
    io.println("\n=== Test Complete ===")
}