// Test .raise() with stdlib Result type

{ io } = @std
{ Result } = @std

// Test using the standard library Result type
test_stdlib_result = (value: i32) Result<i32, string> {
    value < 0 ?
        | true { Err("negative value not allowed") }
        | false { Ok(value) }
}

// Function using .raise() with stdlib Result
process_positive = (input: i32) Result<i32, string> {
    // This should use .raise() with the stdlib Result type
    validated = test_stdlib_result(input).raise()
    processed = validated * 2
    return Ok(processed)
}

// Chained operations with stdlib Result and .raise()
complex_stdlib_chain = (a: i32, b: i32) Result<i32, string> {
    val_a = test_stdlib_result(a).raise()
    val_b = test_stdlib_result(b).raise()
    sum = val_a + val_b
    
    // Additional validation
    result = sum > 100 ?
        | true { Err("sum too large") }
        | false { Ok(sum) }
    
    return result
}

main = () void {
    io.println("Testing .raise() with stdlib Result type...")
    
    // Test 1: Success case
    result1 = process_positive(5)
    result1 ?
        | Ok(val) { io.println("Success: ${val}") }
        | Err(msg) { io.println("Unexpected error: ${msg}") }
    
    // Test 2: Error propagation
    result2 = process_positive(-3)
    result2 ?
        | Ok(val) { io.println("Unexpected success: ${val}") }
        | Err(msg) { io.println("Error propagated: ${msg}") }
    
    // Test 3: Chained operations success
    result3 = complex_stdlib_chain(10, 20)
    result3 ?
        | Ok(val) { io.println("Chain success: ${val}") }
        | Err(msg) { io.println("Chain error: ${msg}") }
    
    // Test 4: Error in first operation
    result4 = complex_stdlib_chain(-5, 20)
    result4 ?
        | Ok(val) { io.println("Unexpected chain success: ${val}") }
        | Err(msg) { io.println("First error propagated: ${msg}") }
    
    // Test 5: Error in second operation
    result5 = complex_stdlib_chain(10, -15)
    result5 ?
        | Ok(val) { io.println("Unexpected chain success: ${val}") }
        | Err(msg) { io.println("Second error propagated: ${msg}") }
    
    io.println("Stdlib Result .raise() tests completed!")
}