// Test each part of nested generics separately
{ io, Result, Option , get_default_allocator} = @std

test_double_nested = () void {
    io.println("Test 1: Double nested Result<Result<T,E>,E>")
    
    get_double_nested = () Result<Result<i32, StaticString>, StaticString> {
        Result.Ok(Result.Ok(100))
    }
    
    outer_result = get_double_nested()
    inner_result = outer_result.raise()
    value = inner_result.raise()
    
    io.println("  Got: ${value}")
}

test_triple_nested = () void {
    io.println("\nTest 2: Triple nested Result")
    
    get_triple_nested = () Result<Result<Result<i32, StaticString>, StaticString>, StaticString> {
        Result.Ok(Result.Ok(Result.Ok(200)))
    }
    
    level1 = get_triple_nested()
    level2 = level1.raise()
    level3 = level2.raise()
    value = level3.raise()
    
    io.println("  Got: ${value}")
}

test_option_result = () void {
    io.println("\nTest 3: Option<Result<T, E>>")
    
    get_option_result = () Option<Result<i32, StaticString>> {
        Option.Some(Result.Ok(400))
    }
    
    opt = get_option_result()
    
    opt ?
        | Option.Some(result) {
            val = result.raise()
            io.println("  Got: ${val}")
        }
        | Option.None { 
            io.println("  Got None") 
        }
}

main = () void {
    alloc = get_default_allocator()
    test_double_nested()
    test_triple_nested()
    test_option_result()
}