// Test raise() with closures returning Result<T,E> - simplified version
{ io, Result , get_default_allocator} = @std

main = () i32 {
    alloc = get_default_allocator()
    // Test 1: Basic closure returning Result<i32, StaticString>
    get_value = () Result<i32, StaticString> {
        return Result.Ok(42)
    }
    
    val1 = get_value().raise()
    success1 = val1 == 42
    success1 ?
        | true { io.println("✓ Test 1: Basic closure with Result<i32, StaticString>") }
        | false { 
            io.println("✗ Test 1 failed: Expected 42, got ${val1}")
            return 1
        }
    
    // Test 2: Closure with parameters returning Result<f64, StaticString>
    divide = (a: f64, b: f64) Result<f64, StaticString> {
        is_zero = b == 0.0
        return is_zero ?
            | true { Result.Err("Division by zero") }
            | false { Result.Ok(a / b) }
    }
    
    val2 = divide(10.0, 2.0).raise()
    success2 = val2 == 5.0
    success2 ?
        | true { io.println("✓ Test 2: Closure with params returning Result<f64, StaticString>") }
        | false {
            io.println("✗ Test 2 failed: Expected 5.0, got ${val2}")
            return 1
        }
    
    // Test 3: Inline closure with raise
    inline_fn = () Result<i32, StaticString> { 
        return Result.Ok(100) 
    }
    
    val3 = inline_fn().raise()
    success3 = val3 == 100
    success3 ?
        | true { io.println("✓ Test 3: Inline closure with raise") }
        | false {
            io.println("✗ Test 3 failed: Expected 100, got ${val3}")
            return 1
        }
    
    io.println("\n✓ All closure + raise() tests passed!")
    return 0
}