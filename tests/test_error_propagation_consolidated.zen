// Consolidated test for error propagation (.raise() operator)
// Combines functionality from multiple test_raise_*.zen files

{ io, Result } = @std

// Result is a built-in type with Ok and Err variants

// Test 1: Basic .raise() with arithmetic
test_basic_arithmetic = () Result<i32, string> {
    a = Result.Ok(10).raise()
    b = Result.Ok(20).raise()
    c = a + b  // Should be 30
    Result.Ok(c)
}

// Test 2: .raise() from function call
get_value = () Result<i32, string> {
    Result.Ok(42)
}

test_from_call = () Result<i32, string> {
    val = get_value().raise()
    Result.Ok(val)
}

// Test 3: Multiple .raise() in sequence
test_multiple_raise = () Result<i32, string> {
    x = Result.Ok(5).raise()
    y = Result.Ok(10).raise()
    z = Result.Ok(15).raise()
    result = x + y + z  // Should be 30
    Result.Ok(result)
}

// Test 4: .raise() with error propagation
test_error_propagation = () Result<i32, string> {
    // This should propagate the error
    err_val = Result.Err("Something went wrong").raise()
    // This line should not execute
    Result.Ok(err_val)
}

// Test 5: UFC with .raise()
compute = (x: i32) Result<i32, string> {
    x > 0 ?
        | true { Result.Ok(x * 2) }
        | false { Result.Err("Negative value") }
}

test_ufc_raise = () Result<i32, string> {
    ufc_val = 5.compute().raise()
    Result.Ok(ufc_val)
}

main = () void {
    io.println("Testing error propagation (.raise()):")
    io.println("")
    
    // Test 1: Basic arithmetic
    test_basic_arithmetic() ?
        | .Ok(v1) { io.println("Test 1 PASS: Basic arithmetic = ${v1}") }
        | .Err(e1) { io.println("Test 1 FAIL: ${e1}") }
    
    // Test 2: From function call
    test_from_call() ?
        | .Ok(v2) { io.println("Test 2 PASS: From call = ${v2}") }
        | .Err(e2) { io.println("Test 2 FAIL: ${e2}") }
    
    // Test 3: Multiple raises
    test_multiple_raise() ?
        | .Ok(v3) { io.println("Test 3 PASS: Multiple raises = ${v3}") }
        | .Err(e3) { io.println("Test 3 FAIL: ${e3}") }
    
    // Test 4: Error propagation
    test_error_propagation() ?
        | .Ok(v4) { io.println("Test 4 FAIL: Should have propagated error") }
        | .Err(e4) { io.println("Test 4 PASS: Error propagated - ${e4}") }
    
    // Test 5: UFC with raise
    test_ufc_raise() ?
        | .Ok(v5) { io.println("Test 5 PASS: UFC raise = ${v5}") }
        | .Err(e5) { io.println("Test 5 FAIL: ${e5}") }
}