// Test structs with methods (simplified version)
{ io , get_default_allocator} = @std

Point: {
    x: f64,
    y: f64,
}

Circle: {
    center: Point,
    radius: f64,
}

// Define area method for Circle
circle_area = (c: Circle) f64 {
    return 3.14159 * c.radius * c.radius
}

// Define perimeter method for Circle  
circle_perimeter = (c: Circle) f64 {
    return 2.0 * 3.14159 * c.radius
}

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

// Define area method for Rectangle
rect_area = (r: Rectangle) f64 {
    width = r.bottom_right.x - r.top_left.x
    height = r.bottom_right.y - r.top_left.y
    return width * height
}

main = () void {
    alloc = get_default_allocator()
    io.println("=== Testing Structs with Methods ===")
    
    // Create a circle
    circle = Circle { 
        center: Point { x: 0.0, y: 0.0 }, 
        radius: 5.0 
    }
    
    io.println("Circle radius: ${circle.radius}")
    io.println("Circle area: ${circle_area(circle)}")
    io.println("Circle perimeter: ${circle_perimeter(circle)}")
    
    // Create a rectangle
    rect = Rectangle {
        top_left: Point { x: 0.0, y: 0.0 },
        bottom_right: Point { x: 10.0, y: 5.0 }
    }
    
    io.println("\nRectangle area: ${rect_area(rect)}")
    
    // Access nested struct fields
    io.println("Rectangle top-left: (${rect.top_left.x}, ${rect.top_left.y})")
    io.println("Rectangle bottom-right: (${rect.bottom_right.x}, ${rect.bottom_right.y})")
}