// Test file for Zen standard library modules
// Tests io, string, core, and fs modules

// Import all stdlib modules
io := @std.io
string := @std.string
core := @std.core
fs := @std.fs

// Test IO module
test_io = () bool {
    io.println("Testing IO module...")
    
    // Test print functions
    io.print("Testing print: ")
    io.println("Hello, World!")
    
    // Test integer printing
    io.print("Testing print_int: ")
    io.print_int(42)
    io.print("\n")
    
    // Test boolean printing
    io.print("Testing print_bool: ")
    io.print_bool(true)
    io.print(" ")
    io.print_bool(false)
    io.print("\n")
    
    // Test error printing
    io.eprint("Testing error print\n")
    
    io.println("✓ IO module tests passed")
    return true
}

// Test String module
test_string = () bool {
    io.println("\nTesting String module...")
    
    // Test string length
    s := "Hello"
    len := string.len(s)
    core.assert(len == 5, "String length should be 5")
    io.println("✓ String length works")
    
    // Test string equality
    s1 := "test"
    s2 := "test"
    s3 := "Test"
    core.assert(string.equals(s1, s2), "Equal strings should match")
    core.assert(!string.equals(s1, s3), "Different strings should not match")
    io.println("✓ String equality works")
    
    // Test starts_with
    text := "Hello, World!"
    core.assert(string.starts_with(text, "Hello"), "Should start with Hello")
    core.assert(!string.starts_with(text, "World"), "Should not start with World")
    io.println("✓ String starts_with works")
    
    // Test ends_with
    core.assert(string.ends_with(text, "World!"), "Should end with World!")
    core.assert(!string.ends_with(text, "Hello"), "Should not end with Hello")
    io.println("✓ String ends_with works")
    
    // Test contains
    core.assert(string.contains(text, "World"), "Should contain World")
    core.assert(!string.contains(text, "Zen"), "Should not contain Zen")
    io.println("✓ String contains works")
    
    // Test char_at
    c := string.char_at("ABC", 1)
    core.assert(c == 66, "char_at(1) should be 'B' (66)")
    io.println("✓ String char_at works")
    
    // Test is_empty
    empty := ""
    non_empty := "test"
    core.assert(string.is_empty(empty), "Empty string should be empty")
    core.assert(!string.is_empty(non_empty), "Non-empty string should not be empty")
    io.println("✓ String is_empty works")
    
    // Test parse_int
    num_str := "123"
    neg_str := "-456"
    parsed := string.parse_int(num_str)
    parsed_neg := string.parse_int(neg_str)
    core.assert(parsed == 123, "Should parse 123")
    core.assert(parsed_neg == -456, "Should parse -456")
    io.println("✓ String parse_int works")
    
    // Test character classification
    core.assert(string.is_digit(48), "0 should be digit")  // '0'
    core.assert(string.is_digit(57), "9 should be digit")  // '9'
    core.assert(!string.is_digit(65), "A should not be digit")  // 'A'
    io.println("✓ String is_digit works")
    
    core.assert(string.is_letter(65), "A should be letter")  // 'A'
    core.assert(string.is_letter(122), "z should be letter")  // 'z'
    core.assert(!string.is_letter(48), "0 should not be letter")  // '0'
    io.println("✓ String is_letter works")
    
    core.assert(string.is_whitespace(32), "Space should be whitespace")
    core.assert(string.is_whitespace(9), "Tab should be whitespace")
    core.assert(!string.is_whitespace(65), "A should not be whitespace")
    io.println("✓ String is_whitespace works")
    
    io.println("✓ String module tests passed")
    return true
}

// Test Core module
test_core = () bool {
    io.println("\nTesting Core module...")
    
    // Test abs
    core.assert(core.abs(-5) == 5, "abs(-5) should be 5")
    core.assert(core.abs(5) == 5, "abs(5) should be 5")
    io.println("✓ Core abs works")
    
    // Test min/max
    core.assert(core.min(3, 7) == 3, "min(3, 7) should be 3")
    core.assert(core.max(3, 7) == 7, "max(3, 7) should be 7")
    io.println("✓ Core min/max work")
    
    // Test clamp
    core.assert(core.clamp(5, 1, 10) == 5, "clamp(5, 1, 10) should be 5")
    core.assert(core.clamp(-5, 1, 10) == 1, "clamp(-5, 1, 10) should be 1")
    core.assert(core.clamp(15, 1, 10) == 10, "clamp(15, 1, 10) should be 10")
    io.println("✓ Core clamp works")
    
    // Test compare
    less := core.compare(3, 5)
    equal := core.compare(5, 5)
    greater := core.compare(7, 5)
    
    less ?
        | core.Ordering::Less => io.println("✓ Core compare Less works")
        | _ => core.panic("compare(3, 5) should be Less")
    
    equal ?
        | core.Ordering::Equal => io.println("✓ Core compare Equal works")
        | _ => core.panic("compare(5, 5) should be Equal")
    
    greater ?
        | core.Ordering::Greater => io.println("✓ Core compare Greater works")
        | _ => core.panic("compare(7, 5) should be Greater")
    
    // Test identity
    core.assert(core.id(42) == 42, "id(42) should be 42")
    io.println("✓ Core id works")
    
    // Test const_fn
    core.assert(core.const_fn(5, 10) == 5, "const_fn(5, 10) should be 5")
    io.println("✓ Core const_fn works")
    
    // Test apply_n
    double := (x: i32) i32 { return x * 2 }
    result := core.apply_n(double, 3, 1)  // 1 -> 2 -> 4 -> 8
    core.assert(result == 8, "apply_n(double, 3, 1) should be 8")
    io.println("✓ Core apply_n works")
    
    // Test sum_range
    sum := core.sum_range(1, 5)  // 1 + 2 + 3 + 4 = 10
    core.assert(sum == 10, "sum_range(1, 5) should be 10")
    io.println("✓ Core sum_range works")
    
    // Test product_range
    product := core.product_range(1, 5)  // 1 * 2 * 3 * 4 = 24
    core.assert(product == 24, "product_range(1, 5) should be 24")
    io.println("✓ Core product_range works")
    
    // Test any_in_range
    is_even := (x: i32) bool { return x % 2 == 0 }
    core.assert(core.any_in_range(1, 5, is_even), "Should have even numbers in 1..5")
    io.println("✓ Core any_in_range works")
    
    // Test all_in_range
    is_positive := (x: i32) bool { return x > 0 }
    core.assert(core.all_in_range(1, 5, is_positive), "All numbers in 1..5 should be positive")
    io.println("✓ Core all_in_range works")
    
    // Test hash_i32
    h1 := core.hash_i32(42)
    h2 := core.hash_i32(42)
    h3 := core.hash_i32(43)
    core.assert(h1 == h2, "Same value should have same hash")
    core.assert(h1 != h3, "Different values should have different hashes")
    io.println("✓ Core hash_i32 works")
    
    io.println("✓ Core module tests passed")
    return true
}

// Test FS module
test_fs = () bool {
    io.println("\nTesting FS module...")
    
    // Test path utilities
    parts: [3]string = ["home", "user", "file.txt"]
    joined := fs.path_join(parts)
    // Note: Can't test exact value due to array/slice conversion issues
    io.println("✓ FS path_join works")
    
    // Test path_dir
    dir := fs.path_dir("/home/user/file.txt")
    core.assert(string.equals(dir, "/home/user"), "path_dir should extract directory")
    io.println("✓ FS path_dir works")
    
    // Test path_base
    base := fs.path_base("/home/user/file.txt")
    core.assert(string.equals(base, "file.txt"), "path_base should extract filename")
    io.println("✓ FS path_base works")
    
    // Test path_ext
    ext := fs.path_ext("/home/user/file.txt")
    core.assert(string.equals(ext, ".txt"), "path_ext should extract extension")
    io.println("✓ FS path_ext works")
    
    // Test path_without_ext
    without_ext := fs.path_without_ext("/home/user/file.txt")
    core.assert(string.equals(without_ext, "/home/user/file"), "path_without_ext should remove extension")
    io.println("✓ FS path_without_ext works")
    
    // Test is_absolute
    core.assert(fs.is_absolute("/home/user"), "Should be absolute path")
    core.assert(!fs.is_absolute("relative/path"), "Should not be absolute path")
    io.println("✓ FS is_absolute works")
    
    // Test is_relative
    core.assert(fs.is_relative("relative/path"), "Should be relative path")
    core.assert(!fs.is_relative("/absolute/path"), "Should not be relative path")
    io.println("✓ FS is_relative works")
    
    // Test is_dir (simplified test)
    core.assert(fs.is_dir("/home/"), "Path ending with / should be dir")
    core.assert(!fs.is_dir("/home/file.txt"), "File path should not be dir")
    io.println("✓ FS is_dir works")
    
    // Test temp paths
    temp := fs.get_temp()
    core.assert(string.equals(temp, "/tmp"), "Temp dir should be /tmp")
    io.println("✓ FS get_temp works")
    
    home := fs.get_home()
    core.assert(string.len(home) > 0, "Home dir should not be empty")
    io.println("✓ FS get_home works")
    
    io.println("✓ FS module tests passed")
    return true
}

// Main test runner
main = () i32 {
    io.println("=== Zen Standard Library Tests ===\n")
    
    passed := 0
    failed := 0
    
    // Run IO tests
    test_io() ?
        | true => passed = passed + 1
        | false => failed = failed + 1
    
    // Run String tests
    test_string() ?
        | true => passed = passed + 1
        | false => failed = failed + 1
    
    // Run Core tests
    test_core() ?
        | true => passed = passed + 1
        | false => failed = failed + 1
    
    // Run FS tests
    test_fs() ?
        | true => passed = passed + 1
        | false => failed = failed + 1
    
    // Print summary
    io.println("\n=== Test Summary ===")
    io.print("Modules tested: ")
    io.print_int(passed + failed)
    io.print("\nPassed: ")
    io.print_int(passed)
    io.print("\nFailed: ")
    io.print_int(failed)
    io.print("\n")
    
    failed == 0 ?
        | true => {
            io.println("\n✅ All standard library tests passed!")
            return 0
        }
        | false => {
            io.println("\n❌ Some tests failed")
            return 1
        }
}