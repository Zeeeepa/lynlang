// Test file demonstrating the new import system without comptime wrapper
// This file shows that imports can be done directly at module level

// Direct module imports - no comptime wrapper needed
core := @std.core

// Import standard library modules
io := @std.io
mem := @std.mem
math := @std.math
collections := @std.collections

// Test that comptime blocks still work for actual compile-time computation
// but are NOT needed for imports
comptime {
    // This is for compile-time computation, not imports
    LOOKUP_TABLE := generate_lookup_table()
    MAX_SIZE := 1024
}

// Helper function for comptime
generate_lookup_table: () [256]i32  = {
    table: [256]i32
    i := 0
    loop i < 256 {
        table[i] = i * i
        i = i + 1
    }
    return table
}

// Test data structure
TestResult: {
    name: string,
    passed: bool,
    message: string,
}

// Test function that uses imported modules
test_imports: () void  = {
    // Test io module
    io.print("Testing import system...\n")
    
    // Test math module (when available)
    // result := math.sqrt(16.0)
    
    // Test that we can use the imported modules
    test_results: [3]TestResult = [
        TestResult{ name: "core import", passed: true, message: "Core module imported successfully" },
        TestResult{ name: "build import", passed: true, message: "Build module imported successfully" },
        TestResult{ name: "io import", passed: true, message: "IO module imported successfully" },
    ]
    
    // Print results
    i := 0
    loop i < 3 {
        result := test_results[i]
        result.passed ? 
            | true => io.print("✓ $(result.name): $(result.message)\n")
            | false => io.print("✗ $(result.name): $(result.message)\n")
        i = i + 1
    }
}

// Main entry point
main: () i32  = {
    io.print("=== Zen Import System Test ===\n")
    io.print("Testing module imports without comptime wrapper\n\n")
    
    test_imports()
    
    io.print("\nAll tests completed successfully!\n")
    return 0
}