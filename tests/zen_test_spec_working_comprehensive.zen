// Comprehensive test of WORKING features from LANGUAGE_SPEC.zen
// Focusing on features that are currently implemented

{ io } = @std

// Simple struct from spec (line 117-120)
Point: {
    x:: f64,  // mutable field
    y:: f64 = 0  // with default value
}

// Test UFC (Uniform Function Call) 
double = (x: i32) i32 { return x * 2 }
triple = (x: i32) i32 { return x * 3 }

main = () void {
    io.println("=== LANGUAGE_SPEC.zen Working Features Test ===")
    
    // ======================================================================
    // 1. VARIABLE DECLARATIONS (lines 298-306)
    // ======================================================================
    io.println("\n1. Variable Declarations:")
    
    // Forward declaration 
    x: i32
    x = 10
    io.println("  x (forward decl): ${x}")
    
    // Immutable assignment
    y = 20  
    io.println("  y (immutable): ${y}")
    
    // Immutable with type
    z: i32 = 30
    io.println("  z (immutable typed): ${z}")
    
    // Mutable forward declaration
    w:: i32
    w = 40
    io.println("  w (mut forward): ${w}")
    w = 45
    io.println("  w (after mutation): ${w}")
    
    // Mutable assignment
    v ::= 50
    io.println("  v (mutable): ${v}")
    v = 60
    io.println("  v (after change): ${v}")
    
    // Mutable with type
    u:: i32 = 70
    io.println("  u (mut typed): ${u}")
    u = 80
    io.println("  u (after change): ${u}")
    
    // ======================================================================
    // 2. PATTERN MATCHING WITH ? (lines 352-361)
    // ======================================================================
    io.println("\n2. Pattern Matching with ? operator:")
    
    // Boolean pattern - simple form
    is_ready = true
    is_ready ? {
        io.println("  is_ready is true")
    }
    
    // Boolean pattern - if-else form
    has_data = false
    has_data ?
        | true { io.println("  Has data: true") }
        | false { io.println("  Has data: false") }
    
    // Another example
    is_valid = true
    is_valid ?
        | true { io.println("  Validation: passed") }
        | false { io.println("  Validation: failed") }
    
    // ======================================================================
    // 3. STRUCTS (lines 117-120, 363-372)
    // ======================================================================
    io.println("\n3. Structs with mutable fields:")
    
    // Create struct with mutable fields
    point ::= Point { x: 10.5, y: 20.5 }
    io.println("  Point: x=${point.x}, y=${point.y}")
    
    // Mutate fields
    point.x = 30.5
    point.y = 40.5
    io.println("  After mutation: x=${point.x}, y=${point.y}")
    
    // Use default value
    point2 = Point { x: 5.0 }  // y gets default value of 0
    io.println("  Point with default: x=${point2.x}, y=${point2.y}")
    
    // ======================================================================
    // 4. RANGES AND LOOPS (lines 432-439)
    // ======================================================================
    io.println("\n4. Ranges and loops:")
    
    // Basic range
    io.println("  Range (0..5):")
    (0..5).loop((i) {
        io.println("    ${i}")
    })
    
    // Range used for sum
    sum ::= 0
    (1..11).loop((i) {
        sum = sum + i
    })
    io.println("  Sum of (1..11): ${sum}")
    
    // Larger range
    io.println("  Range (10..15):")
    (10..15).loop((i) {
        io.println("    ${i}")
    })
    
    // ======================================================================
    // 5. UFC (Uniform Function Call) (line 4)
    // ======================================================================
    io.println("\n5. UFC (Uniform Function Call):")
    
    // Function can be called as method
    num = 7
    doubled = num.double()  // UFC: calling double as method
    io.println("  7.double() = ${doubled}")
    
    // Also works as regular function
    doubled2 = double(8)
    io.println("  double(8) = ${doubled2}")
    
    // Chain UFC calls
    val = 5
    tripled = val.triple()
    io.println("  5.triple() = ${tripled}")
    
    // ======================================================================
    // 6. ARITHMETIC OPERATIONS
    // ======================================================================
    io.println("\n6. Arithmetic operations:")
    
    a = 100
    b = 25
    io.println("  ${a} + ${b} = ${a + b}")
    io.println("  ${a} - ${b} = ${a - b}")
    io.println("  ${a} * ${b} = ${a * b}")
    io.println("  ${a} / ${b} = ${a / b}")
    
    // With different types
    f1 = 10.5
    f2 = 2.5
    io.println("  ${f1} + ${f2} = ${f1 + f2}")
    io.println("  ${f1} * ${f2} = ${f1 * f2}")
    
    // ======================================================================
    // 7. COMPARISONS
    // ======================================================================
    io.println("\n7. Comparison operations:")
    
    val1 = 10
    val2 = 20
    
    (val1 < val2) ? {
        io.println("  ${val1} < ${val2}: true")
    }
    
    (val1 > val2) ?
        | true { io.println("  ${val1} > ${val2}: true") }
        | false { io.println("  ${val1} > ${val2}: false") }
    
    (val1 == 10) ? {
        io.println("  ${val1} == 10: true")
    }
    
    (val2 >= 20) ? {
        io.println("  ${val2} >= 20: true")
    }
    
    // ======================================================================
    // 8. LOOP CONTROL (lines 453-459)
    // ======================================================================
    io.println("\n8. Loop control with break:")
    
    counter ::= 0
    loop(() {
        counter = counter + 1
        io.println("  Loop counter: ${counter}")
        (counter >= 3) ?
            | true { break }
            | false { }
    })
    
    // ======================================================================
    // 9. STRING INTERPOLATION
    // ======================================================================
    io.println("\n9. String interpolation:")
    
    name = "Zen"
    version = 1
    io.println("  Language: ${name} v${version}")
    
    // Complex interpolation
    result = 42
    io.println("  The answer is ${result} (computed)")
    
    io.println("\n=== All Working Features Tested Successfully ===")
}