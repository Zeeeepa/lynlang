// Core test of LANGUAGE_SPEC.zen main function
// Tests the essential features that should work now

// Imports - only @std and @this are special
{ io } = @std

// Simple Option type for testing
Option<T>: Some(T) | None

// Result type for error handling  
Result<T, E>: Ok(T) | Err(E)

// Simple struct
Point: {
    x:: f64,  // mutable field
    y:: f64   // mutable field
}

// Circle struct
Circle: {
    center: Point,
    radius: f64
}

// Rectangle struct
Rectangle: {
    top_left: Point,
    bottom_right: Point  
}

// Enum type (sum type)
Shape: Circle | Rectangle

// Simple entity enum
GameEntity: Player | Enemy | Powerup

// Functions for each variant
get_health = (e: GameEntity.Player) i32 { return 100 }
get_health = (e: GameEntity.Enemy) i32 { return 50 }
get_health = (e: GameEntity.Powerup) i32 { return 0 }

main = () void {
    // Test variable declarations
    x: i32        // forward declaration
    x = 10
    y = 10        // Immutable assignment
    z : i32 = 20  // Immutable with type
    w :: i32      // mutable forward declaration
    w = 20
    v ::= 30      // Mutable assignment
    u :: i32 = 40 // mutable with type

    // Test boolean pattern matching
    is_ready = true
    is_ready ? {
        io.println("Starting game!")
    }
    
    // Full pattern match for if-else
    has_data = false
    has_data ?
        | true { io.println("Has data") }
        | false { io.println("Waiting for data...") }
    
    // Test Option handling
    maybe_radius: Option<f64> = Some(5.5)
    maybe_radius ?
        | Some(r) {
            circle = Circle {
                center: Point { x: 100.0, y: 100.0 },
                radius: r
            }
            io.println("Created circle")
        }
        | None {
            io.println("No radius provided")
        }
    
    // Test Result type
    result: Result<i32, String> = Ok(42)
    result ?
        | Ok(val) { io.println("Success") }
        | Err(e) { io.println("Error") }

    // Test GameEntity pattern matching
    entity = GameEntity.Player
    entity ?
        | Player { 
            health = entity.get_health()
            io.println("Player health")
        }
        | Enemy { 
            io.println("Enemy")
        }
        | Powerup {
            io.println("Powerup")
        }

    // Test ranges
    (0..3).loop((i) {
        io.println("Count")
    })
    
    // Infinite loop with break
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { break }
            | false { io.println("Looping") }
    })
    
    io.println("Test complete")
}