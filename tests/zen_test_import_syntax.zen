// Comprehensive test for Zen import syntax
// Tests both builtin (@std) and regular imports

// Test 1: Builtin imports (correct syntax - no comptime)
core = @std.core
io = @std.io
math = @std.math
string = @std.string
{ Vec, DynVec } = @std.collections
fs = @std.fs

// Test 2: Compiler module imports
lexer = @std.lexer
parser = @std.parser
codegen = @std.codegen

// Test 3: Import with build.import() pattern
json = @std.json
network = @std.network
http = @std.http

// Test 4: Custom module imports
// These would be user modules in a real project
// custom_lib := @my_custom_lib
// utils := @project.utils

// Test function using various imported modules
test_imports = () bool   {
    // Test core functionality
    result := core.assert(true, "Core assert works")
    
    // Test math operations
    pi_test := math.PI > 3.14 && math.PI < 3.15
    sqrt_test := math.sqrt(4.0) == 2.0
    
    // Test string operations
    hello := "Hello"
    world := "World"
    combined := string.concat(hello, ", ", world, "!")
    
    // Test vector operations
    numbers := DynVec.new<i32>()
    numbers.push(1)
    numbers.push(2)
    numbers.push(3)
    
    // All tests should pass
    return pi_test && sqrt_test && numbers.len() == 3
}

// Test that comptime is NOT used for imports
test_no_comptime_imports = () bool   {
    // This function exists to document that we don't use comptime for imports
    // The imports at the top of this file are the correct way
    return true
}

// Main entry point
main = () i32   {
    io.print("Testing Zen import syntax...\n")
    
    test_imports() ?
        | true {
            io.print("✓ Import tests passed\n")
        }
        | false {
            io.print("✗ Import tests failed\n")
            return 1
        }
    
    test_no_comptime_imports() ?
        | true {
            io.print("✓ No comptime imports check passed\n")
        }
        | false {
            io.print("✗ Comptime check failed\n")
            return 1
        }
    
    io.print("All import syntax tests passed!\n")
    return 0
}