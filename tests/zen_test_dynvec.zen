// Test DynVec operations
{ io, memory } = @std

test_dynvec = () i32 {
    // Create a DynVec with initial capacity
    vec ::= DynVec<i32>(memory.system_allocator(), 10)
    
    // Test push operations
    vec.push(42)
    vec.push(100)
    vec.push(200)
    
    // Test length
    io.println("Length: ${vec.len()}")
    
    // Test get operations
    first ::= vec.get(0)
    first ?
        | Some(val) { io.println("First element: ${val}") }
        | None { io.println("No element at index 0") }
    
    // Test pop operation
    popped ::= vec.pop()
    popped ?
        | Some(val) { io.println("Popped: ${val}") }
        | None { io.println("Vector was empty") }
    
    // Test set operation
    vec.set(1, 999)
    
    second ::= vec.get(1)
    second ?
        | Some(val) { io.println("Second element after set: ${val}") }
        | None { io.println("No element at index 1") }
    
    // Test clear
    vec.clear()
    io.println("Length after clear: ${vec.len()}")
    
    // Test growing capacity
    i ::= 0
    loop {
        i >= 20 ? { break }
        vec.push(i)
        i = i + 1
    }
    io.println("Final length: ${vec.len()}")
    
    return 0
}

main = () i32 {
    io.println("Testing DynVec operations...")
    return test_dynvec()
}