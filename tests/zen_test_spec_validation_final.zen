// LANGUAGE_SPEC.zen Validation Test
// This test validates what currently works from the spec

{ io, math } = @std

Option<T>: Some(T) | None

main = () void {
    io.println("LANGUAGE_SPEC.zen Validation Test")
    io.println("==================================")
    
    passed ::= 0
    
    // Test 1: Variables
    x: i32
    x = 10
    y = 20
    z: i32 = 30
    w:: i32
    w = 40
    v ::= 50
    u:: i32 = 60
    io.println("✅ Test 1: All variable forms work")
    passed = passed + 1
    
    // Test 2: Pattern matching
    has_data = false
    has_data ?
        | true { }
        | false { 
            io.println("✅ Test 2: Pattern matching works")
            passed = passed + 1
        }
    
    // Test 3: Range loops
    (0..3).loop((i) { })
    io.println("✅ Test 3: Range loops work")
    passed = passed + 1
    
    // Test 4: Infinite loop
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 2 ? { break }
    })
    io.println("✅ Test 4: Infinite loops work")
    passed = passed + 1
    
    // Test 5: String interpolation
    val = 42
    str = "Value: ${val}"
    io.println("✅ Test 5: String interpolation works")
    passed = passed + 1
    
    // Test 6: Math module
    pi_val = math.pi
    io.println("✅ Test 6: Math.pi works")
    passed = passed + 1
    
    // Test 7: Imports
    io.println("✅ Test 7: @std imports work")
    passed = passed + 1
    
    // Test 8: Option
    none_val: Option<i32> = None
    none_val ?
        | Some(v) { }
        | None {
            io.println("✅ Test 8: Option matching works")
            passed = passed + 1
        }
    
    io.println("\n==================================")
    io.println("Tests Passed: ${passed}/8")
    io.println("✅ Core features validated")
}
