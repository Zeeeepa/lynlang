// Test of all working Zen features from LANGUAGE_SPEC.zen

{ io, math } = @std

// Structs
Point: {
    x:: f64,
    y:: f64,
}

Circle: {
    center: Point,
    radius: f64,
}

Rectangle: {
    width: f64,
    height: f64,
}

// Trait definition
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Implement traits
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

Rectangle.implements(Geometric, {
    area = (self) f64 {
        return self.width * self.height
    },
    perimeter = (self) f64 {
        return 2.0 * (self.width + self.height)
    },
})

// Enum types
Shape: Circle | Rectangle
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

main = () void {
    io.println("=== Working Zen Features ===")
    
    // 1. Variable declarations
    io.println("\n1. Variables:")
    x: i32
    x = 10
    y = 20
    z ::= 30
    z = 40
    io.println("  x=${x}, y=${y}, z=${z}")
    
    // 2. Pattern matching
    io.println("\n2. Pattern Matching:")
    is_ready = true
    is_ready ? {
        io.println("  Ready!")
    }
    
    value = false
    value ?
        | true { io.println("  True branch") }
        | false { io.println("  False branch") }
    
    // 3. Traits
    io.println("\n3. Traits:")
    c = Circle { center: Point { x: 0.0, y: 0.0 }, radius: 5.0 }
    io.println("  Circle area: ${c.area()}")
    
    r = Rectangle { width: 10.0, height: 20.0 }
    io.println("  Rectangle area: ${r.area()}")
    
    // 4. Option
    io.println("\n4. Option:")
    some: Option<i32> = Some(42)
    some ?
        | Some(v) { io.println("  Some(${v})") }
        | None { io.println("  None") }
    
    // 5. Result
    io.println("\n5. Result:")
    ok: Result<i32, string> = Ok(100)
    ok ?
        | Ok(v) { io.println("  Ok(${v})") }
        | Err(e) { io.println("  Err") }
    
    // 6. Loops
    io.println("\n6. Loops:")
    (0..3).loop((i) {
        io.println("  i=${i}")
    })
    
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 2 ?
            | true { break }
            | false { io.println("  loop: ${counter}") }
    })
    
    io.println("\n=== Complete ===")
}
