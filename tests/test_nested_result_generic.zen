// Test nested Result<Result<T,E>,E2> payload extraction
{ io } = @std
{ Result } = @std

main = () void {
    // Test 1: Nested Result<Result<i32, string>, string>
    io.println("Test 1: Nested Result<Result<i32, string>, string>")
    
    inner = Result.Ok(42)
    outer = Result.Ok(inner)
    
    outer ? 
        | Result.Ok(inner_result) {
            inner_result ?
                | Result.Ok(value) {
                    io.println("Inner value: ${value}")  // Should print 42
                }
                | Result.Err(err) {
                    io.println("Inner error: ${err}")
                }
        }
        | Result.Err(err) {
            io.println("Outer error: ${err}")
        }
    
    // Test 2: Nested Result with error in inner
    io.println("Test 2: Nested Result with inner error")
    
    inner2 = Result.Err("inner error")
    outer2 = Result.Ok(inner2)
    
    outer2 ?
        | Result.Ok(inner_result) {
            inner_result ?
                | Result.Ok(value) {
                    io.println("Inner value: ${value}")
                }
                | Result.Err(err) {
                    io.println("Inner error: ${err}")  // Should print "inner error"
                }
        }
        | Result.Err(err) {
            io.println("Outer error: ${err}")
        }
    
    // Test 3: Nested Result with error in outer
    io.println("Test 3: Nested Result with outer error")
    
    outer3 = Result.Err("outer error")
    
    outer3 ?
        | Result.Ok(inner_result) {
            inner_result ?
                | Result.Ok(value) {
                    io.println("Inner value: ${value}")
                }
                | Result.Err(err) {
                    io.println("Inner error: ${err}")
                }
        }
        | Result.Err(err) {
            io.println("Outer error: ${err}")  // Should print "outer error"
        }
}