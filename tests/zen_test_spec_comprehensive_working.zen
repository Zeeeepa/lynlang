// Comprehensive test of all working features from LANGUAGE_SPEC.zen
// This test demonstrates what's currently functional in the Zen compiler

{ io, math } = @std

// Option type - no null/nil (lines 109-110 in spec)
Option<T>: Some(T) | None

// Result type for error handling (lines 112-113 in spec)
Result<T, E>: Ok(T) | Err(E)

// Simple struct (lines 117-120 in spec)
Point: {
    x:: f64,  // mutable field
    y:: f64  // mutable field
}

// Enum type (lines 165, 173 in spec)
GameEntity: Player | Enemy | Powerup

// Simple function for testing
get_health = (e: GameEntity) u32 { 
    e ?
        | Player { return 100 }
        | Enemy { return 50 }
        | Powerup { return 0 }
}

// Circle struct using Point (lines 130-134 in spec)
Circle: {
    center: Point,
    radius: f64,
}

// Function using math.pi (lines 136-139 in spec)
area = (c: Circle) f64 {
    return math.pi * c.radius * c.radius
}

// UFC example functions
double = (n: i32) i32 { return n * 2 }
add = (x: i32, y: i32) i32 { return x + y }

main = () void {
    io.println("=== Testing Zen Language Features ===")
    
    // Variable declarations (lines 298-306 in spec)
    a: i32  // forward declaration
    a = 10
    b = 20  // immutable assignment
    c :: i32  // mutable forward declaration  
    c = 30
    d ::= 40  // mutable assignment
    
    io.println("Variables: a=${a}, b=${b}, c=${c}, d=${d}")
    
    // Mutable assignment
    c = 35
    d = 45
    io.println("After mutation: c=${c}, d=${d}")
    
    // Boolean pattern matching (lines 352-361 in spec)
    is_ready = true
    is_ready ? {
        io.println("System is ready!")
    }
    
    // Boolean if-else pattern (lines 358-361 in spec)
    has_data = false
    has_data ?
        | true { io.println("Processing data...") }
        | false { io.println("Waiting for data...") }
    
    // Option handling (lines 462-473 in spec)
    maybe_radius: Option<f64> = Some(5.5)
    maybe_radius ?
        | Some(r) {
            circle = Circle {
                center: Point { x: 100.0, y: 100.0 },
                radius: r,
            }
            io.println("Created circle with area: ${area(circle)}")
        }
        | None {
            io.println("No radius provided")
        }
    
    // Result type example
    parse_result: Result<i32, String> = Ok(42)
    parse_result ?
        | Ok(val) { io.println("Parsed value: ${val}") }
        | Err(msg) { io.println("Parse error: ${msg}") }
    
    // UFC - Uniform Function Call (lines 151-153 in spec)
    num = 10
    doubled = num.double()  // double(10) = 20
    result = doubled.add(5)  // add(20, 5) = 25
    io.println("UFC result: ${result}")
    
    // Enum variant creation and pattern matching
    player = GameEntity.Player
    enemy = GameEntity.Enemy
    
    player ?
        | Player { 
            h = get_health(player)
            io.println("Player health: ${h}") 
        }
        | Enemy { io.println("Enemy health") }
        | Powerup { io.println("Powerup") }
    
    // Range loops (lines 432-434 in spec)
    io.println("Range loop 0..5:")
    (0..5).loop((i) {
        io.println("  Count: ${i}")
    })
    
    // Infinite loop with break (lines 453-459 in spec)  
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { break }
            | false { io.println("Loop iteration: ${counter}") }
    })
    
    // Struct literals and field access
    p1 = Point { x: 10.5, y: 20.5 }
    io.println("Point: (${p1.x}, ${p1.y})")
    
    // Mutable struct field modification
    p1.x = 15.5
    io.println("Modified point: (${p1.x}, ${p1.y})")
    
    // Math.pi constant test (line 138 in spec)
    test_circle = Circle {
        center: Point { x: 0, y: 0 },
        radius: 10.0
    }
    circle_area = area(test_circle)
    io.println("Circle area (r=10): ${circle_area}")
    
    // String interpolation with various types
    int_val = 42
    float_val = 3.14159
    bool_val = true
    io.println("Interpolation test: int=${int_val}, float=${float_val}, bool=${bool_val}")
    
    io.println("=== All tests completed successfully! ===")
}