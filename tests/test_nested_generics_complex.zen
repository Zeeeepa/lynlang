// Test complex nested generic types
{ io, Result, Option, DynVec } = @std

// Function that returns Result<Option<i32>, string>
get_result_option = (val: i32) Result<Option<i32>, string> {
    val > 0 ?
        | true { Result.Ok(Option.Some(val)) }
        | false { Result.Err("Value must be positive") }
}

// Function that returns Option<Result<i32, string>>
get_option_result = (val: i32) Option<Result<i32, string>> {
    val == 0 ?
        | true { Option.None }
        | false { 
            val > 0 ?
                | true { Option.Some(Result.Ok(val)) }
                | false { Option.Some(Result.Err("Negative value")) }
        }
}

// Function that returns Result<Result<i32, string>, string>
get_nested_result = (val: i32) Result<Result<i32, string>, string> {
    val == 0 ?
        | true { Result.Err("Zero not allowed") }
        | false {
            val > 0 ?
                | true { Result.Ok(Result.Ok(val)) }
                | false { Result.Ok(Result.Err("Negative")) }
        }
}

main = () void {
    io.println("Testing complex nested generics")
    
    // Test Result<Option<i32>, string>
    io.println("\n1. Result<Option<i32>, string>")
    r1 = get_result_option(42)
    r1 ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(v) { io.println("  Got Some(${v})") }
                | Option.None { io.println("  Got None") }
        }
        | Result.Err(e) { io.println("  Error: ${e}") }
    
    r2 = get_result_option(-5)
    r2 ?
        | Result.Ok(opt) { io.println("  Unexpected Ok") }
        | Result.Err(e) { io.println("  Error: ${e}") }
    
    // Test Option<Result<i32, string>>
    io.println("\n2. Option<Result<i32, string>>")
    o1 = get_option_result(10)
    o1 ?
        | Option.Some(res) {
            res ?
                | Result.Ok(v) { io.println("  Got Ok(${v})") }
                | Result.Err(e) { io.println("  Got Err(${e})") }
        }
        | Option.None { io.println("  Got None") }
    
    o2 = get_option_result(0)
    o2 ?
        | Option.Some(res) { io.println("  Unexpected Some") }
        | Option.None { io.println("  Got None") }
    
    o3 = get_option_result(-3)
    o3 ?
        | Option.Some(res) {
            res ?
                | Result.Ok(v) { io.println("  Unexpected Ok") }
                | Result.Err(e) { io.println("  Got Err(${e})") }
        }
        | Option.None { io.println("  Got None") }
    
    // Test Result<Result<i32, string>, string>
    io.println("\n3. Result<Result<i32, string>, string>")
    n1 = get_nested_result(5)
    n1 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) { io.println("  Got Ok(Ok(${v}))") }
                | Result.Err(e) { io.println("  Got Ok(Err(${e}))") }
        }
        | Result.Err(e) { io.println("  Got Err(${e})") }
    
    n2 = get_nested_result(0)
    n2 ?
        | Result.Ok(inner) { io.println("  Unexpected Ok") }
        | Result.Err(e) { io.println("  Got Err(${e})") }
    
    n3 = get_nested_result(-2)
    n3 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) { io.println("  Unexpected Ok(Ok)") }
                | Result.Err(e) { io.println("  Got Ok(Err(${e}))") }
        }
        | Result.Err(e) { io.println("  Got Err(${e})") }
    
    // Test with raise()
    io.println("\n4. Testing raise() with nested types")
    r3 = get_result_option(99)
    opt2 = r3.raise()
    opt2 ?
        | Option.Some(v) { io.println("  raise() extracted: ${v}") }
        | Option.None { io.println("  raise() got None") }
    
    n4 = get_nested_result(77)
    inner2 = n4.raise()
    val2 = inner2.raise()
    io.println("  Double raise() extracted: ${val2}")
    
    io.println("\nAll nested generic tests completed!")
}