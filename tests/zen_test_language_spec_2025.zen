// Zen Language Test - Based on LANGUAGE_SPEC.zen
// This test validates the complete implementation
// Tests all features from the official specification

// ============================================================================
// CORE FEATURES
// ============================================================================

// Only @std and @this are special
{ io, math } = @std

// No keywords test - using ? for control flow
test_no_keywords = () void {
    is_ready = true
    is_ready ? {
        io.println("No keywords - only operators!")
    }
    
    has_data = false
    has_data ?
        | true { io.println("Has data") }
        | false { io.println("No data") }
}

// ============================================================================
// VARIABLES & ASSIGNMENTS
// ============================================================================

test_variables = () void {
    // Forward declaration
    x: i32
    x = 10
    
    // Immutable assignment
    y = 20
    
    // Immutable with type
    z: i32 = 30
    
    // Mutable forward declaration
    w:: i32
    w = 40
    
    // Mutable assignment
    v ::= 50
    
    // Mutable with type
    u:: i32 = 60
    
    io.println("Variables: x=${x}, y=${y}, z=${z}")
    io.println("Mutable: w=${w}, v=${v}, u=${u}")
}

// ============================================================================
// OPTION & RESULT TYPES (No null!)
// ============================================================================

Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

test_option = () void {
    maybe_value: Option<i32> = Some(42)
    
    maybe_value ?
        | Some(val) { io.println("Got value: ${val}") }
        | None { io.println("No value") }
    
    empty: Option<i32> = None
    empty ?
        | Some(val) { io.println("Unexpected: ${val}") }
        | None { io.println("Empty as expected") }
}

test_result = () void {
    success: Result<i32, string> = Ok(100)
    failure: Result<i32, string> = Err("Something went wrong")
    
    success ?
        | Ok(val) { io.println("Success: ${val}") }
        | Err(msg) { io.println("Error: ${msg}") }
    
    failure ?
        | Ok(val) { io.println("Unexpected success: ${val}") }
        | Err(msg) { io.println("Expected error: ${msg}") }
}

// ============================================================================
// STRUCTS WITH MUTABLE FIELDS
// ============================================================================

Point: {
    x:: f64,  // mutable field
    y:: f64 = 0.0  // with default value
}

test_structs = () void {
    p = Point { x: 10.0, y: 20.0 }
    io.println("Point: (${p.x}, ${p.y})")
    
    // Default value test
    p2 = Point { x: 5.0 }
    io.println("Point with default: (${p2.x}, ${p2.y})")
}

// ============================================================================
// TRAITS & IMPLEMENTATIONS
// ============================================================================

Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

Circle: {
    center: Point,
    radius: f64,
}

Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// ============================================================================
// ENUMS & PATTERN MATCHING
// ============================================================================

Shape: Circle | Rectangle

// Requires all Shape variants to implement Geometric
Shape.requires(Geometric)

test_enums = () void {
    c = Circle { 
        center: Point { x: 0.0, y: 0.0 }, 
        radius: 5.0 
    }
    
    io.println("Circle area: ${c.area()}")
    io.println("Circle perimeter: ${c.perimeter()}")
    
    r = Rectangle {
        top_left: Point { x: 0.0, y: 0.0 },
        bottom_right: Point { x: 10.0, y: 10.0 }
    }
    
    io.println("Rectangle area: ${r.area()}")
    io.println("Rectangle perimeter: ${r.perimeter()}")
}

// ============================================================================
// UFC (UNIFORM FUNCTION CALL) & OVERLOADING
// ============================================================================

GameEntity: Player | Enemy | Powerup

// Overloaded functions for each variant
get_health = (e: GameEntity.Player) u32 { return 100 }
get_health = (e: GameEntity.Enemy) u32 { return 50 }
get_health = (e: GameEntity.Powerup) u32 { return 0 }

get_speed = (e: GameEntity.Player) f64 { return 5.0 }
get_speed = (e: GameEntity.Enemy) f64 { return 3.0 }
get_speed = (e: GameEntity.Powerup) f64 { return 0.0 }

test_ufc = () void {
    player = GameEntity.Player
    enemy = GameEntity.Enemy
    powerup = GameEntity.Powerup
    
    io.println("Player health: ${player.get_health()}")
    io.println("Enemy health: ${enemy.get_health()}")
    io.println("Powerup health: ${powerup.get_health()}")
    
    io.println("Player speed: ${player.get_speed()}")
    io.println("Enemy speed: ${enemy.get_speed()}")
    io.println("Powerup speed: ${powerup.get_speed()}")
}

// ============================================================================
// LOOPS & RANGES
// ============================================================================

test_loops = () void {
    io.println("Range loop:")
    (0..5).loop((i) {
        io.println("  Count: ${i}")
    })
    
    io.println("Infinite loop with break:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { break }
            | false { io.println("  Loop iteration: ${counter}") }
    })
}

// ============================================================================
// ERROR PROPAGATION WITH .raise()
// ============================================================================

parse_number = (s: string) Result<i32, string> {
    // Simplified for testing
    s == "42" ?
        | true { return Ok(42) }
        | false { return Err("Not a valid number") }
}

process_input = (input: string) Result<i32, string> {
    // If parse_number returns Err, this function returns early with that error
    num = parse_number(input).raise()
    return Ok(num * 2)
}

test_raise = () void {
    result1 = process_input("42")
    result1 ?
        | Ok(val) { io.println("Processed: ${val}") }
        | Err(msg) { io.println("Error: ${msg}") }
    
    result2 = process_input("invalid")
    result2 ?
        | Ok(val) { io.println("Unexpected: ${val}") }
        | Err(msg) { io.println("Expected error: ${msg}") }
}

// ============================================================================
// @this.defer() FOR CLEANUP
// ============================================================================

test_defer = () void {
    io.println("Starting defer test")
    
    @this.defer(io.println("Deferred 1 - executes last"))
    @this.defer(io.println("Deferred 2 - executes second"))
    @this.defer(io.println("Deferred 3 - executes first"))
    
    io.println("Main execution")
}

// ============================================================================
// MAIN FUNCTION
// ============================================================================

main = () void {
    io.println("=== Zen Language Spec Test ===")
    io.println("")
    
    io.println("--- Core Features ---")
    test_no_keywords()
    io.println("")
    
    io.println("--- Variables ---")
    test_variables()
    io.println("")
    
    io.println("--- Option Type ---")
    test_option()
    io.println("")
    
    io.println("--- Result Type ---")
    test_result()
    io.println("")
    
    io.println("--- Structs ---")
    test_structs()
    io.println("")
    
    io.println("--- Enums & Traits ---")
    test_enums()
    io.println("")
    
    io.println("--- UFC & Overloading ---")
    test_ufc()
    io.println("")
    
    io.println("--- Loops & Ranges ---")
    test_loops()
    io.println("")
    
    io.println("--- Error Propagation ---")
    test_raise()
    io.println("")
    
    io.println("--- Defer ---")
    test_defer()
    io.println("")
    
    io.println("=== All Tests Complete ===")
}