// Test HashMap and HashSet stub implementations
{ io, HashMap, HashSet } = @std

// Hash function for i32
i32_hash = (n: i32) i64 {
    val ::= n as i64
    return val * 2654435761
}

// Equality for i32
i32_eq = (a: i32, b: i32) bool {
    return a == b
}

main = () i32 {
    io.println("Testing HashMap and HashSet stubs...")
    
    // Test HashMap
    io.println("\n=== HashMap<i32, i32> ===")
    map ::= HashMap<i32, i32>.new()
    io.println("Initial size: ${map.len()}")
    
    map.insert(1, 100, i32_hash, i32_eq)
    io.println("After insert(1,100): size=${map.len()}")
    
    map.insert(2, 200, i32_hash, i32_eq)
    io.println("After insert(2,200): size=${map.len()}")
    
    has_key ::= map.contains(1, i32_hash, i32_eq)
    io.println("Contains key 1: ${has_key}")
    
    // Test HashSet
    io.println("\n=== HashSet<i32> ===")
    set ::= HashSet<i32>.new(i32_hash, i32_eq)
    io.println("Initial set size: ${set.len()}")
    
    set.add(1)
    io.println("After add(1): size=${set.len()}")
    
    set.add(2)
    io.println("After add(2): size=${set.len()}")
    
    set.add(3)
    io.println("After add(3): size=${set.len()}")
    
    has_elem ::= set.contains(2)
    io.println("Contains 2: ${has_elem}")
    
    io.println("\nTest completed!")
    return 0
}