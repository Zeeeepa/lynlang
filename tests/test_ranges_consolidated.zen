// Consolidated test for range operations and loops
// Combines functionality from multiple zen_test_range_*.zen files

{ io } = @std

main = () void {
    io.println("Testing range operations:")
    io.println("")
    
    // Test 1: Basic exclusive range
    io.println("Test 1: Exclusive range (0..5):")
    (0..5).loop((i) {
        io.println("  ${i}")
    })
    
    // Test 2: Inclusive range  
    io.println("\nTest 2: Inclusive range (1..=3):")
    (1..=3).loop((i) {
        io.println("  ${i}")
    })
    
    // Test 3: Range with accumulator
    io.println("\nTest 3: Sum with range:")
    sum ::= 0
    (1..=10).loop((n) {
        sum = sum + n
    })
    io.println("  Sum of 1..=10 = ${sum}")
    
    // Test 4: Range with early exit
    io.println("\nTest 4: Range with break:")
    (0..100).loop((i) {
        i >= 5 ?
            | true { break }
            | false { io.println("  ${i}") }
    })
    
    // Test 5: Nested ranges
    io.println("\nTest 5: Nested ranges:")
    (0..3).loop((i) {
        (0..2).loop((j) {
            io.println("  [${i}, ${j}]")
        })
    })
    
    // Test 6: Range with condition
    io.println("\nTest 6: Range with filtering:")
    (0..10).loop((n) {
        // Print all numbers for now (modulo not implemented)
        io.println("  Number: ${n}")
    })
    
    // Test 7: Range used for indexing
    io.println("\nTest 7: Range for array indexing:")
    values = [10, 20, 30, 40, 50]
    (0..5).loop((i) {
        io.println("  values[${i}] = ${values[i]}")
    })
    
    io.println("\nAll range tests completed!")
}