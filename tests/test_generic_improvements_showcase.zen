// Showcase of generic type system improvements
{ io, Result, Option, HashMap, HashSet, DynVec, Array } = @std

main = () void {
    io.println("==== Generic Type System Improvements Showcase ====")
    io.println("")
    
    io.println("1. ✅ Nested generic type constructors:")
    io.println("   - HashMap<string, Option<i32>>()")
    map1 = HashMap<string, Option<i32>>()
    io.println("   - HashMap<i32, Result<string, string>>()")  
    map2 = HashMap<i32, Result<string, string>>()
    io.println("   - DynVec<Option<string>>()")
    vec1 = DynVec<Option<string>>()
    io.println("   - DynVec<Result<i32, string>>()")
    vec2 = DynVec<Result<i32, string>>()
    io.println("")
    
    io.println("2. ✅ Triple nested generics work:")
    get_triple = () Result<Result<Result<i32, string>, string>, string> {
        Result.Ok(Result.Ok(Result.Ok(42)))
    }
    triple = get_triple()
    triple ?
        | Result.Ok(level2) {
            level2 ?
                | Result.Ok(level3) {
                    level3 ?
                        | Result.Ok(val) {
                            io.println("   Triple nested value: ${val}")
                        }
                        | Result.Err(e) { io.println("Error") }
                }
                | Result.Err(e) { io.println("Error") }
        }
        | Result.Err(e) { io.println("Error") }
    io.println("")
    
    io.println("3. ✅ Nested generics in function returns:")
    get_nested = () Result<Option<i32>, string> {
        Result.Ok(Option.Some(100))
    }
    nested = get_nested()
    nested ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(v) {
                    io.println("   Result<Option<i32>, string> value: ${v}")
                }
                | Option.None { io.println("None") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    io.println("")
    
    io.println("4. ✅ Display formatting for generic types:")
    io.println("   Types now display as 'HashMap<string, Option<i32>>'")
    io.println("   Instead of 'HashMap<String, Generic { name: \"Option\", type_args: [I32] }>'")
    io.println("")
    
    io.println("==== All improvements verified! ====")
}