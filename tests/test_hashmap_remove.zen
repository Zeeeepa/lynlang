// Test HashMap.remove() functionality
{io, Option, get_default_allocator, HashMap} = @std
{io, Option, get_default_allocator, HashMap} = @std

main = () i32 {
    // Create a HashMap
    alloc = get_default_allocator()
    map = HashMap<i32, i32>(alloc)
    
    // Add some values
    map.insert(5, 100)
    map.insert(10, 200)
    map.insert(15, 300)
    
    // Check size before remove
    sizeBefore = map.size()
    io.println("Size before remove: ${sizeBefore}")
    
    // Remove a key that exists
    result = map.remove(10)
    result ?
        | Option.Some(value) { io.println("Removed key 10 with value: ${value}") }
        | Option.None { io.println("Key 10 not found") }
    
    // Check size after remove
    sizeAfter = map.size()
    io.println("Size after remove: ${sizeAfter}")
    
    // Try to get the removed key
    getResult = map.get(10)
    getResult ?
        | Option.Some(value) { io.println("ERROR: Key 10 still exists with value: ${value}") }
        | Option.None { io.println("Key 10 correctly removed") }
    
    // Remove a key that doesn't exist
    result2 = map.remove(999)
    result2 ?
        | Option.Some(value) { io.println("ERROR: Removed non-existent key 999 with value: ${value}") }
        | Option.None { io.println("Key 999 correctly not found") }
    
    // Final size should be 2
    finalSize = map.size()
    io.println("Final size: ${finalSize}")
    
    finalSize == 2 ?
        | true { 0 }
        | false { 1 }
}