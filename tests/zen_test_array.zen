// Consolidated Array tests
// Combines functionality from multiple test_array_*.zen files

{io, get_default_allocator, Array} = @std

// Test 1: Basic Array creation and operations
test_basic_array = () void {
    io.println("=== Test 1: Basic Array ===")
    
    io.println("Creating array...")
    alloc = get_default_allocator()
    arr: Array<i32> = Array.new(alloc, 10, 0)
    io.println("Array created")
    
    io.println("Getting length...")
    len = arr.len()
    io.println("Initial length: ${len}")
    
    io.println("Pushing first element...")
    arr.push(42)
    io.println("Pushed 42")
    
    len2 = arr.len()
    io.println("Length after push: ${len2}")
    
    io.println("Getting element at index 0...")
    val = arr.get(0)
    io.println("Value at index 0: ${val}")
}

// Test 2: Array with multiple elements
test_array_multiple = () void {
    io.println("=== Test 2: Multiple Elements ===")
    
    alloc = get_default_allocator()
    arr: Array<i32> = Array.new(alloc, 10, 0)
    
    // Push multiple values
    arr.push(10)
    arr.push(20)
    arr.push(30)
    
    io.println("Pushed 3 elements")
    io.println("Length: ${arr.len()}")
    
    // Get and print each element
    (0..arr.len()).loop((i) {
        val = arr.get(i)
        io.println("arr[${i}] = ${val}")
    })
}

// Test 3: Array with strings
test_string_array = () void {
    io.println("=== Test 3: String Array ===")
    
    alloc = get_default_allocator()
    arr: Array<String> = Array.new(alloc, 10, "")
    
    arr.push("hello")
    arr.push("world")
    arr.push("zen")
    
    io.println("String array length: ${arr.len()}")
    
    (0..arr.len()).loop((i) {
        val = arr.get(i)
        io.println("arr[${i}] = ${val}")
    })
}

// Test 4: Array with generic types
test_generic_array = () void {
    io.println("=== Test 4: Generic Array ===")
    
    alloc = get_default_allocator()
    
    // Test with i32
    int_arr: Array<i32> = Array.new(alloc, 3, 0)
    int_arr.push(1)
    int_arr.push(2)
    int_arr.push(3)
    
    io.println("Integer array:")
    (0..int_arr.len()).loop((i) {
        val = int_arr.get(i)
        io.println("  int_arr[${i}] = ${val}")
    })
    
    // Test with f64
    float_arr: Array<f64> = Array.new(alloc, 2, 0.0)
    float_arr.push(3.14)
    float_arr.push(2.71)
    
    io.println("Float array:")
    (0..float_arr.len()).loop((i) {
        val = float_arr.get(i)
        io.println("  float_arr[${i}] = ${val}")
    })
}

// Test 5: Array methods
test_array_methods = () void {
    io.println("=== Test 5: Array Methods ===")
    
    alloc = get_default_allocator()
    arr: Array<i32> = Array.new(alloc, 5, 0)
    
    // Test push
    arr.push(100)
    arr.push(200)
    arr.push(300)
    
    io.println("After push - Length: ${arr.len()}")
    
    // Test get
    val1 = arr.get(0)
    val2 = arr.get(1)
    val3 = arr.get(2)
    
    io.println("Values: ${val1}, ${val2}, ${val3}")
    
    // Test pop
    popped = arr.pop()
    popped ?
        | Some(val) { io.println("Popped: ${val}") }
        | None { io.println("Nothing to pop") }
    
    io.println("After pop - Length: ${arr.len()}")
}

// Test 6: Array with Option elements
test_option_array = () void {
    io.println("=== Test 6: Option Array ===")
    
    alloc = get_default_allocator()
    arr: Array<Option<i32>> = Array.new(alloc, 3, None)
    
    arr.push(Some(42))
    arr.push(None)
    arr.push(Some(84))
    
    io.println("Option array length: ${arr.len()}")
    
    (0..arr.len()).loop((i) {
        opt = arr.get(i)
        opt ?
            | Some(val) { io.println("arr[${i}] = Some(${val})") }
            | None { io.println("arr[${i}] = None") }
    })
}

main = () void {
    io.println("=== Array Type Tests ===")
    io.println("")
    
    test_basic_array()
    io.println("")
    
    test_array_multiple()
    io.println("")
    
    test_string_array()
    io.println("")
    
    test_generic_array()
    io.println("")
    
    test_array_methods()
    io.println("")
    
    test_option_array()
    io.println("")
    
    io.println("=== Array Tests Complete ===")
}
