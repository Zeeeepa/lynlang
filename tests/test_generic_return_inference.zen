// Test automatic return type inference for nested generic types
{ io, Result, Option } = @std

// Function with implicit Result<i32, string> return
simple_result = () {
    Result.Ok(42)
}

// Function with implicit Result<Result<i32, string>, string> return
double_nested = () {
    Result.Ok(Result.Ok(100))
}

// Function with implicit Result<Option<i32>, string> return  
mixed_nested = () {
    Result.Ok(Option.Some(200))
}

// Function with implicit Option<Result<i32, string>> return
option_result = () {
    Option.Some(Result.Ok(300))
}

// Function with triple nested generics
triple_nested = () {
    Result.Ok(Result.Ok(Result.Ok(999)))
}

// Function that uses other implicit return functions
chain_functions = () {
    Result.Ok(84)  // Just return a simple value for now
}

main = () void {
    io.println("=== Testing Return Type Inference ===")
    
    // Test simple Result
    res1 = simple_result()
    res1 ?
        | Result.Ok(val) { io.println("Simple: ${val}") }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test double nested  
    res2 = double_nested()
    res2 ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(val) { io.println("Double nested: ${val}") }
                | Result.Err(e) { io.println("Inner error: ${e}") }
        }
        | Result.Err(e) { io.println("Outer error: ${e}") }
    
    // Test mixed nested
    res3 = mixed_nested()
    res3 ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(val) { io.println("Mixed nested: ${val}") }
                | Option.None { io.println("None value") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test Option<Result>
    opt4 = option_result()
    opt4 ?
        | Option.Some(res) {
            res ?
                | Result.Ok(val) { io.println("Option<Result>: ${val}") }
                | Result.Err(e) { io.println("Error: ${e}") }
        }
        | Option.None { io.println("None") }
    
    // Test triple nested
    res5 = triple_nested()
    res5 ?
        | Result.Ok(level2) {
            level2 ?
                | Result.Ok(level3) {
                    level3 ?
                        | Result.Ok(val) { io.println("Triple nested: ${val}") }
                        | Result.Err(e) { io.println("L3 error: ${e}") }
                }
                | Result.Err(e) { io.println("L2 error: ${e}") }
        }
        | Result.Err(e) { io.println("L1 error: ${e}") }
    
    // Test function chaining
    res6 = chain_functions()
    res6 ?
        | Result.Ok(val) { io.println("Chained: ${val}") }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    io.println("=== All tests passed! ===")
}