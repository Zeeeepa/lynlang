// Core feature test suite for Zen based on LANGUAGE_SPEC.zen
{ io } = @std

// Type definitions (must be at top level)
Point: {
    x:: f64,
    y:: f64
}

Shape: Circle | Rectangle

Option<T>: Some(T) | None

main = () void {
    io.println("=== Testing Core Features from LANGUAGE_SPEC.zen ===")
    
    // 1. Variable declarations (lines 299-306)
    io.println("\n1. Variable Declarations:")
    x: i32
    x = 10
    y = 20
    z ::= 30
    z = 40
    io.println("   Forward decl: x = ${x}")
    io.println("   Immutable: y = ${y}")
    io.println("   Mutable: z = ${z}")
    
    // 2. String interpolation
    io.println("\n2. String Interpolation:")
    name = "Zen"
    version = 1
    io.println("   Language: ${name} v${version}")
    io.println("   Calculation: 5 + 3 = ${5 + 3}")
    
    // 3. Structs (lines 117-120)
    io.println("\n3. Structs:")
    p = Point { x: 100.0, y: 200.0 }
    io.println("   Point: (${p.x}, ${p.y})")
    p.x = 150.0
    io.println("   After mutation: (${p.x}, ${p.y})")
    
    // 4. Enums (line 165)
    io.println("\n4. Simple Enums:")
    shape = Shape.Circle
    shape ?
        | Circle { io.println("   It's a Circle") }
        | Rectangle { io.println("   It's a Rectangle") }
    
    // 5. Ranges and loops (lines 431-439)
    io.println("\n5. Ranges and Loops:")
    io.print("   Range 0..5: ")
    (0..5).loop((i) {
        io.print("${i} ")
    })
    io.println("")
    
    // 6. Pattern matching (lines 352-361)
    io.println("\n6. Pattern Matching:")
    value = 10
    is_positive = value > 0
    is_positive ?
        | true { io.println("   Value is positive") }
        | false { io.println("   Value is not positive") }
    
    // 7. Option type (lines 109-110, 462-473)
    io.println("\n7. Option Type:")
    
    maybe: Option<i32> = Option.Some(42)
    maybe ?
        | Some(v) { io.println("   Has value: ${v}") }
        | None { io.println("   No value") }
    
    nothing: Option<i32> = Option.None
    nothing ?
        | Some(v) { io.println("   Should not print: ${v}") }
        | None { io.println("   Correctly None") }
    
    io.println("\n=== Core Features Test Complete ===")
}