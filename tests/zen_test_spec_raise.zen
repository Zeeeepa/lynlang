// Test .raise() error propagation from LANGUAGE_SPEC.zen
{ io } = @std

// Define Result type as per spec
Result<T, E>: Ok(T) | Err(E)

// Function that might fail
divide = (a: f64, b: f64) Result<f64, string> {
    b == 0.0 ?
        | true { return Err("Division by zero") }
        | false { return Ok(a / b) }
}

// Function using .raise() for error propagation
calculate = () Result<f64, string> {
    // If divide returns Err, this function returns early with that error
    result1 = divide(10.0, 2.0).raise()  
    result2 = divide(result1, 2.0).raise()
    return Ok(result2)
}

main = () void {
    io.println("Testing .raise() error propagation...")
    
    result = calculate()
    result ?
        | Ok(v) { io.println("Success: ${v}") }
        | Err(e) { io.println("Error: ${e}") }
}