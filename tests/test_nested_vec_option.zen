// Test nested generics: Vec<Option<i32>, size>
{ io, Result, Option } = @std

main = () void {
    io.println("Testing Vec<Option<i32>, 3>")
    
    // Create Vec of Option<i32>
    vec = Vec<Option<i32>, 3>()
    
    // Push Some values
    vec.push(Option.Some(100))
    vec.push(Option.None)
    vec.push(Option.Some(200))
    
    length = vec.len()
    io.println("Length: ${length}")
    
    // Get and pattern match
    opt1: Option<i32> = vec.get(0)
    opt1 ?
        | Some(val) { io.println("vec[0] = Some(${val})") }
        | None { io.println("vec[0] = None") }
    
    opt2: Option<i32> = vec.get(1)
    opt2 ?
        | Some(val) { io.println("vec[1] = Some(${val})") }
        | None { io.println("vec[1] = None") }
    
    opt3: Option<i32> = vec.get(2)
    opt3 ?
        | Some(val) { io.println("vec[2] = Some(${val})") }
        | None { io.println("vec[2] = None") }
}
