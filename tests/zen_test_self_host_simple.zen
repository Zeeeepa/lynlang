// Simple self-hosting test
// Tests basic compilation pipeline with the new import syntax

// Import standard library modules (no comptime needed!)
{ core } = @std.core
{ io } = @std.io
{ fs } = @std.fs
{ string } = @std.string

// Test data structure to verify imports work
TestResult: {
    name: string,
    passed: bool,
    message: string,
}

// Create a test result
create_test_result = (name: string, passed: bool) TestResult   {
    return TestResult {
        name: name,
        passed: passed,
        message: passed ? "PASS" : "FAIL",
    }
}

// Run a simple test
run_test = (name: string, test_fn: () bool) TestResult {
    io.print("Running test: ")
    io.print(name)
    io.print("... ")
    
    result := test_fn()
    
    if (result) {
        io.print("✓ PASS\n")
    } else {
        io.print("✗ FAIL\n")
    }
    
    return create_test_result(name, result)
}

// Test basic string operations
test_strings = () bool   {
    s1 := "Hello"
    s2 := ", Zen!"
    combined := string.concat(s1, s2)
    expected := "Hello, Zen!"
    
    return string.equal(combined, expected)
}

// Test basic math operations
test_math = () bool   {
    x := 10
    y := 20
    sum := x + y
    
    return sum == 30
}

// Test control flow
test_control_flow = () bool   {
    value := 42
    
    result := if (value > 40) {
        true
    } else {
        false
    }
    
    return result
}

// Main test runner
main = () i32   {
    io.print("=== Zen Self-Hosting Test Suite ===\n")
    io.print("Testing with new import syntax (no comptime)\n\n")
    
    tests_passed := 0
    tests_total := 0
    
    // Run tests
    results := [
        run_test("String Operations", test_strings),
        run_test("Math Operations", test_math),
        run_test("Control Flow", test_control_flow),
    ]
    
    // Count results
    loop i in 0..3 {
        tests_total = tests_total + 1
        if (results[i].passed) {
            tests_passed = tests_passed + 1
        }
    }
    
    // Print summary
    io.print("\n=== Test Summary ===\n")
    io.print("Passed: ")
    io.print_int(tests_passed)
    io.print(" / ")
    io.print_int(tests_total)
    io.print("\n")
    
    // Return exit code
    return tests_passed == tests_total ? 0 : 1
}