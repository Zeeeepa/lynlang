// Test triple nested generics: Result<Option<Result<T, E>>, E>
{ io, Result, Option , get_default_allocator} = @std

test_function = () Result<Option<Result<i32, StaticString>>, StaticString> {
    // Triple nesting!
    inner_result = Result.Ok(42)
    middle_option = Option.Some(inner_result)
    return Result.Ok(middle_option)
}

main = () void {
    alloc = get_default_allocator()
    io.println("Testing Result<Option<Result<i32, StaticString>>, StaticString>")
    
    result = test_function()
    
    result ?
        | Ok(opt) {
            opt ?
                | Some(inner_res) {
                    inner_res ?
                        | Ok(val) { io.println("Got value: ${val}") }
                        | Err(msg) { io.println("Inner error: ${msg}") }
                }
                | None { io.println("Got None") }
        }
        | Err(msg) {
            io.println("Outer error: ${msg}")
        }
}
