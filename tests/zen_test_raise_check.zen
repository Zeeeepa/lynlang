// Test .raise() error propagation - LANGUAGE_SPEC.zen requirement

{ io } = @std

// Result type
Result<T, E>: Ok(T) | Err(E)

// Function that can fail
divide = (a: i32, b: i32) Result<i32, string> {
    b == 0 ?
        | true { return Err("Division by zero") }
        | false { return Ok(a / b) }
}

// Function using .raise() for error propagation
calculate = () Result<i32, string> {
    io.println("Testing .raise() propagation")
    
    // This should propagate the error if divide fails
    result1 = divide(10, 2).raise()
    io.println("10 / 2 = ")
    io.println(result1)
    
    // This would cause error propagation
    // result2 = divide(10, 0).raise()  // Should return early with error
    
    return Ok(result1)
}

main = () void {
    io.println("Testing Error Propagation with .raise()")
    io.println("")
    
    result = calculate()
    result ?
        | Ok(val) { 
            io.println("Success: ")
            io.println(val)
        }
        | Err(e) { 
            io.println("Error occurred")
        }
    
    io.println("")
    io.println("Raise Test Complete!")
}