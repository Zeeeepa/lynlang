// Comprehensive demonstration of all working features from LANGUAGE_SPEC.zen
// This test verifies the implementation is complete and functional

{ io, math } = @std

// ============================================================================
// CORE TYPES FROM SPEC (lines 109-113)
// ============================================================================
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

// ============================================================================
// STRUCTS (lines 117-120, 130-133, 146-149)
// ============================================================================
Point: {
    x:: f64,    // mutable field
    y:: f64     // mutable field
}

Circle: {
    center: Point,
    radius: f64,
}

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

// ============================================================================
// TRAITS (lines 123-128, 136-143, 153-162)
// ============================================================================
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// ============================================================================
// ENUM WITH TRAIT REQUIREMENT (lines 165-168)
// ============================================================================
Shape: Circle | Rectangle
Shape.requires(Geometric)

// ============================================================================
// ERROR HANDLING (lines 205-211)
// ============================================================================
divide_safe = (a: i32, b: i32) Result<i32, string> {
    b ?
        | 0 { return Err("Division by zero") }
        | _ { return Ok(a / b) }
}

// ============================================================================
// MAIN FUNCTION - Demonstrates all features (lines 297-488)
// ============================================================================
main = () i32 {
    io.println("=== ZEN LANGUAGE SPEC WORKING FEATURES ===")
    io.println("")
    
    // ========================================================================
    // 1. VARIABLE DECLARATIONS (lines 298-306)
    // ========================================================================
    io.println("1. Variable Declarations:")
    
    a: i32          // forward declaration
    a = 10
    b = 20          // immutable assignment
    c: i32 = 30     // immutable with type
    d:: i32         // mutable forward declaration  
    d = 40
    e ::= 50        // mutable assignment
    f:: i32 = 60    // mutable with type
    
    io.println("  Immutable: a=${a}, b=${b}, c=${c}")
    io.println("  Mutable: d=${d}, e=${e}, f=${f}")
    
    // Demonstrate mutation
    d = 45
    e = 55
    f = 65
    io.println("  After mutation: d=${d}, e=${e}, f=${f}")
    io.println("")
    
    // ========================================================================
    // 2. PATTERN MATCHING WITH ? (lines 352-361, 453-459, 461-473)
    // ========================================================================
    io.println("2. Pattern Matching with ?:")
    
    // Boolean pattern (line 352-354)
    is_ready = true
    is_ready ? { 
        io.println("  Game is ready!")
    }
    
    // If-else pattern (lines 358-361)
    has_data = false
    has_data ?
        | true { io.println("  Processing data...") }
        | false { io.println("  No data to process") }
    
    // Option handling (lines 462-473)
    maybe_radius: Option<f64> = Some(5.5)
    maybe_radius ?
        | Some(r) {
            circle = Circle {
                center: Point { x: 100.0, y: 100.0 },
                radius: r,
            }
            io.println("  Created circle with radius ${r}")
        }
        | None {
            io.println("  No radius provided")
        }
    io.println("")
    
    // ========================================================================
    // 3. STRUCTS AND TRAITS (lines 364-370)
    // ========================================================================
    io.println("3. Structs and Traits:")
    
    circle = Circle { 
        center: Point { x: 0, y: 0 }, 
        radius: 10 
    }
    io.println("  Circle area: ${circle.area()}")
    io.println("  Circle perimeter: ${circle.perimeter()}")
    
    rect = Rectangle { 
        top_left: Point { x: 0, y: 0 },
        bottom_right: Point { x: 10, y: 5 }
    }
    io.println("  Rectangle area: ${rect.area()}")
    io.println("  Rectangle perimeter: ${rect.perimeter()}")
    io.println("")
    
    // ========================================================================
    // 4. RANGES AND LOOPS (lines 432-439, 453-459)
    // ========================================================================
    io.println("4. Ranges and Loops:")
    
    // Range iteration (lines 432-434)
    io.println("  Count to 5:")
    (0..5).loop((i) {
        io.println("    ${i}")
    })
    
    // Infinite loop with break (lines 453-459)
    io.println("  Loop with break:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { 
                io.println("    Breaking at ${counter}")
                break 
            }
            | false { io.println("    Count: ${counter}") }
    })
    io.println("")
    
    // ========================================================================
    // 5. RESULT TYPE (lines 205-211)
    // ========================================================================
    io.println("5. Result Type:")
    
    // Test successful case
    result1 = divide_safe(10, 2)
    result1 ?
        | Ok(val) { io.println("  10 / 2 = ${val}") }
        | Err(e) { io.println("  Division failed: ${e}") }
    
    // Test error case
    error_result = divide_safe(10, 0)
    error_result ?
        | Ok(val) { io.println("  Division result: ${val}") }
        | Err(e) { io.println("  Division error: ${e}") }
    io.println("")
    
    // ========================================================================
    // 6. POINTERS (lines 364-372) - Explicit pointer types
    // ========================================================================
    io.println("6. Explicit Pointer Types:")
    
    shape_circle = Circle { center: Point { x: 50, y: 50 }, radius: 25 }
    circle_ptr: Ptr<Circle> = shape_circle.ref()
    circle_mut: MutPtr<Circle> = shape_circle.mut_ref()
    
    io.println("  Circle via pointer area: ${circle_ptr.val.area()}")
    circle_mut.val.radius = 30
    io.println("  After mutation via pointer: ${circle_mut.val.area()}")
    io.println("  Pointer address: ${circle_ptr.addr}")
    io.println("")
    
    // ========================================================================
    // 7. STRING INTERPOLATION
    // ========================================================================
    io.println("7. String Interpolation:")
    name = "Zen"
    version = 2025
    io.println("  Welcome to ${name} language v${version}!")
    io.println("")
    
    io.println("=== ALL CORE FEATURES WORKING ===")
    return 0
}