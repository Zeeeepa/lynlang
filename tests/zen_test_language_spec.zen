// Comprehensive test aligned with LANGUAGE_SPEC.zen
// Testing all features mentioned in the spec that should be working

{ io } = @std

// Test struct definition (from line 117-120 of spec)
Point: {
    x: f64,
    y: f64
}

// Test function definitions
add = (a: i32, b: i32) i32 {
    return a + b
}

// Main function - tests key features from spec
main = () void {
    io.println("=== LANGUAGE_SPEC.zen Feature Tests ===")
    io.println("")
    
    // From spec lines 299-306: Variable declarations
    io.println("1. Variable Declaration Forms:")
    x = 10                  // Immutable assignment (line 301)
    y = 20                  // Immutable without type annotation (line 302)
    v ::= 30               // Mutable assignment (line 305)
    u :: i32 = 40          // Mutable with type (line 306)
    
    // Test mutation
    v = v + 5
    u = u + 10
    
    io.println("Variables initialized successfully")
    io.println("")
    
    // From spec lines 352-361: Boolean pattern matching  
    io.println("2. Pattern Matching (? operator):")
    is_ready = true
    is_ready ? { 
        io.println("System is ready (line 353-355 pattern)") 
    }
    
    has_data = false
    has_data ?
        | true { io.println("Has data") }
        | false { io.println("No data (line 359-361 pattern)") }
    io.println("")
    
    // From spec lines 453-460: Infinite loop with break
    io.println("3. Loop constructs:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { 
                io.println("Breaking loop at counter > 3")
                break 
            }
            | false { }
    })
    io.println("")
    
    // From spec line 364-367: Struct creation
    io.println("4. Struct creation:")
    circle_center = Point { x: 100.0, y: 100.0 }
    io.println("Created Point struct successfully")
    io.println("")
    
    // Function calls
    io.println("5. Function calls:")
    result = add(15, 25)
    io.println("add(15, 25) executed successfully")
    io.println("")
    
    // From spec lines 60-62: Comparisons for pattern matching
    io.println("6. Comparison operators:")
    is_greater = 10 > 5
    is_equal = 10 == 10
    
    is_greater ?
        | true { io.println("10 > 5 is true") }
        | false { io.println("10 > 5 is false") }
    
    is_equal ?
        | true { io.println("10 == 10 is true") }
        | false { io.println("10 == 10 is false") }
    io.println("")
    
    // Arithmetic operations
    io.println("7. Arithmetic operations:")
    sum = x + y
    diff = u - v
    product = 5 * 6
    quotient = 100 / 4
    io.println("Basic arithmetic works")
    io.println("")
    
    // Nested pattern matching (spec lines 107-118)
    io.println("8. Nested pattern matching:")
    value = 15
    is_positive = value > 0
    is_positive ?
        | true {
            is_large = value > 10
            is_large ?
                | true { io.println("Value is large and positive") }
                | false { io.println("Value is small but positive") }
        }
        | false {
            io.println("Value is not positive")
        }
    io.println("")
    
    io.println("=== All LANGUAGE_SPEC.zen tests completed ===")
}