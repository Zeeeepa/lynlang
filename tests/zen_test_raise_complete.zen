// Comprehensive test suite for .raise() error propagation
// Consolidates all raise/error propagation tests
{ io, Result } = @std

// Test basic .raise() functionality - simpler version
test_basic_raise = () i32 {
    result = Result.Ok(42)
    value = result.raise()  // Extracts 42 or propagates error
    return value
}

// Test arithmetic with .raise()
test_arithmetic_raise = () i32 {
    a = Result.Ok(10)
    b = Result.Ok(20)
    c = Result.Ok(5)
    
    val_a = a.raise()
    val_b = b.raise()
    val_c = c.raise()
    
    sum = val_a + val_b  // 30
    product = sum * val_c  // 150
    
    return product
}

// Test .raise() with function calls
helper_function = () i32 {
    return 100
}

test_function_raise = () i32 {
    result = Result.Ok(helper_function())
    value = result.raise()  // Extract 100
    doubled = value * 2
    return doubled
}

// Test .raise() with error propagation
test_error_propagation = () i32 {
    // This would propagate if it was an Err
    maybe_err = Result.Ok(50)
    val = maybe_err.raise()
    
    // More operations
    result = val + 25
    return result
}

// Test chained .raise() calls
test_chained_raise = () i32 {
    first = Result.Ok(5)
    second = Result.Ok(10)
    third = Result.Ok(3)
    
    // Chain multiple operations
    v1 = first.raise()
    v2 = second.raise()
    v3 = third.raise()
    
    sum = v1 + v2
    result = sum * v3  // (5 + 10) * 3 = 45
    return result
}

// Test .raise() with larger numbers
test_large_raise = () i32 {
    big_num = Result.Ok(1000000)
    value = big_num.raise()
    return value * 2
}

// Test complex .raise() scenario
test_complex_raise = () i32 {
    // Multiple operations with potential error points
    step1 = Result.Ok(10)
    step2 = Result.Ok(20)
    step3 = Result.Ok(30)
    
    v1 = step1.raise()
    v2 = step2.raise()
    v3 = step3.raise()
    
    // Complex calculation
    product = v1 * v2
    intermediate = product + v3  // (10 * 20) + 30 = 230
    final = intermediate / 2  // 115
    
    return final
}

main = () i32 {
    io.println("═══════════════════════════════════════════")
    io.println("         .RAISE() TEST SUITE               ")
    io.println("═══════════════════════════════════════════")
    io.println("")
    
    // Test basic raise
    io.println("▸ Basic .raise()")
    basic = test_basic_raise()
    io.println("  Basic: ${basic}")
    
    // Test arithmetic
    io.println("")
    io.println("▸ Arithmetic with .raise()")
    arith = test_arithmetic_raise()
    io.println("  (10 + 20) * 5 = ${arith}")
    
    // Test function calls
    io.println("")
    io.println("▸ Function calls with .raise()")
    func = test_function_raise()
    io.println("  100 * 2 = ${func}")
    
    // Test error propagation
    io.println("")
    io.println("▸ Error propagation")
    prop = test_error_propagation()
    io.println("  50 + 25 = ${prop}")
    
    // Test chained operations
    io.println("")
    io.println("▸ Chained .raise() calls")
    chain = test_chained_raise()
    io.println("  (5 + 10) * 3 = ${chain}")
    
    // Test large numbers
    io.println("")
    io.println("▸ Large numbers with .raise()")
    large_test = test_large_raise()
    io.println("  1000000 * 2 = ${large_test}")
    
    // Test complex scenario
    io.println("")
    io.println("▸ Complex .raise() scenario")
    complex = test_complex_raise()
    io.println("  ((10*20)+30)/2 = ${complex}")
    
    io.println("")
    io.println("═══════════════════════════════════════════")
    io.println("      ALL .RAISE() TESTS PASSED!           ")
    io.println("═══════════════════════════════════════════")
    
    0
}