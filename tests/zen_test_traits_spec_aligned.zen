// Test file aligned with LANGUAGE_SPEC.zen lines 123-163
// Testing trait definitions and implementations

{ io, math } = @std

// From LANGUAGE_SPEC.zen lines 123-127
// Trait definition - methods that types can implement
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// From LANGUAGE_SPEC.zen lines 130-133
Circle: {
    center: { x: f64, y: f64 },
    radius: f64,
}

// From LANGUAGE_SPEC.zen lines 135-143
// Implement trait for type using .implements()
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

// From LANGUAGE_SPEC.zen lines 146-149
Rectangle: {
    top_left: { x: f64, y: f64 },
    bottom_right: { x: f64, y: f64 },
}

// From LANGUAGE_SPEC.zen lines 151-162
Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// From LANGUAGE_SPEC.zen lines 165-168
// Enum type (sum type) that requires all variants to implement Geometric
Shape: Circle | Rectangle
Shape.requires(Geometric)

main = () void {
    // Test Circle
    circle = Circle { 
        center: { x: 0.0, y: 0.0 }, 
        radius: 5.0 
    }
    io.println("Circle area: ${circle.area()}")
    io.println("Circle perimeter: ${circle.perimeter()}")
    
    // Test Rectangle
    rect = Rectangle {
        top_left: { x: 0.0, y: 0.0 },
        bottom_right: { x: 10.0, y: 5.0 },
    }
    io.println("Rectangle area: ${rect.area()}")
    io.println("Rectangle perimeter: ${rect.perimeter()}")
}