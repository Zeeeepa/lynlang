// Comprehensive nested generics test without string payloads
{ io, Result, Option } = @std

test_double_nested_result = () i32 {
    io.println("Test 1: Double nested")
    get_double_nested = () Result<Result<i32, string>, string> {
        Result.Ok(Result.Ok(100))
    }
    outer_result = get_double_nested()
    inner_result = outer_result.raise()
    value = inner_result.raise()
    io.println("  Got: ${value}")
    return 0
}

test_triple_nested_result = () i32 {
    io.println("Test 2: Triple nested")
    get_triple_nested = () Result<Result<Result<i32, string>, string>, string> {
        Result.Ok(Result.Ok(Result.Ok(200)))
    }
    level1 = get_triple_nested()
    level2 = level1.raise()
    level3 = level2.raise()
    value = level3.raise()
    io.println("  Got: ${value}")
    return 0
}

test_option_result = () i32 {
    io.println("Test 3: Option<Result>")
    get_option_result = () Option<Result<i32, string>> {
        Option.Some(Result.Ok(400))
    }
    opt = get_option_result()
    opt ?
        | Option.Some(result) {
            val = result.raise()
            io.println("  Got: ${val}")
        }
        | Option.None { 
            io.println("  Got None") 
        }
    return 0
}

main = () void {
    test_double_nested_result()
    test_triple_nested_result()
    test_option_result()
    io.println("All tests passed!")
}