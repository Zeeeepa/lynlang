// Complete test of all currently working features in Zen
// Based on LANGUAGE_SPEC.zen
io = @std.io
math = @std.math

// ============================================================================
// ENUMS AND OPTIONS
// ============================================================================
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

// ============================================================================
// STRUCTS
// ============================================================================
Point: {
    x:: f64,  // mutable field
    y:: f64
}

Circle: {
    center: Point,
    radius: f64
}

Rectangle: {
    top_left: Point,
    bottom_right: Point
}

// Simple enum
Shape: Circle | Rectangle

// ============================================================================
// TRAITS
// ============================================================================
Geometric: {
    area: (self) f64,
    perimeter: (self) f64
}

// Implement trait for Circle
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    }
})

// Implement trait for Rectangle  
Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    }
})

// ============================================================================
// FUNCTIONS
// ============================================================================
calculate_distance = (p1: Point, p2: Point) f64 {
    dx = p2.x - p1.x
    dy = p2.y - p1.y
    return math.sqrt(dx * dx + dy * dy)
}

// Function returning Result
safe_divide = (a: f64, b: f64) Result<f64, string> {
    b == 0.0 ?
        | true { return Result.Err("Division by zero") }
        | false { return Result.Ok(a / b) }
}

// ============================================================================
// MAIN FUNCTION
// ============================================================================
main = () void {
    io.println("=== Zen Language Feature Test ===")
    io.println("")
    
    // --------------------------------------------------------------------
    // Variable declarations
    // --------------------------------------------------------------------
    io.println("--- Variable Declarations ---")
    x = 10                    // immutable
    y ::= 20                  // mutable
    z: i32 = 30              // immutable with type
    w :: i32 = 40            // mutable with type
    io.println("x=${x}, y=${y}, z=${z}, w=${w}")
    
    // Mutate mutable variables
    y = 25
    w = 45
    io.println("After mutation: y=${y}, w=${w}")
    io.println("")
    
    // --------------------------------------------------------------------
    // Structs
    // --------------------------------------------------------------------
    io.println("--- Structs ---")
    point1 = Point { x: 3.0, y: 4.0 }
    point2 = Point { x: 6.0, y: 8.0 }
    io.println("Point1: (${point1.x}, ${point1.y})")
    io.println("Point2: (${point2.x}, ${point2.y})")
    io.println("Distance: ${calculate_distance(point1, point2)}")
    
    // Mutable struct fields
    point1.x = 5.0
    point1.y = 7.0
    io.println("Point1 after mutation: (${point1.x}, ${point1.y})")
    io.println("")
    
    // --------------------------------------------------------------------
    // Trait implementations
    // --------------------------------------------------------------------
    io.println("--- Traits ---")
    circle = Circle {
        center: Point { x: 0.0, y: 0.0 },
        radius: 5.0
    }
    io.println("Circle area: ${circle.area()}")
    io.println("Circle perimeter: ${circle.perimeter()}")
    
    rect = Rectangle {
        top_left: Point { x: 0.0, y: 0.0 },
        bottom_right: Point { x: 10.0, y: 5.0 }
    }
    io.println("Rectangle area: ${rect.area()}")
    io.println("Rectangle perimeter: ${rect.perimeter()}")
    io.println("")
    
    // --------------------------------------------------------------------
    // Option type
    // --------------------------------------------------------------------
    io.println("--- Option Type ---")
    some_value = Option.Some(42)
    none_value: Option<i32> = Option.None
    
    some_value ?
        | Some(v) { io.println("Some value: ${v}") }
        | None { io.println("No value") }
    
    none_value ?
        | Some(v) { io.println("Some value: ${v}") }
        | None { io.println("No value (as expected)") }
    io.println("")
    
    // --------------------------------------------------------------------
    // Result type
    // --------------------------------------------------------------------
    io.println("--- Result Type ---")
    result1 = safe_divide(10.0, 2.0)
    result2 = safe_divide(10.0, 0.0)
    
    result1 ?
        | Ok(v) { io.println("10 / 2 = ${v}") }
        | Err(e) { io.println("Error: ${e}") }
    
    result2 ?
        | Ok(v) { io.println("Result: ${v}") }
        | Err(e) { io.println("10 / 0 = Error: ${e}") }
    io.println("")
    
    // --------------------------------------------------------------------
    // Pattern matching
    // --------------------------------------------------------------------
    io.println("--- Pattern Matching ---")
    
    // Boolean pattern matching
    flag = true
    flag ?
        | true { io.println("Flag is true") }
        | false { io.println("Flag is false") }
    
    // Number comparisons
    value = 5
    (value > 3) ?
        | true { io.println("${value} is greater than 3") }
        | false { io.println("${value} is not greater than 3") }
    io.println("")
    
    // --------------------------------------------------------------------
    // Loops and ranges
    // --------------------------------------------------------------------
    io.println("--- Loops and Ranges ---")
    
    // Range loop
    io.println("Counting 0 to 4:")
    (0..5).loop((i) {
        io.println("  ${i}")
    })
    
    // Infinite loop with break
    io.println("Infinite loop with break:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        io.println("  Counter: ${counter}")
        (counter >= 3) ?
            | true { break }
            | false { }
    })
    io.println("")
    
    // --------------------------------------------------------------------
    // @this.defer
    // --------------------------------------------------------------------
    io.println("--- Defer ---")
    {
        io.println("Entering scope")
        @this.defer(io.println("Deferred: Exiting scope"))
        io.println("In scope")
        @this.defer(io.println("Deferred: Another cleanup"))
        io.println("Still in scope")
    }
    io.println("After scope")
    io.println("")
    
    // --------------------------------------------------------------------
    // String interpolation
    // --------------------------------------------------------------------
    io.println("--- String Interpolation ---")
    name = "Zen"
    version = 1.0
    io.println("Welcome to ${name} v${version}!")
    io.println("")
    
    io.println("=== All Tests Complete ===")
}