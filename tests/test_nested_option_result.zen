// Test nested Option<Result<T,E>> payload extraction
{ io } = @std
{ Result, Option } = @std

main = () void {
    // Test 1: Option<Result<i32, string>>
    io.println("Test 1: Option<Result<i32, string>>")
    
    inner = Result.Ok(99)
    outer = Option.Some(inner)
    
    outer ? 
        | Option.Some(inner_result) {
            inner_result ?
                | Result.Ok(value) {
                    io.println("Inner value: ${value}")  // Should print 99
                }
                | Result.Err(err) {
                    io.println("Inner error: ${err}")
                }
        }
        | Option.None {
            io.println("Option is None")
        }
    
    // Test 2: None case
    io.println("Test 2: None case")
    
    outer2 = Option.None
    
    outer2 ?
        | Option.Some(inner_result) {
            inner_result ?
                | Result.Ok(value) {
                    io.println("Inner value: ${value}")
                }
                | Result.Err(err) {
                    io.println("Inner error: ${err}")
                }
        }
        | Option.None {
            io.println("Option is None")  // Should print this
        }
    
    // Test 3: Result<Option<i32>, string>
    io.println("Test 3: Result<Option<i32>, string>")
    
    inner3 = Option.Some(77)
    outer3 = Result.Ok(inner3)
    
    outer3 ?
        | Result.Ok(inner_option) {
            inner_option ?
                | Option.Some(value) {
                    io.println("Inner value: ${value}")  // Should print 77
                }
                | Option.None {
                    io.println("Option is None")
                }
        }
        | Result.Err(err) {
            io.println("Outer error: ${err}")
        }
    
    // Test 4: Result with Option.None
    io.println("Test 4: Result with Option.None")
    
    inner4 = Option.None
    outer4 = Result.Ok(inner4)
    
    outer4 ?
        | Result.Ok(inner_option) {
            inner_option ?
                | Option.Some(value) {
                    io.println("Inner value: ${value}")
                }
                | Option.None {
                    io.println("Option is None")  // Should print this
                }
        }
        | Result.Err(err) {
            io.println("Outer error: ${err}")
        }
}