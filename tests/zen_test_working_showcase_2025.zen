// Showcase of WORKING features from LANGUAGE_SPEC.zen
// Run with: ./target/release/zen tests/zen_test_working_showcase_2025.zen

{ io } = @std

// Option type works!
Option<T>: Some(T) | None

// Structs work!
Point: {
    x:: f64,
    y:: f64 = 0
}

// UFC-compatible function
double = (n: i32) i32 {
    return n * 2
}

main = () void {
    io.println("=== Zen Language Working Features ===")
    io.println("")
    
    // 1. Variables (all forms from LANGUAGE_SPEC)
    io.println("1. Variables:")
    x = 10              // Immutable
    y: i32 = 20         // Typed immutable
    z ::= 30            // Mutable inferred
    w:: i32 = 40        // Mutable typed
    io.println(x)
    io.println(y)
    io.println(z)
    z = 35              // Reassignment works
    io.println(z)
    io.println(w)
    w = 45
    io.println(w)
    io.println("")
    
    // 2. Structs with mutable fields
    io.println("2. Structs:")
    p = Point { x: 1.0, y: 2.0 }
    io.println(p.x)
    io.println(p.y)
    p.x = 3.0           // Mutable field update
    p.y = 4.0
    io.println(p.x)
    io.println(p.y)
    io.println("")
    
    // 3. Option type with pattern matching
    io.println("3. Option Type:")
    maybe: Option<i32> = Some(42)
    maybe ?
        | Some(v) { io.println(v) }
        | None { io.println("empty") }
    
    nothing: Option<i32> = None
    nothing ?
        | Some(v) { io.println(v) }
        | None { io.println("empty") }
    io.println("")
    
    // 4. Pattern matching on booleans
    io.println("4. Pattern Matching:")
    flag = true
    flag ? { io.println("flag is true") }
    
    test = false
    test ?
        | true { io.println("yes") }
        | false { io.println("no") }
    io.println("")
    
    // 5. Loops and ranges
    io.println("5. Loops:")
    io.println("Range loop:")
    (0..3).loop((i) {
        io.println(i)
    })
    
    io.println("Infinite loop:")
    cnt ::= 0
    loop(() {
        cnt = cnt + 1
        cnt > 2 ?
            | true { break }
            | false { io.println(cnt) }
    })
    io.println("")
    
    // 6. UFC (Uniform Function Call)
    io.println("6. UFC:")
    val = 21
    result = val.double()
    io.println(result)
    io.println("")
    
    io.println("=== Complete ===")
}