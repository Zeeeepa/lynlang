// Test enum definitions from LANGUAGE_SPEC.zen - simplified version

{ Option } = @std.option

// Result type for error handling
Result<T, E>: Ok(T) | Err(E)

// Simple enum without payloads
FileMode: .ReadOnly | WriteOnly | ReadWrite | Append | CreateNew

// Simple Shape enum - without named fields for now
Shape: .Circle(f64) | Rectangle | Point

// Game entity enum from spec
GameEntity: .Player | Enemy | Powerup

// IO Error types from spec
IOError: .FileNotFound
    | PermissionDenied
    | AlreadyExists
    | BrokenPipe
    | UnexpectedEof
    | InvalidInput
    | WriteZero
    | ReadError
    | WriteError
    | Other

// Import io for testing
{ io } = @std

// Test basic enum usage
main = () void {
    io.println("Testing enum definitions from LANGUAGE_SPEC.zen")
    
    // Test simple enum variant creation with dot syntax
    entity = .Player  // Let type inference handle it
    io.println("Created .Player variant")
    
    // Test FileMode enum with dot syntax
    mode = .ReadOnly
    io.println("Created .ReadOnly variant")
    
    // Test IOError enum
    error = .FileNotFound
    io.println("Created .FileNotFound variant")
    
    io.println("Basic enum creation works!")
}