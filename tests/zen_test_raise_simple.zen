// Simple test for .raise() error propagation mechanism

{ io } = @std

// Basic Result type
SimpleResult<T>: Ok(T) | Err(string)

// Helper function that can succeed or fail
maybe_fail = (should_fail: bool) SimpleResult<i32> {
    should_fail ?
        | true { Err("operation failed") }
        | false { Ok(42) }
}

// Function using .raise() - should propagate errors
test_raise = (should_fail: bool) SimpleResult<i32> {
    // This line should:
    // 1. Call maybe_fail(should_fail)
    // 2. If result is Ok(value), continue with value
    // 3. If result is Err(e), return Err(e) immediately
    value = maybe_fail(should_fail).raise()
    
    // If we get here, the operation succeeded
    return Ok(value + 10)
}

main = () void {
    io.println("Testing simple .raise() mechanism...")
    
    // Test success case
    result1 = test_raise(false)
    result1 ?
        | Ok(val) { io.println("Success case: ${val}") }
        | Err(msg) { io.println("Unexpected error: ${msg}") }
    
    // Test error propagation case  
    result2 = test_raise(true)
    result2 ?
        | Ok(val) { io.println("Unexpected success: ${val}") }
        | Err(msg) { io.println("Error propagated: ${msg}") }
    
    io.println("Simple .raise() test completed!")
}