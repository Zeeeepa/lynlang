// Simplest possible nested generic test
{ io } = @std
{ Result } = @std

main = () void {
    // Create the simplest Result
    inner = Result.Ok(123)
    
    // Verify it works
    inner ? | Result.Ok(v) => io.println("Inner works: ${v}")
           | Result.Err(e) => io.println("Inner error: ${e}")
    
    // Now wrap it
    outer = Result.Ok(inner)
    io.println("Created outer Result.Ok(inner)")
    
    // Try to extract
    outer ? | Result.Ok(extracted) => {
        io.println("Extracted something from outer")
        extracted ? | Result.Ok(final_val) => {
            io.println("Final value: ${final_val}")
        } | Result.Err(e) => {
            io.println("Inner was Err: ${e}")
        }
    } | Result.Err(e) => {
        io.println("Outer was Err: ${e}")
    }
}