// Test advanced features from LANGUAGE_SPEC.zen
{ io } = @std

// Test 1: Option type
Option<T>: Some(T) | None

// Test 2: Result type  
Result<T, E>: Ok(T) | Err(E)

// Test 3: Simple enum
Shape: Circle | Rectangle

// Test 4: UFC overloading
GameEntity: Player | Enemy | Powerup

get_health = (e: GameEntity.Player) i32 { return 100 }
get_health = (e: GameEntity.Enemy) i32 { return 50 }
get_health = (e: GameEntity.Powerup) i32 { return 0 }

main = () void {
    io.println("=== Testing Advanced Features ===")
    
    // Test Option
    maybe_value: Option<i32> = Some(42)
    maybe_value ?
        | Some(v) { io.println("Option: Got value ${v}") }
        | None { io.println("Option: No value") }
    
    // Test Result
    result: Result<i32, string> = Ok(100)
    result ?
        | Ok(val) { io.println("Result: Success with ${val}") }
        | Err(msg) { io.println("Result: Error - ${msg}") }
    
    // Test enum with UFC
    entity = GameEntity.Player
    health = entity.get_health()
    io.println("Entity health: ${health}")
    
    io.println("=== Complete ===")
}