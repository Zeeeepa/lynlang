// Test Vec with deeply nested generic types
{ io, Option, Result , get_default_allocator} = @std

// Test struct for nested generics
Person: {
    name: StaticString,
    age: i32,
}

main = () void {
    alloc = get_default_allocator()
    io.println("=== Testing Vec with Nested Generics ===")
    
    // Test 1: Vec<Option<Result<i32, StaticString>>>
    io.println("\n1. Vec<Option<Result<i32, StaticString>>>")
    vec1 = Vec<Option<Result<i32, StaticString>>, 3>()
    
    // Create nested value: Some(Ok(42))
    nested1 = Option.Some(Result.Ok(42))
    vec1.push(nested1)
    io.println("Pushed Some(Ok(42))")
    
    // Retrieve and verify
    retrieved1: Option<Result<i32, StaticString>> = vec1.get(0)
    retrieved1 ?
        | Some(res) {
            res ?
                | Ok(val) { io.println("Got value: ${val}") }
                | Err(e) { io.println("Got error: ${e}") }
        }
        | None { io.println("Got None") }
    
    // Test 2: Vec<Result<Option<i32>, StaticString>>
    io.println("\n2. Vec<Result<Option<i32>, StaticString>>")
    vec2 = Vec<Result<Option<i32>, StaticString>, 3>()
    
    // Create nested value: Ok(Some(100))
    nested2 = Result.Ok(Option.Some(100))
    vec2.push(nested2)
    io.println("Pushed Ok(Some(100))")
    
    // Retrieve and verify
    retrieved2: Result<Option<i32>, StaticString> = vec2.get(0)
    retrieved2 ?
        | Ok(opt) {
            opt ?
                | Some(val) { io.println("Got value: ${val}") }
                | None { io.println("Got None") }
        }
        | Err(e) { io.println("Got error: ${e}") }
    
    // Test 3: Vec with struct containing Option
    io.println("\n3. Vec<Option<Person>>")
    vec3 = Vec<Option<Person>, 2>()
    
    // Create person
    person = Person { name: "Alice", age: 30 }
    vec3.push(Option.Some(person))
    io.println("Pushed Some(Person{Alice, 30})")
    
    // Retrieve and verify
    retrieved3: Option<Person> = vec3.get(0)
    retrieved3 ?
        | Some(p) { io.println("Got person with struct") }
        | None { io.println("Got None") }
    
    io.println("\n=== All tests complete ===")
}