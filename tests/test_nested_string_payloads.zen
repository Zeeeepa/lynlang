// Test nested generics with string payloads
{ io, Result, Option } = @std

// Function that returns Result<Result<string, string>, string>
get_nested_strings = () Result<Result<string, string>, string> {
    Result.Ok(Result.Ok("nested string"))
}

// Test with runtime-created values
make_complex_nested = (val: i32) Result<Option<i32>, string> {
    val > 0 ?
        | true { Result.Ok(Option.Some(val * 2)) }
        | false { Result.Ok(Option.None) }
}

main = () i32 {
    io.println("=== Testing Nested with String Payloads ===")
    
    // Test with nested strings
    str_nested = get_nested_strings()
    str_nested ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(val) { io.println("Got string: '${val}'") }
                | Result.Err(e) { io.println("Inner error: ${e}") }
        }
        | Result.Err(e) { io.println("Outer error: ${e}") }
    
    // Test runtime-created nested values
    io.println("\n=== Testing Runtime Values ===")
    
    result1 = make_complex_nested(5)
    result1 ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(val) { io.println("Got runtime value: ${val} (expected 10)") }
                | Option.None { io.println("Got None") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    result2 = make_complex_nested(-1)
    result2 ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(val) { io.println("Got value: ${val}") }
                | Option.None { io.println("Got None (expected)") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    0
}
