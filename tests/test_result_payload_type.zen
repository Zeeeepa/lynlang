// Test to understand what type of value we get from Result payload
{io, Option, Result, get_default_allocator} = @std

main = () void {
    alloc = get_default_allocator()
    // Create a Result<i32, string> - this should work
    simple_result = Result.Ok(42)
    simple_result ? | Result.Ok(n) => io.println("Simple: ${n}")
                    | Result.Err(e) => io.println("Error: ${e}")
    
    // Create a Result<Option<i32>, string> - payload is an Option
    complex_result = Result.Ok(Option.Some(99))
    
    // Extract the Option - this is where it gets interesting
    complex_result ? | Result.Ok(extracted_option) => {
        io.println("Extracted an Option from Result.Ok")
        // Now try to match on the extracted option
        // This is where the payload is lost
        extracted_option ? | Option.Some(value) => {
            io.println("Got Some with value: ${value}")
        } | Option.None => {
            io.println("Got None")
        }
    } | Result.Err(msg) => {
        io.println("Got error: ${msg}")
    }
}