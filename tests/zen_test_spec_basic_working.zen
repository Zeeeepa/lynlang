// Basic test for working LANGUAGE_SPEC.zen features

{ io, math } = @std

// Option type as defined in spec
Option<T>: Some(T) | None

main = () void {
    io.println("=== Testing LANGUAGE_SPEC.zen Features ===")
    
    // Test 1: Variable declarations (all forms from spec)
    io.println("\n1. Variable Declarations:")
    x: i32
    x = 10
    io.println("   Forward declaration: x = ${x}")
    
    y = 20
    io.println("   Immutable inferred: y = ${y}")
    
    z: i32 = 30
    io.println("   Typed immutable: z = ${z}")
    
    w:: i32
    w = 40
    io.println("   Mutable forward: w = ${w}")
    
    v ::= 50
    io.println("   Mutable inferred: v = ${v}")
    v = 60
    io.println("   Mutable reassigned: v = ${v}")
    
    u:: i32 = 70
    io.println("   Typed mutable: u = ${u}")
    
    // Test 2: Pattern matching
    io.println("\n2. Pattern Matching:")
    is_ready = true
    is_ready ? { 
        io.println("   Boolean pattern: Ready!")
    }
    
    has_data = false  
    has_data ?
        | true { io.println("   Has data") }
        | false { io.println("   Boolean if-else: No data") }
    
    // Test 3: Ranges and loops
    io.println("\n3. Ranges and Loops:")
    io.println("   Range (0..3):")
    (0..3).loop((i) {
        io.println("      Count: ${i}")
    })
    
    // Test 4: Infinite loop with break
    io.println("   Infinite loop:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 2 ?
            | true { 
                io.println("      Breaking at ${counter}")
                break 
            }
            | false { io.println("      Counter: ${counter}") }
    })
    
    // Test 5: Math module
    io.println("\n4. Math module:")
    io.println("   math.pi = ${math.pi}")
    
    // Test 6: Option type (basic, value extraction is broken)
    io.println("\n5. Option Type:")
    maybe: Option<i32> = Some(42)
    maybe ?
        | Some(v) { io.println("   Option: Has value") }  // TODO: Fix ${v}
        | None { io.println("   Option: No value") }
    
    none_val: Option<i32> = None
    none_val ?
        | Some(v) { io.println("   Has value") }
        | None { io.println("   Option: Is None") }
    
    io.println("\n=== Test Complete ===")
}