// Test basic trait implementation from LANGUAGE_SPEC.zen
{ io, math } = @std

// Trait definition - methods that types can implement
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Simple struct
Circle: {
    center_x: f64,
    center_y: f64,
    radius: f64,
}

// Implement trait for type using .implements()
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

main = () void {
    circle = Circle {
        center_x: 0.0,
        center_y: 0.0,
        radius: 5.0,
    }
    
    area_val = circle.area()
    perim_val = circle.perimeter()
    
    io.println("Circle area: ${area_val}")
    io.println("Circle perimeter: ${perim_val}")
}