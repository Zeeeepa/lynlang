{io, Option, get_default_allocator} = @std

main = () i32 {
    alloc = get_default_allocator()
    io.println("=== String Operations Tests ===")
    
    // Basic string interpolation
    io.println("\n▸ String interpolation:")
    name = "Zen"
    version = 1
    year = 2025
    pi_val = 3.14159
    
    io.println("  Language: ${name} v${version}")
    io.println("  Year: ${year}, Pi: ${pi_val}")
    
    // Mixed type interpolation
    io.println("\n▸ Mixed types in interpolation:")
    count = 42
    price = 19.99
    is_ready = true
    is_done = false
    
    io.println("  Items: ${count}, Price: $${price}")
    io.println("  Ready: ${is_ready}, Done: ${is_done}")
    
    // Nested interpolation
    io.println("\n▸ Complex interpolation:")
    x = 10
    y = 20
    sum_val = x + y
    io.println("  ${x} + ${y} = ${sum_val}")
    
    calc_inline = x * 2 + y / 2
    io.println("  ${x} * 2 + ${y} / 2 = ${calc_inline}")
    
    // String to float conversion
    io.println("\n▸ String to float conversion:")
    num_str1 = "123.456"
    result1 = num_str1.to_f64()
    result1 ?
        | Option.Some(val) { io.println("  Parsed '${num_str1}' as: ${val}") }
        | Option.None { io.println("  Failed to parse '${num_str1}'") }
    
    num_str2 = "42.0"
    result2 = num_str2.to_f64()
    result2 ?
        | Option.Some(val) { io.println("  Parsed '${num_str2}' as: ${val}") }
        | Option.None { io.println("  Failed to parse '${num_str2}'") }
    
    invalid_str = "not_a_number"
    result3 = invalid_str.to_f64()
    result3 ?
        | Option.Some(val) { io.println("  Unexpectedly parsed '${invalid_str}' as: ${val}") }
        | Option.None { io.println("  Correctly failed to parse '${invalid_str}'") }
    
    // String concatenation through interpolation
    io.println("\n▸ String building:")
    prefix = "Hello"
    suffix = "World"
    greeting = "${prefix}, ${suffix}!"
    io.println("  Built: ${greeting}")
    
    // Multiple interpolations
    io.println("\n▸ Multiple interpolations:")
    a = 5
    b = 10
    c = 15
    multi = "Values: a=${a}, b=${b}, c=${c}, sum=${a + b + c}"
    io.println("  ${multi}")
    
    // Edge cases
    io.println("\n▸ Edge cases:")
    empty = ""
    io.println("  Empty string: '${empty}'")
    
    zero = 0
    zero_float = 0.0
    io.println("  Zero int: ${zero}, Zero float: ${zero_float}")
    
    negative = -123
    io.println("  Negative: ${negative}")
    
    io.println("\n=== All string operation tests passed ===")
    
    return 0
}