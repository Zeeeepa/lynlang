// Simplified generic hardening test
{ io, Result, Option } = @std

main = () void {
    io.println("==== Simple Generic Hardening Tests ====")
    
    // Test 1: Basic nested Result
    io.println("=== Test 1: Result<Result<i32, string>, string> ===")
    nested = Result.Ok(Result.Ok(100))
    nested ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(val) {
                    io.println("Nested value: ${val}")
                }
                | Result.Err(e) {
                    io.println("Inner error: ${e}")
                }
        }
        | Result.Err(e) {
            io.println("Outer error: ${e}")
        }
    
    // Test 2: Result<Option<i32>, string>
    io.println("=== Test 2: Result<Option<i32>, string> ===")
    ro = Result.Ok(Option.Some(200))
    ro ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(v) {
                    io.println("Result<Option> value: ${v}")
                }
                | Option.None {
                    io.println("Was None")
                }
        }
        | Result.Err(e) {
            io.println("Error: ${e}")
        }
    
    // Test 3: Option<Result<i32, string>>
    io.println("=== Test 3: Option<Result<i32, string>> ===")
    or = Option.Some(Result.Ok(300))
    or ?
        | Option.Some(res) {
            res ?
                | Result.Ok(v) {
                    io.println("Option<Result> value: ${v}")
                }
                | Result.Err(e) {
                    io.println("Error: ${e}")
                }
        }
        | Option.None {
            io.println("Was None")
        }
    
    // Test 4: Option<Option<i32>>
    io.println("=== Test 4: Option<Option<i32>> ===")
    oo = Option.Some(Option.Some(400))
    oo ?
        | Option.Some(inner) {
            inner ?
                | Option.Some(v) {
                    io.println("Option<Option> value: ${v}")
                }
                | Option.None {
                    io.println("Inner was None")
                }
        }
        | Option.None {
            io.println("Outer was None")
        }
    
    // Test 5: Functions returning nested generics
    io.println("=== Test 5: Functions returning nested generics ===")
    
    get_nested_result = () Result<Option<i32>, string> {
        return Result.Ok(Option.Some(500))
    }
    
    nr = get_nested_result()
    nr ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(v) {
                    io.println("Function returned: ${v}")
                }
                | Option.None {
                    io.println("Function returned None")
                }
        }
        | Result.Err(e) {
            io.println("Function returned error: ${e}")
        }
    
    // Test 6: Using raise() with nested generics
    io.println("=== Test 6: Using raise() with nested generics ===")
    
    get_for_raise = () Result<Option<i32>, string> {
        return Result.Ok(Option.Some(600))
    }
    
    raised = get_for_raise().raise()
    raised ?
        | Option.Some(v) {
            io.println("Raised value: ${v}")
        }
        | Option.None {
            io.println("Raised None")
        }
    
    // Test 7: None and Err cases
    io.println("=== Test 7: None and Err cases ===")
    
    none_case = Result.Ok(Option.None)
    none_case ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(v) {
                    io.println("Should not see: ${v}")
                }
                | Option.None {
                    io.println("Correctly got None inside Ok")
                }
        }
        | Result.Err(e) {
            io.println("Error: ${e}")
        }
    
    err_case = Result.Err("Test error")
    err_case ?
        | Result.Ok(opt) {
            io.println("Should not see this")
        }
        | Result.Err(e) {
            io.println("Got expected error: ${e}")
        }
    
    // Test 8: Variable type inference
    io.println("=== Test 8: Variable type inference ===")
    
    // Should infer Result<Result<i32, string>, string>
    inferred = Result.Ok(Result.Ok(700))
    inferred ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) {
                    io.println("Inferred type value: ${v}")
                }
                | Result.Err(e) {
                    io.println("Inner error: ${e}")
                }
        }
        | Result.Err(e) {
            io.println("Outer error: ${e}")
        }
    
    io.println("==== All Tests Complete ====")
}