// Test Uniform Function Call (UFC) syntax
// Any function can be called as a method
{ io } = @std

// Regular function that takes a value as first argument
double = (x: i32) i32 {
    return x * 2
}

// Function with multiple arguments
add = (a: i32, b: i32) i32 {
    return a + b
}

// Function that takes a struct
Point: {
    x: i32,
    y: i32
}

distance_from_origin = (p: Point) i32 {
    // Simplified - just sum for testing
    return p.x + p.y
}

main = () void {
    io.println("Testing UFC (Uniform Function Call)")
    
    // Traditional function call
    value1 = 10
    result1 = double(value1)
    io.print("Traditional: double(10) = ")
    io.print_int(result1)
    io.println("")
    
    // UFC style - call function as method
    value2 = 10
    result2 = value2.double()
    io.print("UFC: 10.double() = ")
    io.print_int(result2)
    io.println("")
    
    // UFC with multiple arguments
    num = 5
    result3 = num.add(3)
    io.print("UFC: 5.add(3) = ")
    io.print_int(result3)
    io.println("")
    
    // UFC with struct
    point = Point { x: 3, y: 4 }
    dist = point.distance_from_origin()
    io.print("UFC: point.distance_from_origin() = ")
    io.print_int(dist)
    io.println("")
    
    io.println("UFC test complete!")
}