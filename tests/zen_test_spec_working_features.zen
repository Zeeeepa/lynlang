// Test ALL currently working features from LANGUAGE_SPEC.zen
// This test validates what we HAVE implemented successfully

{ io, math } = @std

// 1. Variable declarations (spec lines 298-306)
test_variables = () void {
    io.println("=== Variable Declarations ===")
    
    // Forward declaration and assignment
    x: i32
    x = 10
    
    // Immutable assignment
    y = 20
    z: i32 = 30
    
    // Mutable declaration and assignment  
    w:: i32
    w = 40
    
    // Mutable assignment
    v ::= 50
    u:: i32 = 60
    
    io.println("All 6 variable forms working: x=${x}, y=${y}, z=${z}, w=${w}, v=${v}, u=${u}")
}

// 2. Structs (spec lines 117-120, 364-372)
Point: {
    x:: f64,
    y:: f64 = 0.0
}

test_structs = () void {
    io.println("=== Structs ===")
    p = Point { x: 3.14, y: 2.71 }
    io.println("Point: (${p.x}, ${p.y})")
    
    // Mutable field modification
    p.x = 5.0
    io.println("After mutation: (${p.x}, ${p.y})")
}

// 3. Option type (spec lines 109-110, 462-473)
Option<T>: Some(T) | None

test_option = () void {
    io.println("=== Option Type ===")
    
    maybe: Option<i32> = Some(42)
    maybe ?
        | Some(val) { io.println("Got value: ${val}") }
        | None { io.println("No value") }
    
    nothing: Option<i32> = None
    nothing ?
        | Some(val) { io.println("Got: ${val}") }
        | None { io.println("Nothing here!") }
}

// 4. Result type (spec lines 112-113)
Result<T, E>: Ok(T) | Err(E)

test_result = () void {
    io.println("=== Result Type ===")
    
    success: Result<i32, string> = Ok(100)
    success ?
        | Ok(val) { io.println("Success: ${val}") }
        | Err(e) { io.println("Error: ${e}") }
    
    failure: Result<i32, string> = Err("Something went wrong")
    failure ?
        | Ok(val) { io.println("Got: ${val}") }
        | Err(e) { io.println("Failed: ${e}") }
}

// 5. Pattern matching (spec lines 352-361)
test_patterns = () void {
    io.println("=== Pattern Matching ===")
    
    // Boolean pattern matching
    is_ready = true
    is_ready ? {
        io.println("System ready!")
    }
    
    // Full boolean pattern
    has_data = false
    has_data ?
        | true { io.println("Processing data...") }
        | false { io.println("Waiting for data...") }
    
    // Multiple values
    count = 2
    count ?
        | 0 { io.println("Zero") }
        | 1 { io.println("One") }
        | 2 { io.println("Two") }
        | _ { io.println("Many") }
}

// 6. Loops and ranges (spec lines 431-459)
test_loops = () void {
    io.println("=== Loops and Ranges ===")
    
    // Range iteration
    io.print("Range (0..5): ")
    (0..5).loop((i) {
        io.print("${i} ")
    })
    io.println("")
    
    // Array loop
    io.print("Array loop: ")
    [10, 20, 30].loop((val) {
        io.print("${val} ")
    })
    io.println("")
    
    // Infinite loop with break
    counter ::= 0
    io.print("Loop with break: ")
    loop(() {
        io.print("${counter} ")
        counter = counter + 1
        counter >= 3 ? { break }
    })
    io.println("")
}

// 7. UFC - Uniform Function Call (spec line 5)
double = (n: i32) i32 {
    return n * 2
}

test_ufc = () void {
    io.println("=== UFC ===")
    
    // Traditional call
    result1 = double(5)
    io.println("double(5) = ${result1}")
    
    // UFC style
    result2 = 5.double()
    io.println("5.double() = ${result2}")
}

// 8. Math constants (spec lines 138-139)
test_math = () void {
    io.println("=== Math Constants ===")
    io.println("math.pi = ${math.pi}")
    
    radius = 3.0
    area = math.pi * radius * radius
    io.println("Circle area (r=3): ${area}")
}

// 9. String interpolation (throughout spec)
test_strings = () void {
    io.println("=== String Interpolation ===")
    name = "Zen"
    version = 1
    io.println("Language: ${name}, Version: ${version}")
    
    // Complex expressions
    x = 10
    y = 20
    io.println("Sum of ${x} + ${y} = ${x + y}")
}

// Main test runner
main = () void {
    io.println("=== LANGUAGE_SPEC.zen Working Features Test ===")
    io.println("Testing all currently implemented features from the spec")
    io.println("")
    
    test_variables()
    io.println("")
    
    test_structs()
    io.println("")
    
    test_option()
    io.println("")
    
    test_result()
    io.println("")
    
    test_patterns()
    io.println("")
    
    test_loops()
    io.println("")
    
    test_ufc()
    io.println("")
    
    test_math()
    io.println("")
    
    test_strings()
    io.println("")
    
    io.println("=== All Working Features Tested Successfully! ===")
}