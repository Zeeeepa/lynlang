// Test for triple nested generic payload extraction
{ io, Result , get_default_allocator} = @std

main = () void {
    alloc = get_default_allocator()
    io.println("=== Triple Nested Generics Test ===")
    
    // Test 1: Simple triple nesting - Result<Result<Result<i32, string>, string>, string>
    create_triple_result = () Result<Result<Result<i32, string>, string>, string> {
        inner = Result.Ok(42)
        middle = Result.Ok(inner) 
        outer = Result.Ok(middle)
        return outer
    }
    
    test_result = create_triple_result()
    
    // Extract the deeply nested value
    test_result ?
        | Result.Ok(level2) {
            io.println("Level 1: Got Ok, extracting level 2...")
            level2 ?
                | Result.Ok(level3) {
                    io.println("Level 2: Got Ok, extracting level 3...")
                    level3 ?
                        | Result.Ok(value) {
                            io.println("Level 3: Got Ok with value: ${value}")
                            io.println("SUCCESS: Triple nested generics working if value = 42")
                        }
                        | Result.Err(e) {
                            io.println("Level 3 error: ${e}")
                        }
                }
                | Result.Err(e) {
                    io.println("Level 2 error: ${e}")
                }
        }
        | Result.Err(e) {
            io.println("Level 1 error: ${e}")
        }
    
    io.println("=== Test Complete ===")
}
