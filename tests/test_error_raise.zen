// Test error propagation with .raise()
{ io, Result , get_default_allocator} = @std

// Helper function that might fail
divide = (a: i32, b: i32) Result<i32, StaticString> {
    b == 0 ? {
        return Result.Err("Division by zero")
    }
    return Result.Ok(a / b)
}

// Function that uses .raise() to propagate errors
calculate = (x: i32) Result<i32, StaticString> {
    // This should propagate the error if divide fails
    step1 = divide(10, x).raise()   // If Err, returns early
    step2 = divide(step1, 2).raise() // Chain operations
    return Result.Ok(step2)
}

main = () i32 {
    alloc = get_default_allocator()
    io.println("Testing .raise() error propagation:")
    
    // Test successful case
    result1 = calculate(5)
    result1 ?
        | Result.Ok(val) { io.println("Success: ${val}") }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test error case (division by zero)
    result2 = calculate(0)
    result2 ?
        | Result.Ok(val) { io.println("Success: ${val}") }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    return 0
}