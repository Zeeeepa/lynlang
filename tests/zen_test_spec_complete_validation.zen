// ============================================================================
// LANGUAGE_SPEC.zen Complete Validation Test
// Testing all core features listed in the spec
// ============================================================================

{ io } = @std

// Option and Result types (lines 109-113)
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

// Simple struct (lines 117-120)
Point: {
    x:: f64,  // mutable field
    y:: f64
}

// Structs for traits (lines 130-149)
Circle: {
    radius: f64
}

Rectangle: {
    width: f64,
    height: f64
}

// Trait definition (lines 123-127)
Geometric: {
    area: (self) f64,
    perimeter: (self) f64
}

// Implement trait for Circle (lines 135-144)
Circle.implements(Geometric, {
    area = (self) f64 {
        return 3.14159 * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * 3.14159 * self.radius
    }
})

// Implement trait for Rectangle (lines 147-162)
Rectangle.implements(Geometric, {
    area = (self) f64 {
        return self.width * self.height
    },
    perimeter = (self) f64 {
        return 2.0 * (self.width + self.height)
    }
})

// Enum type (lines 165-168)
Shape: Circle | Rectangle
Shape.requires(Geometric)

// UFC helper (lines 176-181)
double = (n: i32) i32 {
    return n * 2
}

// Error propagation functions (lines 199-210)
parse_number = (s: string) Result<i32, string> {
    // Simulate parsing
    s == "42" ?
        | true { return Result.Ok(42) }
        | false { return Result.Err("Invalid number") }
}

process_input = (input: string) Result<i32, string> {
    num = parse_number(input).raise()
    doubled_num = num * 2
    return Result.Ok(doubled_num)
}

main = () void {
    io.println("============================================================")
    io.println("LANGUAGE_SPEC.zen Validation Test")
    io.println("============================================================")
    
    // Test 1: Variable declarations (lines 298-306)
    io.println("\n1. Variable Declarations:")
    x: i32
    x = 10
    io.println("   Forward decl: x = ${x}")
    
    y = 20
    io.println("   Immutable: y = ${y}")
    
    z ::= 30
    z = 40
    io.println("   Mutable: z = ${z}")
    
    // Test 2: Pattern matching with ? (lines 352-361)
    io.println("\n2. Pattern Matching (no keywords):")
    is_ready = true
    is_ready ? {
        io.println("   Single branch: Ready!")
    }
    
    has_data = false
    has_data ?
        | true { io.println("   Has data") }
        | false { io.println("   Two branches: No data") }
    
    // Test 3: Option type (lines 462-473)
    io.println("\n3. Option Type (no null):")
    maybe: Option<i32> = Option.Some(42)
    maybe ?
        | Some(val) { io.println("   Some: ${val}") }
        | None { io.println("   None") }
    
    // Test 4: Result type and .raise() (lines 206-210)
    io.println("\n4. Result and .raise():")
    result = process_input("42")
    result ?
        | Ok(val) { io.println("   Success: ${val}") }
        | Err(e) { io.println("   Error: ${e}") }
    
    // Test 5: Structs with mutable fields (lines 117-120)
    io.println("\n5. Structs:")
    p ::= Point { x: 1.0, y: 2.0 }
    px = p.x
    py = p.y
    io.println("   Initial: (${px}, ${py})")
    p.x = 3.0
    px_new = p.x
    io.println("   Mutated: (${px_new}, ${py})")
    
    // Test 6: Traits (lines 135-162)
    io.println("\n6. Traits:")
    circle = Circle { radius: 5.0 }
    io.println("   Circle area: ${circle.area()}")
    
    rect = Rectangle { width: 4.0, height: 3.0 }
    io.println("   Rectangle area: ${rect.area()}")
    
    // Test 7: Loops and ranges (lines 432-439)
    io.println("\n7. Loops and Ranges:")
    io.print("   Range: ")
    (0..5).loop((i) {
        io.print("${i} ")
    })
    io.println("")
    
    io.print("   Infinite: ")
    count ::= 0
    loop(() {
        io.print("${count} ")
        count = count + 1
        count >= 3 ? { break }
    })
    io.println("")
    
    // Test 8: UFC (lines 176-181, 188)
    io.println("\n8. UFC:")
    test_val = 10
    doubled = test_val.double()
    io.println("   10.double() = ${doubled}")
    
    // Test 9: Pointers (lines 364-372)
    io.println("\n9. Explicit Pointers:")
    num = 100
    ptr: Ptr<i32> = num.ref()
    io.println("   Ptr: val=${ptr.val}, addr=${ptr.addr}")
    
    mut_num ::= 200
    mut_ptr: MutPtr<i32> = mut_num.mut_ref()
    mut_ptr.val = 300
    io.println("   MutPtr: modified=${mut_num}")
    
    // Test 10: String interpolation
    io.println("\n10. String Interpolation:")
    name = "Zen"
    version = 2025
    io.println("   ${name} v${version}")
    
    io.println("\n============================================================")
    io.println("âœ… ALL CORE FEATURES VALIDATED")
    io.println("============================================================")
}