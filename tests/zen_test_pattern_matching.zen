// Test pattern matching with ? operator as per LANGUAGE_SPEC.zen

{ io } = @std

// Define Option type locally for testing
Option<T>: Some(T) | None

// Define Result type locally for testing  
Result<T, E>: Ok(T) | Err(E)

main = () void {
    // Test boolean pattern matching with ?
    is_ready = true
    is_ready ? {
        io.println("System is ready!")
    }
    
    // Test full boolean pattern match
    has_data = false
    has_data ?
        | true { io.println("Has data") }
        | false { io.println("No data") }
    
    // Test pattern matching with values
    value = 42
    value > 40 ?
        | true { io.println("Value is greater than 40") }
        | false { io.println("Value is 40 or less") }
    
    // Test Option pattern matching
    maybe_number: Option<i32> = Some(5)
    maybe_number ?
        | Some(n) { io.println("Got number: ${n}") }
        | None { io.println("No number") }
    
    // Test Result pattern matching
    result: Result<i32, string> = Ok(100)
    result ?
        | Ok(val) { io.println("Success: ${val}") }
        | Err(msg) { io.println("Error: ${msg}") }
    
    // Test nested pattern matching
    maybe_result: Option<Result<i32, string>> = Some(.Ok(42))
    maybe_result ?
        | Some(res) {
            res ?
                | Ok(v) { io.println("Nested value: ${v}") }
                | Err(e) { io.println("Nested error: ${e}") }
        }
        | None { io.println("Nothing") }
}