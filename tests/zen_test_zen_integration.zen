// Comprehensive Integration Test for Zen
// Tests all major language features working together

core = @std
io = @std
math = @std
string = @std
vec = @std
test = @std

// Test data structures
Point: {
    x: f64,
    y: f64,
}

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

Color: 
    Red,
    Green,
    Blue,
    RGB(r: u8, g: u8, b: u8),

// Test behaviors
Drawable: behavior {
    draw: (self) void,
    get_area: (self) f64,
}

// Implement behavior for Rectangle
impl Drawable for Rectangle {
    draw = (self) void   {
        io.print("Drawing rectangle from (")
        io.print_float(self.top_left.x)
        io.print(", ")
        io.print_float(self.top_left.y)
        io.print(") to (")
        io.print_float(self.bottom_right.x)
        io.print(", ")
        io.print_float(self.bottom_right.y)
        io.print(")\n")
    }
    
    get_area = (self) f64   {
        width := self.bottom_right.x - self.top_left.x
        height := self.bottom_right.y - self.top_left.y
        return width * height
    }
}

// Test functions
create_point = (x: f64, y: f64) Point   {
    return Point{x: x, y: y}
}

distance = (p1: Point, p2: Point) f64   {
    dx := p2.x - p1.x
    dy := p2.y - p1.y
    return math.sqrt(dx * dx + dy * dy)
}

// Test generics
Stack<T> = {
    items: Vec<T>,
    capacity: usize,
}

impl<T> Stack<T> {
    new = (capacity: usize) Stack<T>   {
        return Stack<T>{
            items: Vec<T>.new(),
            capacity: capacity,
        }
    }
    
    push = (self: *Stack<T>, item: T) bool   {
        self.items.len() < self.capacity ?
            | true {
                self.items.push(item)
                return true
            }
            | false {
                return false
            }
    }
    
    pop = (self: *Stack<T>) Option<T>   {
        self.items.len() > 0 ?
            | true {
                return Option<T>.Some(self.items.pop())
            }
            | false {
                return Option<T>.None
            }
    }
}

// Test pattern matching
process_color = (c: Color) string   {
    c ?
        | Red { return "Pure red" }
        | Green { return "Pure green" }
        | Blue { return "Pure blue" }
        | RGB(r, g, b) {
            r > 200 && g < 50 && b < 50 ?
                | true { return "Mostly red" }
                | false {
                    g > 200 && r < 50 && b < 50 ?
                        | true { return "Mostly green" }
                        | false {
                            b > 200 && r < 50 && g < 50 ?
                                | true { return "Mostly blue" }
                                | false { return "Mixed color" }
                        }
                }
        }
    }
}

// Test loops and iterators
fibonacci = (n: i32) Vec<i32>   {
    result := Vec<i32>.new()
    
    n <= 0 ?
        | true { return result }
        | false {}
    
    result.push(0)
    n == 1 ?
        | true { return result }
        | false {}
    
    result.push(1)
    
    i := 2
    loop i < n {
        prev1 := result[i - 1]
        prev2 := result[i - 2]
        result.push(prev1 + prev2)
        i = i + 1
    }
    
    return result
}

// Test error handling
divide_safe = (a: f64, b: f64) Result<f64, string>   {
    b == 0.0 ?
        | true { return Result<f64, string>.Err("Division by zero") }
        | false { return Result<f64, string>.Ok(a / b) }
}

// Test string operations
format_point = (p: Point) string   {
    return string.format("Point({}, {})", p.x, p.y)
}

// Test array operations
sum_array = (arr: [i32; 10]) i32   {
    sum := 0
    i := 0
    loop i < 10 {
        sum = sum + arr[i]
        i = i + 1
    }
    return sum
}

// Main test runner
main = () i32   {
    io.print("Running Zen Integration Tests\n")
    io.print("=============================\n\n")
    
    passed := 0
    failed := 0
    
    // Test 1: Basic structs and functions
    io.print("Test 1: Structs and Functions... ")
    p1 := create_point(0.0, 0.0)
    p2 := create_point(3.0, 4.0)
    dist := distance(p1, p2)
    
    dist == 5.0 ?
        | true {
            io.print("PASSED\n")
            passed = passed + 1
        }
        | false {
            io.print("FAILED (expected 5.0, got ")
            io.print_float(dist)
            io.print(")\n")
            failed = failed + 1
        }
    
    // Test 2: Behaviors
    io.print("Test 2: Behaviors... ")
    rect := Rectangle{
        top_left: create_point(0.0, 0.0),
        bottom_right: create_point(10.0, 5.0),
    }
    area := rect.get_area()
    
    area == 50.0 ?
        | true {
            io.print("PASSED\n")
            passed = passed + 1
        }
        | false {
            io.print("FAILED (expected 50.0, got ")
            io.print_float(area)
            io.print(")\n")
            failed = failed + 1
        }
    
    // Test 3: Generics
    io.print("Test 3: Generic Stack... ")
    stack := Stack<i32>.new(5)
    stack.push(10)
    stack.push(20)
    stack.push(30)
    
    stack.pop() ?
        | Some(val) {
            val == 30 ?
                | true {
                    io.print("PASSED\n")
                    passed = passed + 1
                }
                | false {
                    io.print("FAILED (expected 30, got ")
                    io.print_int(val)
                    io.print(")\n")
                    failed = failed + 1
                }
        }
        | None {
            io.print("FAILED (stack was empty)\n")
            failed = failed + 1
        }
    }
    
    // Test 4: Pattern matching
    io.print("Test 4: Pattern Matching... ")
    color1 := Color.Red
    color2 := Color.RGB(250, 10, 10)
    
    result1 := process_color(color1)
    result2 := process_color(color2)
    
    (result1 == "Pure red" && result2 == "Mostly red") ?
        | true {
            io.print("PASSED\n")
            passed = passed + 1
        }
        | false {
            io.print("FAILED\n")
            failed = failed + 1
        }
    
    // Test 5: Loops and vectors
    io.print("Test 5: Fibonacci Sequence... ")
    fibs := fibonacci(10)
    
    fibs.len() == 10 && fibs[9] == 34 ?
        | true {
            io.print("PASSED\n")
            passed = passed + 1
        }
        | false {
            io.print("FAILED\n")
            failed = failed + 1
        }
    
    // Test 6: Error handling
    io.print("Test 6: Error Handling... ")
    result_ok := divide_safe(10.0, 2.0)
    result_err := divide_safe(10.0, 0.0)
    
    test_passed := false
    result_ok ?
        | Ok(val) {
            val == 5.0 ?
                | true {
                    result_err ?
                        | Err(msg) {
                            msg == "Division by zero" ?
                                | true { test_passed = true }
                                | false {}
                        }
                        | Ok(_) {}
                    }
                }
                | false {}
        }
        | Err(_) {}
    }
    
    test_passed ?
        | true {
            io.print("PASSED\n")
            passed = passed + 1
        }
        | false {
            io.print("FAILED\n")
            failed = failed + 1
        }
    
    // Test 7: Arrays
    io.print("Test 7: Arrays... ")
    test_array: [i32; 10] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    array_sum := sum_array(test_array)
    
    array_sum == 55 ?
        | true {
            io.print("PASSED\n")
            passed = passed + 1
        }
        | false {
            io.print("FAILED (expected 55, got ")
            io.print_int(array_sum)
            io.print(")\n")
            failed = failed + 1
        }
    
    // Print summary
    io.print("\n=============================\n")
    io.print("Test Results:\n")
    io.print("  Passed: ")
    io.print_int(passed)
    io.print("\n  Failed: ")
    io.print_int(failed)
    io.print("\n")
    
    failed == 0 ?
        | true {
            io.print("\n✓ All tests passed!\n")
            return 0
        }
        | false {
            io.print("\n✗ Some tests failed\n")
            return 1
        }
}