// Test Option type chaining and handling
{io, Option, get_default_allocator} = @std
{io, Option, get_default_allocator} = @std

// Helper function that might return a value
get_value = (n: i32) Option<i32> {
    n > 0 ?
        | true { Option.Some(n * 2) }
        | false { Option.None }
}

// Function that chains Option operations
process = (x: i32) i32 {
    result = get_value(x)
    result ?
        | Option.Some(v) { v + 10 }
        | Option.None { 0 - 1 }  // Default value for None
}

main = () void {
    alloc = get_default_allocator()
    io.println("=== Option Chaining Test ===")
    
    // Test with positive value
    val1 = process(5)
    io.println("process(5) = ${val1}")  // Should be 20
    
    // Test with negative value (returns None)
    neg = 0 - 3
    val2 = process(neg)
    io.println("process(-3) = ${val2}")  // Should be -1
    
    // Direct Option handling
    opt = Option.Some(42)
    opt ?
        | Option.Some(x) { io.println("Got value: ${x}") }
        | Option.None { io.println("No value") }
    
    // Test Option.None
    none = Option.None
    none ?
        | Option.Some(x) { io.println("Unexpected: ${x}") }
        | Option.None { io.println("Correctly handled None") }
    
    io.println("Test complete!")
}