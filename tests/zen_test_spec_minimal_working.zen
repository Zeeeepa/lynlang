// Minimal test for absolutely confirmed working LANGUAGE_SPEC.zen features

io = @std.io
{ Option } = @std.core

// Core types
Result<T, E>: Ok(T) | Err(E)

// Simple struct
Point: {
    x: i32,
    y: i32,
}

main = () void {
    io.println("=== LANGUAGE_SPEC.zen Minimal Working Test ===")
    
    // 1. No null - Option type works
    maybe: Option<i32> = Option.Some(42)
    maybe ?
        | Some(v) { io.println("Option: Some") }
        | None { io.println("Option: None") }
    
    // 2. Assignment operators
    immutable = 10     // = for immutable
    mutable ::= 0      // ::= for mutable
    mutable = mutable + 1
    io.println("Assignments work")
    
    // 3. Pattern matching with ?
    condition = true
    condition ? {
        io.println("Pattern match works")
    }
    
    // 4. Loops
    (0..3).loop((i) {
        io.println("Loop iteration")
    })
    
    // 5. Defer
    @this.defer(io.println("Deferred"))
    io.println("Before defer")
    
    // 6. Result type
    error: Result<i32, string> = Result.Err("error")
    error ?
        | Ok(v) { io.println("Ok") }
        | Err(e) { io.println("Error handling works") }
    
    io.println("=== Test Complete ===")
}