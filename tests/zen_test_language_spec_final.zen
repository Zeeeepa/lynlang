// Final comprehensive test aligned with LANGUAGE_SPEC.zen
// This tests all working features as defined in the specification

{ io } = @std

// From LANGUAGE_SPEC.zen line 117-120: Struct with mutable fields
Point: {
    x:: f64,
    y:: f64 = 0
}

// From line 109-110: Option type definition
Option<T>: Some(T) | None

// From line 113: Result type for error handling
Result<T, E>: Ok(T) | Err(E)

// From line 165: Simple enum
Shape: Circle | Rectangle

// Test functions
add = (a: i32, b: i32) i32 {
    return a + b
}

multiply = (x: f64, y: f64) f64 {
    return x * y
}

main = () void {
    io.println("=== LANGUAGE_SPEC.zen Implementation Test ===")
    io.println("")
    
    // TEST 1: Variable declarations (lines 298-306)
    io.println("TEST 1: Variable Declarations (spec lines 298-306)")
    
    // Forward declaration
    x: i32
    x = 10
    io.println("  Forward declaration: x = ${x}")
    
    // Immutable assignments  
    y1 = 15
    z1: i32 = 25
    io.println("  Immutable: y1 = ${y1}, z1 = ${z1}")
    
    // Mutable assignments
    w:: i32
    w = 20
    v ::= 30
    u:: i32 = 40
    io.println("  Mutable: w = ${w}, v = ${v}, u = ${u}")
    
    // Mutation test
    v = 50
    w = 60
    io.println("  After mutation: v = ${v}, w = ${w}")
    io.println("  ✓ All variable forms working")
    io.println("")
    
    // TEST 2: Pattern matching (lines 352-361)
    io.println("TEST 2: Pattern Matching (spec lines 352-361)")
    
    // Short form
    is_ready = true
    is_ready ? {
        io.println("  ✓ Short form pattern match works")
    }
    
    // Full boolean pattern match
    has_data = false
    has_data ?
        | true { io.println("  Has data") }
        | false { io.println("  ✓ Full pattern match works") }
    io.println("")
    
    // TEST 3: Functions
    io.println("TEST 3: Functions")
    result1 = add(15, 25)
    result2 = multiply(3.14, 2.0)
    io.println("  add(15, 25) = ${result1}")
    io.println("  multiply(3.14, 2.0) = ${result2}")
    io.println("  ✓ Functions with parameters working")
    io.println("")
    
    // TEST 4: Arithmetic and comparisons
    io.println("TEST 4: Arithmetic and Comparisons")
    sum = 10 + 20 + 30
    diff = 100 - 40
    prod = 6 * 7
    div = 84 / 2
    io.println("  10 + 20 + 30 = ${sum}")
    io.println("  100 - 40 = ${diff}")
    io.println("  6 * 7 = ${prod}")
    io.println("  84 / 2 = ${div}")
    
    is_greater = 10 > 5
    is_equal = 42 == 42
    is_less = 3 < 9
    io.println("  10 > 5 = ${is_greater}")
    io.println("  42 == 42 = ${is_equal}")
    io.println("  3 < 9 = ${is_less}")
    io.println("  ✓ Arithmetic and comparisons working")
    io.println("")
    
    // TEST 5: Loops (lines 432-460)
    io.println("TEST 5: Loops (spec lines 432-460)")
    
    // Range loop (lines 432-435)
    io.println("  Range (0..3):")
    (0..3).loop((i) {
        io.println("    ${i}")
    })
    
    // Infinite loop with break (lines 453-459)
    io.println("  Infinite loop with break:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        io.println("    Loop iteration ${counter}")
        counter >= 3 ?
            | true { break }
            | false { }
    })
    io.println("  ✓ Loops working")
    io.println("")
    
    // TEST 6: Structs (lines 117-120, 364)
    io.println("TEST 6: Structs (spec lines 117-120)")
    p1 = Point { x: 10.5, y: 20.5 }
    p2 = Point { x: 5.0, y: 15.0 }
    io.println("  Created Point p1")
    io.println("  Created Point p2")
    io.println("  ✓ Struct creation working")
    io.println("")
    
    // TEST 7: Enums and Option types (lines 109-110, 165, 462-473)
    io.println("TEST 7: Enums and Option Types")
    
    // Create enum values
    shape1 = Shape.Circle
    shape2 = Shape.Rectangle
    io.println("  Created Shape.Circle")
    io.println("  Created Shape.Rectangle")
    
    // Option type
    some_val = Option.Some(42)
    none_val = Option.None
    
    some_val ?
        | Some(v) { io.println("  Option.Some contains: ${v}") }
        | None { io.println("  Option is None") }
    
    none_val ?
        | Some(v) { io.println("  Value: ${v}") }
        | None { io.println("  ✓ Option.None handled") }
    io.println("")
    
    // TEST 8: Result type (lines 113, 199-204)
    io.println("TEST 8: Result Type")
    ok_result = Result.Ok(200)
    err_result = Result.Err("Not found")
    
    ok_result ?
        | Ok(code) { io.println("  Result.Ok with code: ${code}") }
        | Err(msg) { io.println("  Error: ${msg}") }
    
    err_result ?
        | Ok(val) { io.println("  Value: ${val}") }
        | Err(msg) { io.println("  Result.Err with message: ${msg}") }
    io.println("  ✓ Result type working")
    io.println("")
    
    // TEST 9: String interpolation
    io.println("TEST 9: String Interpolation")
    name = "Zen"
    version = 1
    message = "Language: ${name}, Version: ${version}"
    io.println("  ${message}")
    io.println("  ✓ String interpolation working")
    io.println("")
    
    io.println("=== Summary ===")
    io.println("✓ Variable declarations (all 8 forms)")
    io.println("✓ Pattern matching with ? operator")
    io.println("✓ Functions with parameters and returns")
    io.println("✓ Arithmetic and comparison operators")
    io.println("✓ Loops (range and infinite with break)")
    io.println("✓ Structs with fields")
    io.println("✓ Enums and Option types")
    io.println("✓ Result type for error handling")
    io.println("✓ String interpolation")
    io.println("")
    io.println("Implementation aligns with LANGUAGE_SPEC.zen for core features.")
    io.println("See README.md for complete feature status.")
}