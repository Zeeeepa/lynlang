// Comprehensive test for LANGUAGE_SPEC.zen compliance
// Tests all documented features from the spec

// Core imports - only @std and @this are special
{ io, math } = @std
{ Option, Result } = @std
{ Vec, DynVec } = @std
{ Ptr, MutPtr, RawPtr } = @std

// Test 1: Basic types and Option/Result
test_option_result = () void {
    io.println("Testing Option and Result types...")
    
    // Option type - no null!
    maybe_value: Option<i32> = Option.Some(42)
    maybe_value ?
        | Some(v) { io.println("Got value: ${v}") }
        | None { io.println("No value") }
    
    // Result type for error handling
    result: Result<i32, string> = Result.Ok(100)
    result ?
        | Ok(v) { io.println("Success: ${v}") }
        | Err(e) { io.println("Error: ${e}") }
}

// Test 2: Pattern matching with ? operator
test_pattern_matching = () void {
    io.println("Testing pattern matching...")
    
    // Simple boolean pattern
    is_ready = true
    is_ready ? { 
        io.println("System ready") 
    }
    
    // Full boolean pattern match
    has_data = false
    has_data ?
        | true { io.println("Processing data") }
        | false { io.println("Waiting for data") }
    
    // Pattern matching with values
    value = 42
    value ?
        | 0 { io.println("Zero") }
        | 42 { io.println("The answer") }
        | _ { io.println("Other value") }
}

// Test 3: Structs and enums
Point: {
    x: f64,
    y: f64,
}

Shape: Circle | Rectangle | Triangle

Circle: {
    center: Point,
    radius: f64,
}

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

Triangle: {
    a: Point,
    b: Point, 
    c: Point,
}

test_structs_enums = () void {
    io.println("Testing structs and enums...")
    
    // Create struct
    p = Point { x: 10.0, y: 20.0 }
    io.println("Point: (${p.x}, ${p.y})")
    
    // Create enum variants
    shape: Shape = Shape.Circle
    shape ?
        | Circle { io.println("It's a circle") }
        | Rectangle { io.println("It's a rectangle") }
        | Triangle { io.println("It's a triangle") }
}

// Test 4: UFC (Uniform Function Call)
area = (c: Circle) f64 {
    return math.pi * c.radius * c.radius
}

area = (r: Rectangle) f64 {
    width = r.bottom_right.x - r.top_left.x
    height = r.bottom_right.y - r.top_left.y
    return width * height  
}

test_ufc = () void {
    io.println("Testing UFC...")
    
    c = Circle { 
        center: Point { x: 0.0, y: 0.0 },
        radius: 5.0
    }
    
    // Method call syntax
    circle_area = c.area()
    io.println("Circle area: ${circle_area}")
    
    // Function call syntax
    circle_area2 = area(c)
    io.println("Circle area (function): ${circle_area2}")
}

// Test 5: Loops
test_loops = () void {
    io.println("Testing loops...")
    
    // Range loop
    (0..5).loop((i) {
        io.println("Count: ${i}")
    })
    
    // Step range
    (0..20).step(5).loop((i) {
        io.println("Step: ${i}")
    })
    
    // Infinite loop with break
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { break }
            | false { io.println("Loop: ${counter}") }
    })
    
    // Collection loop
    items = Vec<i32, 3>()
    items.push(10)
    items.push(20)
    items.push(30)
    
    items.loop((item) {
        io.println("Item: ${item}")
    })
}

// Test 6: Assignment operators
test_assignments = () void {
    io.println("Testing assignment operators...")
    
    // Immutable assignment with =
    x = 10
    io.println("Immutable x: ${x}")
    
    // Mutable assignment with ::=
    y ::= 20
    io.println("Mutable y: ${y}")
    y = y + 5
    io.println("Modified y: ${y}")
    
    // Type annotation with :
    z: i32 = 30
    io.println("Typed z: ${z}")
}

// Test 7: Error propagation with .raise()
divide = (a: f64, b: f64) Result<f64, string> {
    b == 0.0 ?
        | true { return Result.Err("Division by zero") }
        | false { return Result.Ok(a / b) }
}

calculate = (x: f64, y: f64) Result<f64, string> {
    // If divide returns Err, propagate it
    result = divide(x, y).raise()
    return Result.Ok(result * 2.0)
}

test_error_propagation = () void {
    io.println("Testing error propagation...")
    
    result = calculate(10.0, 2.0)
    result ?
        | Ok(v) { io.println("Result: ${v}") }
        | Err(e) { io.println("Error: ${e}") }
    
    result2 = calculate(10.0, 0.0)
    result2 ?
        | Ok(v) { io.println("Result: ${v}") }
        | Err(e) { io.println("Error: ${e}") }
}

// Test 8: Pointer types
test_pointers = () void {
    io.println("Testing pointer types...")
    
    value = 42
    
    // Immutable pointer
    ptr: Ptr<i32> = value.ref()
    io.println("Value via ptr: ${ptr.val}")
    io.println("Address: ${ptr.addr}")
    
    // Mutable pointer
    mut_value ::= 100
    mut_ptr: MutPtr<i32> = mut_value.mut_ref()
    mut_ptr.val = 200
    io.println("Modified value: ${mut_value}")
}

// Test 9: @this.defer
test_defer = () void {
    io.println("Testing @this.defer...")
    
    io.println("Start of function")
    @this.defer(io.println("Deferred 1"))
    @this.defer(io.println("Deferred 2"))
    io.println("End of function")
    // Deferred statements execute in reverse order
}

// Test 10: String interpolation
test_string_interpolation = () void {
    io.println("Testing string interpolation...")
    
    name = "Zen"
    version = 1.0
    count = 42
    
    message = "Welcome to ${name} v${version} with ${count} features!"
    io.println(message)
}

// Main test runner
main = () void {
    io.println("=== Zen Language Spec Compliance Test ===")
    io.println("")
    
    test_option_result()
    io.println("")
    
    test_pattern_matching()
    io.println("")
    
    test_structs_enums()
    io.println("")
    
    test_ufc()
    io.println("")
    
    test_loops()
    io.println("")
    
    test_assignments()
    io.println("")
    
    test_error_propagation()
    io.println("")
    
    test_pointers()
    io.println("")
    
    test_defer()
    io.println("")
    
    test_string_interpolation()
    io.println("")
    
    io.println("=== All tests completed ===")
}