// Test @this.defer() mechanism for resource cleanup
// This tests the new @this.defer() syntax as specified in LANGUAGE_SPEC.zen

test_simple_defer = () void {
    io.println("Starting test_simple_defer")
    
    // Simple defer example
    @this.defer(io.println("Defer cleanup 1"))
    io.println("Function body")
    
    // Should print:
    // Starting test_simple_defer
    // Function body
    // Defer cleanup 1
}

test_multiple_defer_lifo = () void {
    io.println("Starting test_multiple_defer_lifo")
    
    // Multiple defers should execute in LIFO order (last first)
    @this.defer(io.println("Defer 1 - should be last"))
    @this.defer(io.println("Defer 2 - should be middle"))
    @this.defer(io.println("Defer 3 - should be first"))
    
    io.println("Function body executed")
    
    // Should print:
    // Starting test_multiple_defer_lifo
    // Function body executed
    // Defer 3 - should be first
    // Defer 2 - should be middle
    // Defer 1 - should be last
}

test_defer_with_early_return = () i32 {
    io.println("Starting test_defer_with_early_return")
    
    @this.defer(io.println("Defer cleanup before return"))
    
    condition = true
    if condition {
        io.println("Taking early return")
        return 42  // Defers should still execute
    }
    
    io.println("This should not print")
    return 0
}

test_defer_with_function_calls = () void {
    io.println("Starting test_defer_with_function_calls")
    
    // Test defer with actual function calls (simulating resource cleanup)
    @this.defer(cleanup_resource("resource1"))
    @this.defer(cleanup_resource("resource2"))
    
    io.println("Using resources")
}

cleanup_resource = (name: string) void {
    io.print("Cleaning up ")
    io.println(name)
}

test_defer_with_variables = () void {
    io.println("Starting test_defer_with_variables")
    
    // Test defer with variables (like allocators in LANGUAGE_SPEC.zen)
    name = "test_allocator"
    @this.defer(release_allocator(name))
    
    io.println("Using allocator")
}

release_allocator = (name: string) void {
    io.print("Releasing allocator: ")
    io.println(name)
}

test_defer_nested_scopes = () void {
    io.println("Starting test_defer_nested_scopes")
    
    @this.defer(io.println("Outer defer"))
    
    // Note: In Zen, @this.defer is function-scoped, not block-scoped
    // So this tests that all defers execute at function exit
    condition = true
    if condition {
        @this.defer(io.println("Inner defer"))
        io.println("Inside if block")
    }
    
    io.println("After if block")
    
    // Should print:
    // Starting test_defer_nested_scopes
    // Inside if block
    // After if block
    // Inner defer
    // Outer defer
}

// Test that resembles the LANGUAGE_SPEC.zen examples
test_spec_like_defer = () void {
    io.println("Starting test_spec_like_defer")
    
    // Simulate allocator pattern from LANGUAGE_SPEC.zen
    sync_alloc = create_allocator("GPA")
    @this.defer(deinit_allocator(sync_alloc))
    
    // Simulate dynamic vector with cleanup
    entities = create_dynvec(sync_alloc)
    @this.defer(deinit_dynvec(entities))
    
    // Simulate file operations
    file = open_file("test.txt")
    @this.defer(close_file(file))
    
    io.println("Using resources...")
    
    // All defers should execute in LIFO order:
    // close_file, deinit_dynvec, deinit_allocator
}

// Mock functions for the spec-like test
create_allocator = (name: string) string {
    return name
}

deinit_allocator = (alloc: string) void {
    io.print("Deinitializing allocator: ")
    io.println(alloc)
}

create_dynvec = (alloc: string) string {
    return "DynVec"
}

deinit_dynvec = (vec: string) void {
    io.print("Deinitializing vector: ")
    io.println(vec)
}

open_file = (path: string) string {
    return path
}

close_file = (file: string) void {
    io.print("Closing file: ")
    io.println(file)
}

main = () void {
    io.println("=== Testing @this.defer() mechanism ===")
    
    test_simple_defer()
    io.println("---")
    
    test_multiple_defer_lifo()
    io.println("---")
    
    result = test_defer_with_early_return()
    io.print("Early return result: ")
    io.print_int(result)
    io.println("")
    io.println("---")
    
    test_defer_with_function_calls()
    io.println("---")
    
    test_defer_with_variables()
    io.println("---")
    
    test_defer_nested_scopes()
    io.println("---")
    
    test_spec_like_defer()
    
    io.println("=== All defer tests completed ===")
}