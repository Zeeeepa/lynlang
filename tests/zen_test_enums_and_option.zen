// Enum and Option type tests from LANGUAGE_SPEC.zen lines 109-110, 165
// Tests enum definitions and Option<T> type

// Import Result and Option from stdlib
{ Result, Option } = @std

// Simple enum
Shape:
    Circle
    | Rectangle

// Enum with different variant types
GameEntity:
    Player
    | Enemy
    | Powerup

main = () void {
    // Option handling - no null!
    maybe_radius: Option<f64> = Option.Some(5.5)
    maybe_radius ?
        | Option.Some(r) {
            // Use the value
            radius = r
        }
        | Option.None {
            // Handle None case
        }
    
    // Create None variant
    nothing: Option<i32> = Option.None
    
    // Result type usage
    result: Result<i32, string> = Result.Ok(42)
    result ?
        | Result.Ok(val) {
            // Use successful value
            value = val
        }
        | Result.Err(e) {
            // Handle error
        }
    
    // Simple enum usage
    shape: Shape = Shape.Circle
    shape ?
        | .Circle {
            // Handle Circle variant
        }
        | .Rectangle {
            // Handle Rectangle variant
        }
    
    // Game entity enum
    entity: GameEntity = GameEntity.Player
    entity ?
        | .Player {
            // Player logic
        }
        | .Enemy {
            // Enemy logic
        }
        | .Powerup {
            // Powerup logic
        }
}