// Standard Library Integration Test
// Tests that stdlib modules work correctly together

{ core } = @std.core
{ io } = @std.io
{ string } = @std.string
{ vec } = @std.vec
{ math } = @std.math
{ time } = @std.time
{ log } = @std.log

// Test string operations
test_string_ops = () bool   {
    s1 := "Hello"
    s2 := "World"
    
    // Test concatenation
    result := string.concat(s1, ", ")
    result = string.concat(result, s2)
    result = string.concat(result, "!")
    
    expected := "Hello, World!"
    if !string.equals(result, expected) {
        io.print("String concatenation failed\n")
        return false
    }
    
    // Test substring
    sub := string.substring(result, 0, 5)
    if !string.equals(sub, "Hello") {
        io.print("Substring failed\n")
        return false
    }
    
    return true
}

// Test vector operations
test_vector_ops = () bool   {
    v := vec.new<i32>()
    
    // Add elements
    vec.push(v, 10)
    vec.push(v, 20)
    vec.push(v, 30)
    
    // Check length
    len := vec.len(v)
    if len != 3 {
        io.print("Vector length incorrect\n")
        return false
    }
    
    // Access elements
    first := vec.get(v, 0)
    if first != 10 {
        io.print("Vector element access failed\n")
        return false
    }
    
    return true
}

// Test math operations
test_math_ops = () bool   {
    // Basic operations
    a := 10
    b := 3
    
    sum := math.add(a, b)
    if sum != 13 {
        io.print("Math add failed\n")
        return false
    }
    
    diff := math.sub(a, b)
    if diff != 7 {
        io.print("Math sub failed\n")
        return false
    }
    
    product := math.mul(a, b)
    if product != 30 {
        io.print("Math mul failed\n")
        return false
    }
    
    quotient := math.div(a, b)
    if quotient != 3 {
        io.print("Math div failed\n")
        return false
    }
    
    // Advanced operations
    sqrt_val := math.sqrt(16.0)
    if sqrt_val != 4.0 {
        io.print("Math sqrt failed\n")
        return false
    }
    
    pow_val := math.pow(2.0, 3.0)
    if pow_val != 8.0 {
        io.print("Math pow failed\n")
        return false
    }
    
    return true
}

// Test time operations
test_time_ops = () bool   {
    // Get current time
    now := time.now()
    
    // Sleep for a short duration
    time.sleep_ms(10)
    
    // Get time after sleep
    after := time.now()
    
    // Check that time has passed
    if after <= now {
        io.print("Time measurement failed\n")
        return false
    }
    
    return true
}

// Test logging
test_logging = () bool   {
    // Create logger
    logger := log.new("test")
    
    // Log at different levels
    log.debug(logger, "Debug message")
    log.info(logger, "Info message")
    log.warn(logger, "Warning message")
    log.error(logger, "Error message")
    
    // If we got here without crashing, logging works
    return true
}

// Test combined operations
test_combined = () bool   {
    // Use multiple stdlib modules together
    names := vec.new<string>()
    vec.push(names, "Alice")
    vec.push(names, "Bob")
    vec.push(names, "Charlie")
    
    // Build a formatted string
    result := "Names: "
    for i := 0; i < vec.len(names); i += 1 {
        if i > 0 {
            result = string.concat(result, ", ")
        }
        name := vec.get(names, i)
        result = string.concat(result, name)
    }
    
    expected := "Names: Alice, Bob, Charlie"
    if !string.equals(result, expected) {
        io.print("Combined operation failed\n")
        return false
    }
    
    return true
}

// Main test runner
main = () i32   {
    io.print("=== Standard Library Integration Tests ===\n\n")
    
    passed := 0
    failed := 0
    
    // Run string tests
    io.print("Testing string operations... ")
    if test_string_ops() {
        io.print("✓\n")
        passed += 1
    } else {
        io.print("✗\n")
        failed += 1
    }
    
    // Run vector tests
    io.print("Testing vector operations... ")
    if test_vector_ops() {
        io.print("✓\n")
        passed += 1
    } else {
        io.print("✗\n")
        failed += 1
    }
    
    // Run math tests
    io.print("Testing math operations... ")
    if test_math_ops() {
        io.print("✓\n")
        passed += 1
    } else {
        io.print("✗\n")
        failed += 1
    }
    
    // Run time tests
    io.print("Testing time operations... ")
    if test_time_ops() {
        io.print("✓\n")
        passed += 1
    } else {
        io.print("✗\n")
        failed += 1
    }
    
    // Run logging tests
    io.print("Testing logging... ")
    if test_logging() {
        io.print("✓\n")
        passed += 1
    } else {
        io.print("✗\n")
        failed += 1
    }
    
    // Run combined tests
    io.print("Testing combined operations... ")
    if test_combined() {
        io.print("✓\n")
        passed += 1
    } else {
        io.print("✗\n")
        failed += 1
    }
    
    // Print summary
    io.print("\n=== Summary ===\n")
    io.print("Passed: ")
    io.print_int(passed)
    io.print("\nFailed: ")
    io.print_int(failed)
    io.print("\n")
    
    if failed == 0 {
        io.print("\n✓ All integration tests passed!\n")
        return 0
    } else {
        io.print("\n✗ Some integration tests failed.\n")
        return 1
    }
}