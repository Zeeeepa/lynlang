// Test that blocks are expressions and return their last value
{ io , get_default_allocator} = @std

main = () i32 {
    alloc = get_default_allocator()
    io.println("Testing block expressions:")
    
    // Basic block returning value
    x = {
        a = 10
        b = 20
        a + b
    }
    io.println("Basic block: x = ${x}")
    
    // Nested blocks
    y = {
        outer = 5
        inner = {
            temp = outer * 2
            temp + 3
        }
        inner * 2
    }
    io.println("Nested blocks: y = ${y}")
    
    // Block with conditional
    z = {
        val = 15
        val > 10 ?
            | true { val * 2 }
            | false { val + 5 }
    }
    io.println("Block with conditional: z = ${z}")
    
    // Block as function argument
    double = (n: i32) i32 { return n * 2 }
    result = double({
        t1 = 7
        t2 = 8  
        t1 + t2
    })
    io.println("Block as argument: result = ${result}")
    
    // Complex expression block
    final = {
        x1 = 10
        y1 = 20
        z1 = {
            x1 + y1
        }
        w = z1 * 2
        w + 100
    }
    io.println("Complex expression: final = ${final}")
    
    // Block with StaticString result
    message = {
        hour = 14
        hour < 12 ?
            | true { "morning" }
            | false { 
                hour < 18 ?
                    | true { "afternoon" }
                    | false { "evening" }
            }
    }
    io.println("Block returning StaticString: message = ${message}")
    
    // Multiple blocks in expression
    calculation = {
        first = {
            m = 2
            n = 3
            m * n
        }
        second = {
            p = 4
            q = 5
            p + q
        }
        first + second
    }
    io.println("Multiple blocks: calculation = ${calculation}")
    
    io.println("\nAll block expression tests passed!")
    return 0
}