// Test file demonstrating working features from LANGUAGE_SPEC.zen
// This shows what's currently implemented and working

io = @std

// Struct definition - working!
Point: {
    x: i32,
    y: i32,
}

// Function with parameters and return type - working!
add_points = (p1: Point, p2: Point) Point {
    return Point {
        x: p1.x + p2.x,
        y: p1.y + p2.y,
    }
}

// Function to demonstrate variable declarations
test_variables = () void {
    io.println("=== Testing Variable Declarations ===")
    
    // All assignment patterns from spec
    x = 10           // Immutable with inferred type
    y: i32 = 20      // Immutable with explicit type  
    z ::= 30         // Mutable with inferred type
    w :: i32 = 40    // Mutable with explicit type
    
    io.print("x (immutable) = ")
    io.print_int(x)
    io.println("")
    
    io.print("y (immutable typed) = ")
    io.print_int(y)
    io.println("")
    
    io.print("z (mutable) = ")
    io.print_int(z)
    io.println("")
    
    // Mutation test
    z = z + 5
    io.print("z after mutation = ")
    io.print_int(z)
    io.println("")
    
    io.print("w (mutable typed) = ")
    io.print_int(w)
    io.println("")
}

// Function to test structs
test_structs = () void {
    io.println("\n=== Testing Structs ===")
    
    p1 ::= Point { x: 10, y: 20 }
    p2 ::= Point { x: 5, y: 15 }
    
    io.print("p1.x = ")
    io.print_int(p1.x)
    io.print(", p1.y = ")
    io.print_int(p1.y)
    io.println("")
    
    p3 ::= add_points(p1, p2)
    io.print("p1 + p2 = Point { x: ")
    io.print_int(p3.x)
    io.print(", y: ")
    io.print_int(p3.y)
    io.println(" }")
}

// Function to test range loops
test_ranges = () void {
    io.println("\n=== Testing Range Loops ===")
    
    io.print("Range 0..5: ")
    (0..5).loop((i) {
        io.print_int(i)
        io.print(" ")
    })
    io.println("")
    
    io.print("Range 10..=12 (inclusive): ")
    (10..=12).loop((i) {
        io.print_int(i)
        io.print(" ")
    })
    io.println("")
}

// Function to test arithmetic
test_arithmetic = () void {
    io.println("\n=== Testing Arithmetic ===")
    
    a = 100
    b = 25
    
    io.print("100 + 25 = ")
    io.print_int(a + b)
    io.println("")
    
    io.print("100 - 25 = ")
    io.print_int(a - b)
    io.println("")
    
    io.print("100 * 25 = ")
    io.print_int(a * b)
    io.println("")
    
    io.print("100 / 25 = ")
    io.print_int(a / b)
    io.println("")
}

// Function to test comparisons
test_comparisons = () void {
    io.println("\n=== Testing Comparisons ===")
    
    x = 10
    y = 20
    
    io.print("10 < 20 = ")
    x < y ? { io.println("true") }
    
    io.print("10 > 20 = ")
    result = x > y
    result ? 
        | true { io.println("true") }
        | false { io.println("false") }
    
    io.print("10 == 10 = ")
    x == 10 ? { io.println("true") }
}

// Main function
main = () i32 {
    io.println("=== Zen Language Spec Working Features Demo ===\n")
    
    test_variables()
    test_structs()
    test_ranges()
    test_arithmetic()
    test_comparisons()
    
    io.println("\n=== All Tests Completed Successfully! ===")
    
    return 0
}