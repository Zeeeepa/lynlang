// Simple trait test based on LANGUAGE_SPEC.zen lines 123-144

{ io } = @std

// Trait definition - methods that types can implement (line 123-127)
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Circle struct (line 130-133)
Circle: {
    center: Point,
    radius: f64,
}

// Point struct (needed for Circle)
Point: {
    x: f64,
    y: f64,
}

// Implement trait for type using .implements() (line 136-143)
Circle.implements(Geometric, {
    area = (self) f64 {
        return 3.14159 * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * 3.14159 * self.radius
    },
})

main = () void {
    // Create a circle
    c = Circle { 
        center: Point { x: 0.0, y: 0.0 },
        radius: 5.0 
    }
    
    // Call trait methods
    io.println("Circle area: ${c.area()}")
    io.println("Circle perimeter: ${c.perimeter()}")
}