// Test case for Zen language pointer types as specified in LANGUAGE_SPEC.zen
// Tests Ptr<T>, MutPtr<T>, RawPtr<T> and their operations: .val, .addr, .ref(), .mut_ref()

// Define a simple struct for testing
struct Point {
    x: i32,
    y: i32,
}

struct Circle {
    center: Point,
    radius: f32,
}

// Method for Circle to calculate area
impl Circle {
    fn area(self) -> f32 {
        3.14159 * self.radius * self.radius
    }
}

fn test_basic_pointer_types() {
    io.println("=== Testing Basic Pointer Types ===")
    
    // Test with integers
    value: i32 = 42
    
    // Create immutable pointer: .ref()
    ptr: Ptr<i32> = value.ref()
    io.println("Original value: ${value}")
    io.println("Dereferenced pointer: ${ptr.val}")
    io.println("Pointer address: ${ptr.addr}")
    
    // Test mutability
    :: mut_value: i32 = 100
    
    // Create mutable pointer: .mut_ref()  
    mut_ptr: MutPtr<i32> = mut_value.mut_ref()
    io.println("Mutable value before: ${mut_value}")
    mut_ptr.val = 200  // Modify through pointer
    io.println("Mutable value after: ${mut_value}")
    
    io.println("")
}

fn test_struct_pointers() {
    io.println("=== Testing Struct Pointers ===")
    
    circle = Circle { 
        center: Point { x: 100, y: 100 }, 
        radius: 50.0
    }
    
    // Create pointer to struct
    circle_ptr: Ptr<Circle> = circle.ref()
    
    // Access fields through pointer
    io.println("Circle center x: ${circle_ptr.val.center.x}")
    io.println("Circle center y: ${circle_ptr.val.center.y}")
    io.println("Circle radius: ${circle_ptr.val.radius}")
    
    // Call method through pointer
    area = circle_ptr.val.area()
    io.println("Circle area: ${area}")
    
    // Test mutable struct pointer
    :: mut_circle = Circle { 
        center: Point { x: 0, y: 0 }, 
        radius: 25.0
    }
    
    circle_mut: MutPtr<Circle> = mut_circle.mut_ref()
    io.println("Original radius: ${circle_mut.val.radius}")
    
    // Modify through mutable pointer
    circle_mut.val.radius = 75.0
    io.println("Modified radius: ${circle_mut.val.radius}")
    io.println("Address: ${circle_mut.addr}")
    
    io.println("")
}

fn test_raw_pointers() {
    io.println("=== Testing Raw Pointers ===")
    
    // Raw pointers are for unsafe/FFI operations
    data: i32 = 999
    raw_ptr: RawPtr<i32> = data.ref() as RawPtr<i32>
    
    io.println("Raw pointer value: ${raw_ptr.val}")
    io.println("Raw pointer address: ${raw_ptr.addr}")
    
    io.println("")
}

fn test_pointer_conversions() {
    io.println("=== Testing Pointer Conversions ===")
    
    value: f64 = 3.14159
    
    // Start with immutable pointer
    immutable_ptr: Ptr<f64> = value.ref()
    io.println("Immutable pointer: ${immutable_ptr.val}")
    
    // Convert to mutable (typically would require mut variable)
    :: mut_value: f64 = 2.71828
    mutable_ptr: MutPtr<f64> = mut_value.mut_ref()
    io.println("Mutable pointer: ${mutable_ptr.val}")
    
    // Convert to raw pointer (for FFI)  
    raw_ptr: RawPtr<f64> = immutable_ptr as RawPtr<f64>
    io.println("Raw pointer: ${raw_ptr.val}")
    
    io.println("")
}

fn test_nested_structs_pointers() {
    io.println("=== Testing Nested Struct Pointers ===")
    
    point1 = Point { x: 10, y: 20 }
    point2 = Point { x: 30, y: 40 }
    
    point1_ptr: Ptr<Point> = point1.ref()
    point2_ptr: Ptr<Point> = point2.ref()
    
    io.println("Point1 via pointer: (${point1_ptr.val.x}, ${point1_ptr.val.y})")
    io.println("Point2 via pointer: (${point2_ptr.val.x}, ${point2_ptr.val.y})")
    
    // Test pointer to pointer (advanced)
    ptr_to_ptr: Ptr<Ptr<Point>> = point1_ptr.ref()
    io.println("Nested pointer access: ${ptr_to_ptr.val.val.x}")
    
    io.println("")
}

fn test_pointer_type_annotations() {
    io.println("=== Testing Explicit Pointer Type Annotations ===")
    
    // Explicit type annotations  
    number: i32 = 12345
    
    explicit_ptr: Ptr<i32> = number.ref()
    explicit_mut_ptr: MutPtr<i32> 
    explicit_raw_ptr: RawPtr<i32>
    
    :: mut_number: i32 = 54321
    explicit_mut_ptr = mut_number.mut_ref()
    explicit_raw_ptr = number.ref() as RawPtr<i32>
    
    io.println("Explicit immutable: ${explicit_ptr.val}")
    io.println("Explicit mutable: ${explicit_mut_ptr.val}")
    io.println("Explicit raw: ${explicit_raw_ptr.val}")
    
    io.println("")
}

fn main() {
    io.println("Zen Pointer Types Test Suite")
    io.println("============================")
    io.println("")
    
    test_basic_pointer_types()
    test_struct_pointers()
    test_raw_pointers()
    test_pointer_conversions()
    test_nested_structs_pointers()
    test_pointer_type_annotations()
    
    io.println("All pointer tests completed!")
}