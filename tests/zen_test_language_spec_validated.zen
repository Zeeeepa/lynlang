// Comprehensive test to validate LANGUAGE_SPEC.zen implementation
// This test only includes features that are currently working

{ io, math } = @std

// ============================================================================
// 1. NO KEYWORDS - Pattern matching replaces all control flow
// ============================================================================

// Simple struct (lines 117-120)
Point: {
    x:: f64, // mutable field
    y:: f64 = 0.0 // with default value
}

// Trait definition (lines 123-127)
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Circle struct (lines 130-133)
Circle: {
    center: Point,
    radius: f64,
}

// Implement trait for type using .implements() (lines 136-143)
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

// Rectangle struct (lines 146-149)
Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

// Implement trait for Rectangle (lines 151-162)
Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// Enum type (sum type) (lines 165-166)
Shape: Circle | Rectangle

// Option type (lines 109-110)
Option<T>: Some(T) | None

// Result type (lines 112-113)
Result<T, E>: Ok(T) | Err(E)

// Generic function with constraints (lines 184-187) - simplified without constraints
print_area = (shape: Circle) void {
    io.println("Area: ${shape.area()}")
}

main = () void {
    io.println("=== Zen Language Spec Validation ===")
    
    // ============================================================================
    // 2. VARIABLE DECLARATIONS (lines 298-306)
    // ============================================================================
    io.println("\n1. Variable Declarations:")
    
    x: i32 // forward declaration
    x = 10
    io.println("  Forward declared x = ${x}")
    
    y = 20 // Immutable assignment
    io.println("  Immutable y = ${y}")
    
    z: i32 = 30 // Immutable with type
    io.println("  Immutable with type z = ${z}")
    
    w:: i32 // mutable forward declaration
    w = 40
    io.println("  Mutable forward declared w = ${w}")
    
    v ::= 50 // Mutable assignment
    v = 60 // Can reassign
    io.println("  Mutable v = ${v}")
    
    u:: i32 = 70 // mutable with type
    u = 80 // Can reassign
    io.println("  Mutable with type u = ${u}")
    
    // ============================================================================
    // 3. PATTERN MATCHING WITH ? OPERATOR (lines 351-361)
    // ============================================================================
    io.println("\n2. Pattern Matching:")
    
    // Boolean pattern matching
    is_ready = true
    is_ready ? { 
        io.println("  Boolean single branch: Starting!") 
    }
    
    // Full boolean pattern match
    has_data = false
    has_data ?
        | true { io.println("  Has data") }
        | false { io.println("  Boolean full match: Waiting for data...") }
    
    // ============================================================================
    // 4. STRUCTS AND TRAITS (lines 117-162, 364-370)
    // ============================================================================
    io.println("\n3. Structs and Traits:")
    
    // Create a circle
    circle = Circle { 
        center: Point { x: 100.0, y: 100.0 }, 
        radius: 50.0 
    }
    io.println("  Circle area: ${circle.area()}")
    io.println("  Circle perimeter: ${circle.perimeter()}")
    
    // Create a rectangle
    rect = Rectangle {
        top_left: Point { x: 0.0, y: 0.0 },
        bottom_right: Point { x: 50.0, y: 50.0 }
    }
    io.println("  Rectangle area: ${rect.area()}")
    io.println("  Rectangle perimeter: ${rect.perimeter()}")
    
    // ============================================================================
    // 5. OPTION TYPE (lines 461-473)
    // ============================================================================
    io.println("\n4. Option Type:")
    
    maybe_radius: Option<f64> = Some(5.5)
    maybe_radius ?
        | Some(r) {
            c = Circle {
                center: Point { x: 0.0, y: 0.0 },
                radius: r,
            }
            io.println("  Created circle with area: ${c.area()}")
        }
        | None {
            io.println("  No radius provided")
        }
    
    none_value: Option<f64> = None
    none_value ?
        | Some(v) { io.println("  Value: ${v}") }
        | None { io.println("  Option is None") }
    
    // ============================================================================
    // 6. RESULT TYPE
    // ============================================================================
    io.println("\n5. Result Type:")
    
    success: Result<i32, string> = Ok(42)
    success ?
        | Ok(v) { io.println("  Success: ${v}") }
        | Err(e) { io.println("  Error: ${e}") }
    
    // ============================================================================
    // 7. LOOPS (lines 431-459)
    // ============================================================================
    io.println("\n6. Loops:")
    
    // Range iteration
    io.println("  Range (0..5):")
    (0..5).loop((i) {
        io.println("    Count: ${i}")
    })
    
    // Infinite loop with break
    io.println("  Infinite loop with break:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { break }
            | false { io.println("    Loop count: ${counter}") }
    })
    
    // ============================================================================
    // 8. STRING INTERPOLATION
    // ============================================================================
    io.println("\n7. String Interpolation:")
    value = 123
    message = "The value is ${value}"
    io.println("  ${message}")
    
    io.println("\n=== All Tests Passed ===")
}
