// Test improved Result<T,E> handling in raise() with function call results
{ io, Result } = @std

main = () i32 {
    // Test 1: Basic closure returning Result<i32, string>
    get_int = () {
        return Result.Ok(42)
    }
    
    val1 = get_int().raise()
    val1 == 42 ? {
        io.println("✓ Test 1: Result<i32,string> from closure works")
    }
    val1 != 42 ? {
        io.println("✗ Test 1 failed: Got ${val1}")
        return 1
    }
    
    // Test 2: Closure returning Result<f64, string>
    get_float = () {
        return Result.Ok(3.14)
    }
    
    val2 = get_float().raise()
    val2 == 3.14 ? {
        io.println("✓ Test 2: Result<f64,string> from closure works")
    }
    val2 != 3.14 ? {
        io.println("✗ Test 2 failed: Got ${val2}")
        return 1
    }
    
    // Test 3: Closure with params returning Result
    multiply = (a: i32, b: i32) {
        return Result.Ok(a * b)
    }
    
    val3 = multiply(3, 7).raise()
    val3 == 21 ? {
        io.println("✓ Test 3: Closure with params works")
    }
    val3 != 21 ? {
        io.println("✗ Test 3 failed: Got ${val3}")
        return 1
    }
    
    io.println("\n✅ All closure Result<T,E> raise() tests passed!")
    return 0
}
