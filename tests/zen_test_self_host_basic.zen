// Basic self-hosting test
// Tests that fundamental language features work correctly

io := @std.io
string := @std.string
core := @std.core

// Test function declarations
add: (a: i32, b: i32) i32  = {
    return a + b
}

// Test struct declaration
Point: {
    x: i32,
    y: i32,
}

// Test enum declaration
Status: 
    Ok,
    Error -> code: i32,

// Test pattern matching
check_status: (s: Status) string  = {
    match s {
        | Status.Ok => "Success"
        | Status.Error -> code => string.from_int(code)
    }
}

// Test loops
factorial: (n: i32) i32  = {
    n <= 1 ? { return 1 } : {}
    
    result := 1
    i := 2
    loop i <= n {
        result = result * i
        i = i + 1
    }
    return result
}

// Test string operations
test_strings: () void  = {
    s1 := "Hello"
    s2 := "World"
    combined := string.join([s1, s2], " ")
    
    io.println("Combined: " + combined)
    io.println("Uppercase: " + string.to_uppercase(combined))
    io.println("Length: " + string.from_int(string.len(combined)))
}

// Test conditionals
max: (a: i32, b: i32) i32  = {
    a > b ? { return a } : { return b }
}

// Test arrays
sum_array: (arr: [i32], len: usize) i32  = {
    sum := 0
    i := 0 as usize
    loop i < len {
        sum = sum + arr[i]
        i = i + 1
    }
    return sum
}

// Main test function
main: () i32  = {
    io.println("=== Zen Self-Hosting Test ===")
    
    // Test arithmetic
    result := add(10, 20)
    io.println("10 + 20 = " + string.from_int(result))
    
    // Test struct
    p := Point{ x: 5, y: 10 }
    io.println("Point: (" + string.from_int(p.x) + ", " + string.from_int(p.y) + ")")
    
    // Test enum and pattern matching
    status := Status.Ok
    io.println("Status: " + check_status(status))
    
    error_status := Status.Error -> code: 404
    io.println("Error: " + check_status(error_status))
    
    // Test loops
    fact5 := factorial(5)
    io.println("5! = " + string.from_int(fact5))
    
    // Test strings
    test_strings()
    
    // Test conditionals
    larger := max(42, 37)
    io.println("Max(42, 37) = " + string.from_int(larger))
    
    // Test arrays
    numbers := [1, 2, 3, 4, 5]
    total := sum_array(numbers, 5)
    io.println("Sum of [1,2,3,4,5] = " + string.from_int(total))
    
    io.println("=== All tests passed! ===")
    return 0
}