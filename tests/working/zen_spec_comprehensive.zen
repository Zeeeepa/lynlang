// ============================================================================
// LANGUAGE_SPEC.zen Comprehensive Implementation Test
// Demonstrates all features from the specification that should work
// ============================================================================

{ io } = @std

// ============================================================================
// Core Type Definitions (from spec lines 117-165)
// ============================================================================

// Simple struct (line 117-120)
Point: {
    x: f64,
    y: f64
}

// Enum type (line 165)
Shape: Circle | Rectangle

// ============================================================================
// Functions (working in Rust compiler)
// ============================================================================

// Basic function (no complex features yet)
greet = (name: string) void {
    io.println("Hello from Zen!")
}

// Simple math function
add_numbers = (a: i32, b: i32) i32 {
    return a + b
}

main = () void {
    io.println("============================================================")
    io.println("LANGUAGE_SPEC.zen Comprehensive Test Suite")
    io.println("============================================================")
    
    // === 1. Variable Declarations (spec lines 298-306) ===
    io.println("1. Variable Declarations")
    
    // Forward declaration (line 299)
    x: i32
    x = 10
    
    // Immutable assignment (line 301)
    y = 20
    
    // Mutable assignment (line 305)
    v ::= 30
    v = 35
    
    // With explicit types (line 302, 306)
    z: i32 = 25
    u:: i32 = 40
    u = 45
    
    io.println("Variables declared successfully")
    
    // === 2. Functions ===
    io.println("2. Functions")
    greet("World")
    result = add_numbers(10, 15)
    io.println("Function calls completed")
    
    // === 3. Structs ===  
    io.println("3. Structs")
    point = Point { x: 100.0, y: 200.0 }
    io.println("Struct created")
    
    // === 4. Enums ===
    io.println("4. Enums")
    // Just definition for now - variants usage needs implementation
    io.println("Enum defined")
    
    // === 5. Boolean Pattern Matching (spec lines 352-361) ===
    io.println("5. Pattern Matching")
    
    // Simple boolean pattern (lines 353-355)
    is_ready = true
    is_ready ? {
        io.println("System is ready!")
    }
    
    // Full pattern match (lines 358-361)
    has_data = false
    has_data ?
        | true { io.println("Processing data") }
        | false { io.println("Waiting for data") }
    
    io.println("Pattern matching completed")
    
    io.println("============================================================")
    io.println("Core Language Features Test Completed!")
    io.println("============================================================")
}

// Module exports not yet implemented in Rust compiler
// TODO: Implement module.exports syntax from spec lines 491-502
