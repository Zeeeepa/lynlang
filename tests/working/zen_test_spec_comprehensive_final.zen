// ============================================================================
// LANGUAGE_SPEC.zen Comprehensive Test Suite
// Testing all implemented features from the specification
// ============================================================================

{ io } = @std

// ============================================================================
// Core Type Definitions (from spec lines 117-165)
// ============================================================================

// Simple struct (line 117-120)
Point: {
    x: f64,
    y: f64
}

// Enum type (line 165)
Shape: Circle | Rectangle

// ============================================================================
// Test Functions
// ============================================================================

test_variables = () void {
    io.println("=== 1. Variable Declarations (spec lines 298-306) ===")
    
    // Forward declaration (line 299)
    x: i32
    x = 10
    io.println(x)
    
    // Immutable assignment (line 301)
    y = 20
    io.println(y)
    
    // Mutable with type (line 306)
    u :: i32 = 40
    u = 45
    io.println(u)
    
    // Mutable assignment (line 305)
    v ::= 30
    v = 35
    io.println(v)
    
    io.println("PASSED")
}

test_booleans = () void {
    io.println("=== 2. Boolean Patterns (spec lines 352-361) ===")
    
    // Single branch (line 353-355)
    is_ready = true
    is_ready ? { 
        io.println("Ready!") 
    }
    
    // Full pattern match (line 358-361)
    has_data = false
    has_data ?
        | true { io.println("Has data") }
        | false { io.println("No data") }
    
    io.println("PASSED")
}

test_structs = () void {
    io.println("=== 3. Structs (spec lines 117-120, 364-371) ===")
    
    // Struct creation (line 364)
    point = Point { x: 100.0, y: 200.0 }
    io.println("Point created")
    
    // Field access (line 368-369)
    io.println(point.x)
    io.println(point.y)
    
    io.println("PASSED")
}

test_loops = () void {
    io.println("=== 4. Loops (spec lines 432-460) ===")
    
    // Range loop (line 432-434)
    io.println("Range 0..3:")
    (0..3).loop((i) {
        io.println(i)
    })
    
    // Range with step (line 437-439)
    io.println("Range 0..6 step 2:")
    (0..6).step(2).loop((i) {
        io.println(i)
    })
    
    // Infinite loop with break (line 453-460)
    io.println("Infinite loop:")
    counter ::= 0
    loop(() {
        io.println(counter)
        counter = counter + 1
        counter > 2 ?
            | true { break }
            | false { }
    })
    
    io.println("PASSED")
}

test_options = () void {
    io.println("=== 5. Option Types (spec lines 109-110, 462-473) ===")
    
    // Some value (line 462)
    maybe_radius: Option<f64> = Some(5.5)
    maybe_radius ?
        | Some(r) { 
            io.println("Has radius") 
        }
        | None { 
            io.println("No radius") 
        }
    
    // None value
    empty: Option<i32> = None
    empty ?
        | Some(v) { 
            io.println("Has value") 
        }
        | None { 
            io.println("Is empty") 
        }
    
    io.println("PASSED")
}

test_enums = () void {
    io.println("=== 6. Enums (spec line 165) ===")
    
    // Basic enum declaration works
    io.println("Shape enum defined")
    
    // TODO: Enum variant usage when implemented
    // shape: Shape = Shape.Circle
    
    io.println("PASSED")
}

test_functions = () void {
    io.println("=== 7. Functions (spec lines 176-183) ===")
    
    // Functions are working (we're using them!)
    result = add(10, 20)
    io.println(result)
    
    io.println("PASSED")
}

// Helper function for testing
add = (a: i32, b: i32) i32 {
    return a + b
}

// ============================================================================
// Main Test Runner
// ============================================================================

main = () void {
    io.println("============================================================")
    io.println("LANGUAGE_SPEC.zen Comprehensive Test Suite")
    io.println("============================================================")
    io.println("")
    
    test_variables()
    io.println("")
    
    test_booleans()
    io.println("")
    
    test_structs()
    io.println("")
    
    test_loops()
    io.println("")
    
    test_options()
    io.println("")
    
    test_enums()
    io.println("")
    
    test_functions()
    io.println("")
    
    io.println("============================================================")
    io.println("All Core Features Working!")
    io.println("============================================================")
}