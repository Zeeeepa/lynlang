// Consolidated struct tests
// Combines functionality from multiple test_struct_*.zen files

{ io, Array, get_default_allocator, Result } = @std

// Test 1: Basic struct definition and instantiation
Point : {
    x: i32,
    y: i32
}

test_basic_struct = () void {
    io.println("=== Test 1: Basic Struct ===")
    
    p = Point { x: 10, y: 20 }
    io.println("Point created: x=${p.x}, y=${p.y}")
    
    // Modify fields
    p.x = 15
    p.y = 25
    io.println("Point modified: x=${p.x}, y=${p.y}")
}

// Test 2: Struct with methods
Person : {
    name: string,
    age: i32
}

// Method for Person struct
get_info = (self: Person) string {
    "Name: " + self.name + ", Age: " + self.age
}

test_struct_methods = () void {
    io.println("=== Test 2: Struct with Methods ===")
    
    person = Person { name: "Alice", age: 30 }
    info = get_info(person)
    io.println("Person info: ${info}")
}

// Test 3: Struct with generic types
Container<T> : {
    value: T,
    count: i32
}

test_generic_struct = () void {
    io.println("=== Test 3: Generic Struct ===")
    
    int_container = Container<i32> { value: 42, count: 1 }
    io.println("Int container: value=${int_container.value}, count=${int_container.count}")
    
    string_container = Container<string> { value: "hello", count: 2 }
    io.println("String container: value=${string_container.value}, count=${string_container.count}")
}

// Test 4: Struct with Option fields
OptionalPoint = struct {
    x: Option<i32>,
    y: Option<i32>
}

test_option_struct = () void {
    io.println("=== Test 4: Struct with Option Fields ===")
    
    point1 = OptionalPoint { x: Some(10), y: Some(20) }
    point1.x ?
        | Some(x_val) { io.println("Point1 x: ${x_val}") }
        | None { io.println("Point1 x: None") }
    
    point2 = OptionalPoint { x: None, y: Some(30) }
    point2.x ?
        | Some(x_val) { io.println("Point2 x: ${x_val}") }
        | None { io.println("Point2 x: None (correct)") }
}

// Test 5: Struct with Result fields
ResultPoint = struct {
    x: Result<i32, string>,
    y: Result<i32, string>
}

test_result_struct = () void {
    io.println("=== Test 5: Struct with Result Fields ===")
    
    point = ResultPoint { x: Result.Ok(10), y: Result.Err("Invalid y") }
    
    point.x ?
        | .Ok(x_val) { io.println("Point x: ${x_val}") }
        | .Err(x_err) { io.println("Point x error: ${x_err}") }
    
    point.y ?
        | .Ok(y_val) { io.println("Point y: ${y_val}") }
        | .Err(y_err) { io.println("Point y error: ${y_err}") }
}

// Test 6: Nested structs
Address = struct {
    street: string,
    city: string
}

Employee = struct {
    name: string,
    address: Address,
    salary: i32
}

test_nested_structs = () void {
    io.println("=== Test 6: Nested Structs ===")
    
    address = Address { street: "123 Main St", city: "Zen City" }
    employee = Employee { name: "Bob", address: address, salary: 50000 }
    
    io.println("Employee: ${employee.name}")
    io.println("Address: ${employee.address.street}, ${employee.address.city}")
    io.println("Salary: ${employee.salary}")
}

// Test 7: Struct with array field
ArrayStruct = struct {
    numbers: Array<i32>,
    name: string
}

test_array_struct = () void {
    io.println("=== Test 7: Struct with Array ===")
    
    alloc = get_default_allocator()
    arr = Array<i32>(alloc)
    arr.push(1)
    arr.push(2)
    arr.push(3)
    
    struct_with_array = ArrayStruct { numbers: arr, name: "Numbers" }
    io.println("Struct name: ${struct_with_array.name}")
    io.println("Array length: ${struct_with_array.numbers.len()}")
    
    (0..struct_with_array.numbers.len()).loop((i) {
        val = struct_with_array.numbers.get(i)
        io.println("  numbers[${i}] = ${val}")
    })
}

// Test 8: Struct with methods using self
Rectangle = struct {
    width: i32,
    height: i32
}

// Method to calculate area
calculate_area = (self: Rectangle) i32 {
    self.width * self.height
}

// Method to calculate perimeter
calculate_perimeter = (self: Rectangle) i32 {
    2 * (self.width + self.height)
}

test_struct_self_methods = () void {
    io.println("=== Test 8: Struct with Self Methods ===")
    
    rect = Rectangle { width: 10, height: 5 }
    
    area = calculate_area(rect)
    perimeter = calculate_perimeter(rect)
    
    io.println("Rectangle: ${rect.width}x${rect.height}")
    io.println("Area: ${area}")
    io.println("Perimeter: ${perimeter}")
}

// Test 9: Struct with default values
DefaultStruct = struct {
    value: i32,
    name: string,
    active: bool
}

test_default_struct = () void {
    io.println("=== Test 9: Struct with Default Values ===")
    
    // Create with some values
    struct1 = DefaultStruct { value: 100, name: "Test", active: true }
    io.println("Struct1: value=${struct1.value}, name=${struct1.name}, active=${struct1.active}")
    
    // Modify values
    struct1.value = 200
    struct1.active = false
    io.println("Modified: value=${struct1.value}, active=${struct1.active}")
}

// Test 10: Struct comparison
test_struct_comparison = () void {
    io.println("=== Test 10: Struct Comparison ===")
    
    point1 = Point { x: 10, y: 20 }
    point2 = Point { x: 10, y: 20 }
    point3 = Point { x: 15, y: 25 }
    
    // Compare coordinates
    same_x = point1.x == point2.x
    same_y = point1.y == point2.y
    different_x = point1.x != point3.x
    
    io.println("Same x: ${same_x}")
    io.println("Same y: ${same_y}")
    io.println("Different x: ${different_x}")
}

main = () void {
    io.println("=== Struct Tests ===")
    io.println("")
    
    test_basic_struct()
    io.println("")
    
    test_struct_methods()
    io.println("")
    
    test_generic_struct()
    io.println("")
    
    test_option_struct()
    io.println("")
    
    test_result_struct()
    io.println("")
    
    test_nested_structs()
    io.println("")
    
    test_array_struct()
    io.println("")
    
    test_struct_self_methods()
    io.println("")
    
    test_default_struct()
    io.println("")
    
    test_struct_comparison()
    io.println("")
    
    io.println("=== Struct Tests Complete ===")
}
