// Simple test of Result type and error handling
{ io, Result , get_default_allocator} = @std

// Simple Result operations
divide = (a: i32, b: i32) Result<i32, string> {
    return b == 0 ? 
        | true { Result.Err("Division by zero") }
        | false { Result.Ok(a / b) }
}

// Test pattern matching on Result
test_result_matching = () i32 {
    io.println("Testing Result pattern matching:")
    
    result1 = divide(10, 2)
    result1 ?
        | .Ok(val1) { io.println("  10 / 2 = ${val1}") }
        | .Err(err1) { io.println("  Error: ${err1}") }
    
    result2 = divide(10, 0)
    result2 ?
        | .Ok(val2) { io.println("  10 / 0 = ${val2}") }
        | .Err(err2) { io.println("  Error: ${err2}") }
    
    return 0
}

// Chain operations manually
safe_calculation = (x: i32) Result<i32, string> {
    io.println("Performing safe calculation on ${x}:")
    
    // First operation: divide by 2
    step1 = divide(x, 2)
    step1 ?
        | .Ok(v1) {
            io.println("  Step 1: ${x} / 2 = ${v1}")
            
            // Second operation: add 10
            v2 = v1 + 10
            io.println("  Step 2: ${v1} + 10 = ${v2}")
            
            // Third operation: divide by 3
            step3 = divide(v2, 3)
            step3 ?
                | .Ok(v3) {
                    io.println("  Step 3: ${v2} / 3 = ${v3}")
                    return Result.Ok(v3)
                }
                | .Err(e3) {
                    io.println("  Step 3 failed: ${e3}")
                    return Result.Err(e3)
                }
        }
        | .Err(e1) {
            io.println("  Step 1 failed: ${e1}")
            return Result.Err(e1)
        }
}

main = () i32 {
    alloc = get_default_allocator()
    io.println("═══════════════════════════════")
    io.println("  SIMPLE ERROR HANDLING TEST   ")
    io.println("═══════════════════════════════")
    io.println("")
    
    test_result_matching()
    
    io.println("")
    calc1 = safe_calculation(24)
    calc1 ?
        | .Ok(res1) { io.println("Final result: ${res1}") }
        | .Err(err1) { io.println("Calculation failed: ${err1}") }
    
    io.println("")
    calc2 = safe_calculation(0)
    calc2 ?
        | .Ok(res2) { io.println("Final result: ${res2}") }
        | .Err(err2) { io.println("Calculation failed: ${err2}") }
    
    io.println("")
    io.println("All tests completed!")
    
    return 0
}