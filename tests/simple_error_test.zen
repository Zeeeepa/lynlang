// Simple test of Result type and error handling
{ io, Result } = @std

// Simple Result operations
divide = (a: i32, b: i32) Result<i32, string> {
    b == 0 ? {
        return Result.Err("Division by zero")
    }
    return Result.Ok(a / b)
}

// Test pattern matching on Result
test_result_matching = () void {
    io.println("Testing Result pattern matching:")
    
    result1 = divide(10, 2)
    result1 ?
        | .Ok(value) { io.println("  10 / 2 = ${value}") }
        | .Err(error) { io.println("  Error: ${error}") }
    
    result2 = divide(10, 0)
    result2 ?
        | .Ok(value) { io.println("  10 / 0 = ${value}") }
        | .Err(error) { io.println("  Error: ${error}") }
}

// Chain operations manually
safe_calculation = (x: i32) Result<i32, string> {
    io.println("Performing safe calculation on ${x}:")
    
    // First operation: divide by 2
    step1 = divide(x, 2)
    step1 ?
        | .Ok(val1) {
            io.println("  Step 1: ${x} / 2 = ${val1}")
            
            // Second operation: add 10
            val2 = val1 + 10
            io.println("  Step 2: ${val1} + 10 = ${val2}")
            
            // Third operation: divide by 3
            step3 = divide(val2, 3)
            step3 ?
                | .Ok(val3) {
                    io.println("  Step 3: ${val2} / 3 = ${val3}")
                    return Result.Ok(val3)
                }
                | .Err(e) {
                    io.println("  Step 3 failed: ${e}")
                    return Result.Err(e)
                }
        }
        | .Err(e) {
            io.println("  Step 1 failed: ${e}")
            return Result.Err(e)
        }
}

main = () i32 {
    io.println("═══════════════════════════════")
    io.println("  SIMPLE ERROR HANDLING TEST   ")
    io.println("═══════════════════════════════")
    io.println("")
    
    test_result_matching()
    
    io.println("")
    calc1 = safe_calculation(24)
    calc1 ?
        | .Ok(result) { io.println("Final result: ${result}") }
        | .Err(error) { io.println("Calculation failed: ${error}") }
    
    io.println("")
    calc2 = safe_calculation(0)
    calc2 ?
        | .Ok(result) { io.println("Final result: ${result}") }
        | .Err(error) { io.println("Calculation failed: ${error}") }
    
    io.println("")
    io.println("All tests completed!")
    
    return 0
}