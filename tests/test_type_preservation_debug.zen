// Debug type preservation issue
{ io, Result , get_default_allocator} = @std

main = () i32 {
    alloc = get_default_allocator()
    io.println("Testing type preservation")
    
    // Step 1: Create inner Result
    inner = Result.Ok(555)
    
    // Step 2: Pattern match to verify it works
    inner ?
        | Result.Ok(v) { io.println("Direct inner: ${v}") }
        | Result.Err(e) { io.println("Direct inner error") }
    
    // Step 3: Store in variable
    stored = inner
    
    // Step 4: Pattern match on stored variable
    stored ?
        | Result.Ok(v) { io.println("Stored inner: ${v}") }
        | Result.Err(e) { io.println("Stored inner error") }
    
    // Step 5: Create outer with stored inner
    outer = Result.Ok(stored)
    
    // Step 6: Extract nested
    outer ?
        | Result.Ok(inner_res) {
            io.println("Got inner from outer")
            inner_res ?
                | Result.Ok(val) { 
                    io.println("Nested value: ${val}")
                    val == 555 ?
                        | true { io.println("SUCCESS: Got 555") }
                        | false { io.println("FAIL: Got ${val} instead of 555") }
                }
                | Result.Err(e) { io.println("Inner error") }
        }
        | Result.Err(e) { io.println("Outer error") }
    
    0
}