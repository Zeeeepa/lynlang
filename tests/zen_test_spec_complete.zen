// Complete test of LANGUAGE_SPEC.zen features
// This test file covers all features defined in the spec

// ============================================================================
// PART 1: Basic Variables and Types (Lines 298-306)
// ============================================================================

test_variables = () void {
    // Forward declaration
    x: i32
    x = 10
    
    // Immutable assignment
    y = 20
    
    // Immutable with type
    z: i32 = 30
    
    // Mutable forward declaration
    w:: i32
    w = 40
    
    // Mutable assignment
    v ::= 50
    
    // Mutable with type
    u:: i32 = 60
}

// ============================================================================
// PART 2: Pattern Matching (Lines 352-361)
// ============================================================================

test_pattern_matching = () void {
    is_ready = true
    
    // Simple boolean pattern
    is_ready ? {
        a = 1
    }
    
    // Full pattern match
    has_data = false
    has_data ?
        | true { b = 1 }
        | false { c = 2 }
}

// ============================================================================
// PART 3: Structs (Lines 117-120)
// ============================================================================

Point: {
    x:: f64,
    y:: f64 = 0.0
}

Circle: {
    center: Point,
    radius: f64
}

Rectangle: {
    top_left: Point,
    bottom_right: Point
}

// ============================================================================
// PART 4: Option Types (Lines 109-110, 462-473)
// ============================================================================

Option<T>: Some(T) | None

test_option = () void {
    maybe_value: Option<i32> = Some(42)
    
    maybe_value ?
        | Some(v) { a = v }
        | None { a = 0 }
}

// ============================================================================
// PART 5: Result Types (Lines 113-114)
// ============================================================================

Result<T, E>: Ok(T) | Err(E)

test_result = () void {
    result: Result<i32, string> = Ok(100)
    
    result ?
        | Ok(val) { a = val }
        | Err(msg) { b = 0 }
}

// ============================================================================
// PART 6: Basic Enums (Line 165)
// ============================================================================

Shape: Circle | Rectangle

GameEntity: Player | Enemy | Powerup

// ============================================================================
// PART 7: Functions (Lines 176-183)
// ============================================================================

get_value = () i32 {
    return 42
}

add_numbers = (a: i32, b: i32) i32 {
    return a + b
}

// ============================================================================
// PART 8: Loops (Lines 432-460)
// ============================================================================

test_loops = () void {
    // Range loop
    (0..5).loop((i) {
        a = i
    })
    
    // Step range
    (0..10).step(2).loop((i) {
        b = i
    })
    
    // Infinite loop with break
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 5 ?
            | true { break }
            | false { c = counter }
    })
}

// ============================================================================
// PART 9: String Interpolation (Line 186)
// ============================================================================

test_string_interpolation = () void {
    name = "Zen"
    value = 42
    // TODO: Uncomment when string interpolation is implemented
    // message = "Hello, ${name}! The value is ${value}"
}

// ============================================================================
// PART 10: UFC (Uniform Function Call) (Line 5)
// ============================================================================

test_ufc = () void {
    // TODO: Uncomment when UFC is implemented
    // point = Point { x: 10, y: 20 }
    // distance = point.calculate_distance()  // Should call calculate_distance(point)
}

// ============================================================================
// Main Function
// ============================================================================

main = () void {
    test_variables()
    test_pattern_matching()
    test_option()
    test_result()
    test_loops()
    test_string_interpolation()
    test_ufc()
}