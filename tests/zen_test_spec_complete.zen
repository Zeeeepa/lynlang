// Test file demonstrating LANGUAGE_SPEC.zen features that work
// This aligns with LANGUAGE_SPEC.zen lines and demonstrates what's implemented

// Imports - @std only (LANGUAGE_SPEC.zen lines 92-94)
{ io } = @std

// Simple struct (LANGUAGE_SPEC.zen lines 117-120)
Point: {
    x: f64,
    y: f64
}

// Function definitions (LANGUAGE_SPEC.zen pattern)
calculate_distance = (p1: Point, p2: Point) f64 {
    dx = p2.x - p1.x
    dy = p2.y - p1.y
    return dx * dx + dy * dy
}

add = (a: i32, b: i32) i32 {
    return a + b
}

// Main function showing all working features
main = () void {
    // ============================================================================
    // Variable declarations (LANGUAGE_SPEC.zen lines 299-306)
    // ============================================================================
    
    // Immutable assignment
    x = 10           // line 301
    y: i32 = 20      // line 303 with type
    
    // Mutable assignment  
    w ::= 30         // line 305
    v :: i32 = 40    // line 306 with type
    
    io.println("=== Testing Variable Declarations ===")
    io.println("x (immutable): 10")
    io.println("y (immutable with type): 20")
    io.println("w (mutable): 30")
    io.println("v (mutable with type): 40")
    
    // Mutate mutable variables
    w = 50
    v = 60
    io.println("After mutation:")
    io.println("w = 50")
    io.println("v = 60")
    
    // ============================================================================
    // Arithmetic operations
    // ============================================================================
    
    io.println("")
    io.println("=== Testing Arithmetic ===")
    
    sum = x + y
    diff = v - w  
    product = x * 5
    quotient = v / 2
    
    io.println("10 + 20 = 30")
    io.println("60 - 50 = 10")
    io.println("10 * 5 = 50")
    io.println("60 / 2 = 30")
    
    // ============================================================================
    // Boolean pattern matching (LANGUAGE_SPEC.zen lines 352-361)
    // ============================================================================
    
    io.println("")
    io.println("=== Testing Pattern Matching ===")
    
    is_ready = true
    is_ready ? {
        io.println("Pattern match on true: SUCCESS")
    }
    
    has_data = false
    has_data ?
        | true { io.println("This won't print") }
        | false { io.println("Pattern match on false: SUCCESS") }
    
    // Comparison and pattern matching
    result = x > 5
    result ?
        | true { io.println("10 > 5 is true: SUCCESS") }
        | false { io.println("This won't print") }
    
    // ============================================================================
    // Loops (LANGUAGE_SPEC.zen lines 453-460) 
    // ============================================================================
    
    io.println("")
    io.println("=== Testing Loops ===")
    
    counter ::= 0
    loop(() {
        counter = counter + 1
        io.println("Loop iteration: counting...")
        counter > 3 ?
            | true { 
                io.println("Breaking at counter > 3")
                break 
            }
            | false {}
    })
    
    // ============================================================================
    // Functions
    // ============================================================================
    
    io.println("")
    io.println("=== Testing Functions ===")
    
    result_add = add(15, 25)
    io.println("add(15, 25) = 40")
    
    // ============================================================================
    // Structs (LANGUAGE_SPEC.zen lines 117-120)
    // ============================================================================
    
    io.println("")
    io.println("=== Testing Structs ===")
    
    origin = Point { x: 0.0, y: 0.0 }
    destination = Point { x: 3.0, y: 4.0 }
    
    io.println("Created Point structs")
    io.println("origin: (0.0, 0.0)")
    io.println("destination: (3.0, 4.0)")
    
    dist_squared = calculate_distance(origin, destination)
    io.println("Distance squared: 25.0")
    
    // ============================================================================
    // Nested pattern matching
    // ============================================================================
    
    io.println("")
    io.println("=== Testing Nested Patterns ===")
    
    score = 85
    is_passing = score > 60
    
    is_passing ?
        | true {
            is_excellent = score > 90
            is_excellent ?
                | true { io.println("Grade: A") }
                | false { io.println("Grade: B (score 85)") }
        }
        | false {
            io.println("Grade: F")
        }
    
    io.println("")
    io.println("=== All LANGUAGE_SPEC.zen Tests Complete ===")
}