// ============================================================================
// Comprehensive test based on LANGUAGE_SPEC.zen
// Tests all working features from the specification
// ============================================================================

{ io } = @std

// ============================================================================
// Type Definitions from LANGUAGE_SPEC.zen
// ============================================================================

// Option type - No null! (line 110)
Option<T>: Some(T) | None

// Result type for error handling (line 113)
Result<T, E>: Ok(T) | Err(E)

// Simple struct (line 117)
Point: {
    x :: f64,  // mutable field (line 118)
    y :: f64   // with default value would be = 0 (line 119)
}

// Circle struct (line 130)
Circle: {
    center: Point,
    radius: f64
}

// Rectangle struct (line 145)
Rectangle: {
    top_left: Point,
    bottom_right: Point
}

// Enum type (line 165)
Shape: Circle | Rectangle

// Game entity enum (line 172)
GameEntity: Player | Enemy | Powerup

// ============================================================================
// Functions
// ============================================================================

// UFC demo functions (lines 175-180)
get_health = (e: GameEntity) u32 { 
    // Simple version - just return fixed values
    return 100 
}

get_speed = (e: GameEntity) f64 { 
    return 5.0 
}

// Helper function for UFC demo
double = (x: i32) i32 {
    return x * 2
}

// ============================================================================
// Main Test Function
// ============================================================================

main = () void {
    io.println("=== ZEN LANGUAGE SPEC COMPREHENSIVE TEST ===")
    io.println("")
    
    // ========================================================================
    // 1. Variable Declarations (lines 298-306)
    // ========================================================================
    io.println("1. VARIABLE DECLARATIONS:")
    
    // Forward declaration with type
    x :: i32
    x = 10
    io.println("  Forward declaration: x = ${x}")
    
    // Immutable assignment
    y = 10
    io.println("  Immutable: y = ${y}")
    
    // Immutable with type
    z: i32 = 20
    io.println("  Immutable typed: z = ${z}")
    
    // Mutable forward declaration
    w :: i32
    w = 20
    w = w + 5
    io.println("  Mutable forward: w = ${w}")
    
    // Mutable assignment with inference
    v ::= 30
    v = v + 1
    io.println("  Mutable inferred: v = ${v}")
    
    // Mutable with type
    u :: i32 = 40
    u = u + 2
    io.println("  Mutable typed: u = ${u}")
    
    io.println("")
    
    // ========================================================================
    // 2. String Interpolation (multiple examples)
    // ========================================================================
    io.println("2. STRING INTERPOLATION:")
    
    name = "Zen"
    version = 1
    message = "  Language: ${name}, Version: ${version}"
    io.println(message)
    
    // With expressions
    a = 7
    b = 3
    math_result = "  Math: ${a} + ${b} = ${a + b}, ${a} * ${b} = ${a * b}"
    io.println(math_result)
    
    io.println("")
    
    // ========================================================================
    // 3. Pattern Matching with ? (lines 352-361, 462-473)
    // ========================================================================
    io.println("3. PATTERN MATCHING:")
    
    // Boolean pattern matching
    is_ready = true
    is_ready ? {
        io.println("  System is ready!")
    }
    
    // Boolean with branches
    has_data = false
    has_data ?
        | true { io.println("  Processing data...") }
        | false { io.println("  No data to process") }
    
    // Option pattern matching
    maybe_value: Option<i32> = Option.Some(42)
    maybe_value ?
        | Some(val) { io.println("  Option value: ${val}") }
        | None { io.println("  No value") }
    
    // Enum pattern matching
    shape: Shape = Shape.Circle
    shape ?
        | Circle { io.println("  Shape is Circle") }
        | Rectangle { io.println("  Shape is Rectangle") }
    
    io.println("")
    
    // ========================================================================
    // 4. Loops (lines 431-459)
    // ========================================================================
    io.println("4. LOOPS:")
    
    // Range loop
    io.print("  Range (0..5): ")
    (0..5).loop((i) {
        io.print("${i} ")
    })
    io.println("")
    
    // Infinite loop with break
    io.print("  Infinite with break: ")
    counter ::= 0
    loop(() {
        io.print("${counter} ")
        counter = counter + 1
        (counter > 3) ? { break }
    })
    io.println("")
    
    io.println("")
    
    // ========================================================================
    // 5. Structs (lines 364-371)
    // ========================================================================
    io.println("5. STRUCTS:")
    
    // Struct creation and field access
    point = Point { x: 3.14, y: 2.71 }
    io.println("  Point.x = ${point.x}, Point.y = ${point.y}")
    
    // Mutable struct fields
    point.x = 1.41
    point.y = 1.73
    io.println("  Updated: Point.x = ${point.x}, Point.y = ${point.y}")
    
    // Nested structs
    circle = Circle { 
        center: Point { x: 0.0, y: 0.0 }, 
        radius: 5.0 
    }
    io.println("  Circle center: (${circle.center.x}, ${circle.center.y})")
    io.println("  Circle radius: ${circle.radius}")
    
    io.println("")
    
    // ========================================================================
    // 6. UFC (Uniform Function Call) - Any function as method
    // ========================================================================
    io.println("6. UFC (UNIFORM FUNCTION CALL):")
    
    // Traditional function call
    result1 = double(21)
    io.println("  Traditional: double(21) = ${result1}")
    
    // UFC style - function called as method
    result2 = 21.double()
    io.println("  UFC style: 21.double() = ${result2}")
    
    io.println("")
    
    // ========================================================================
    // 7. Defer with @this (line 217)
    // ========================================================================
    io.println("7. DEFER MECHANISM:")
    @this.defer(io.println("  [Deferred] Cleanup executed at scope exit"))
    io.println("  Setting up defer...")
    
    io.println("")
    
    // ========================================================================
    // 8. Result Type Handling (lines 205-211)
    // ========================================================================
    io.println("8. RESULT TYPE HANDLING:")
    
    parse_int = (s: string) Result<i32, string> {
        // Simplified - just return success for demo
        return Result.Ok(42)
    }
    
    result = parse_int("42")
    result ?
        | Ok(val) { io.println("  Parsed value: ${val}") }
        | Err(e) { io.println("  Error: ${e}") }
    
    io.println("")
    
    // ========================================================================
    // 9. Shorthand Enum Syntax (lines 146-181)
    // ========================================================================
    io.println("9. SHORTHAND ENUM SYNTAX:")
    
    // Using shorthand enum syntax
    opt1: Option<i32> = Option.Some(99)
    opt2: Option<i32> = Option.None
    
    opt1 ?
        | Some(v) { io.println("  opt1 = Some(${v})") }
        | None { io.println("  opt1 = None") }
    
    opt2 ?
        | Some(v) { io.println("  opt2 = Some(${v})") }
        | None { io.println("  opt2 = None") }
    
    io.println("")
    
    // ========================================================================
    // 10. No Keywords Demonstration
    // ========================================================================
    io.println("10. NO KEYWORDS:")
    io.println("  - No if/else -> Use ? operator")
    io.println("  - No while/for -> Use loop() and ranges")
    io.println("  - No match/switch -> Use ? operator")
    io.println("  - No null/nil -> Use Option<T>")
    io.println("  - No class/interface -> Use structs and traits")
    
    io.println("")
    io.println("=== ALL TESTS COMPLETED ===")
}