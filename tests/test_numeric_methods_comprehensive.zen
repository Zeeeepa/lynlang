{ io , get_default_allocator} = @std

main = () i32 {
    alloc = get_default_allocator()
    io.println("=== Comprehensive Numeric Methods Tests ===")
    
    // Test abs() with various types
    io.println("\n▸ Testing abs():")
    i32_neg: i32 = -123
    i32_pos: i32 = 456
    io.println("  abs(-123) = ${i32_neg.abs()}")
    io.println("  abs(456) = ${i32_pos.abs()}")
    
    i64_neg: i64 = -999999999
    io.println("  abs(-999999999) = ${i64_neg.abs()}")
    
    zero = 0
    io.println("  abs(0) = ${zero.abs()}")
    
    // Test min() with various cases
    io.println("\n▸ Testing min():")
    x = 50
    y = 30
    io.println("  min(50, 30) = ${x.min(y)}")
    io.println("  min(30, 50) = ${y.min(x)}")
    
    equal1 = 100
    equal2 = 100
    io.println("  min(100, 100) = ${equal1.min(equal2)}")
    
    negative = -10
    positive = 10
    io.println("  min(-10, 10) = ${negative.min(positive)}")
    io.println("  min(10, -10) = ${positive.min(negative)}")
    
    // Test max() with various cases
    io.println("\n▸ Testing max():")
    io.println("  max(50, 30) = ${x.max(y)}")
    io.println("  max(30, 50) = ${y.max(x)}")
    io.println("  max(100, 100) = ${equal1.max(equal2)}")
    io.println("  max(-10, 10) = ${negative.max(positive)}")
    io.println("  max(10, -10) = ${positive.max(negative)}")
    
    // Chaining numeric methods
    io.println("\n▸ Chaining numeric methods:")
    val1 = -42
    val2 = 17
    val3 = -8
    
    result = val1.abs().min(val2).max(val3)
    io.println("  abs(-42).min(17).max(-8) = ${result}")
    
    // Using in expressions
    io.println("\n▸ Using in expressions:")
    a = -5
    b = 3
    c = 10
    expr_result = a.abs() + b.max(c) * 2
    io.println("  abs(-5) + max(3, 10) * 2 = ${expr_result}")
    
    // Edge cases
    io.println("\n▸ Edge cases:")
    large_pos: i64 = 9223372036854775800
    large_neg: i64 = -9223372036854775800
    zero_i64: i64 = 0
    io.println("  abs(large negative) = ${large_neg.abs()}")
    io.println("  max(large pos, 0) = ${large_pos.max(zero_i64)}")
    
    io.println("\n=== All numeric method tests passed ===")
    
    return 0
}