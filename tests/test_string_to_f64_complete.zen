{ io, Option , get_default_allocator} = @std

main = () void {
    alloc = get_default_allocator()
    // Test 1: Valid positive float
    s1 = "3.14159"
    r1 = s1.to_f64()
    r1 ?
        | Option.Some(v) { 
            io.println("Test 1 PASS: Parsed '${s1}' as float")
            // Try doing arithmetic to verify it's a real float
            io.println("  Value: ${v}")
        }
        | Option.None { io.println("Test 1 FAIL: Could not parse '${s1}'") }
    
    // Test 2: Valid negative float  
    s2 = "-42.5"
    r2 = s2.to_f64()
    r2 ?
        | Option.Some(v) { 
            io.println("Test 2 PASS: Parsed '${s2}' as float")
            io.println("  Value: ${v}")
        }
        | Option.None { io.println("Test 2 FAIL: Could not parse '${s2}'") }
    
    // Test 3: Integer string (should work)
    s3 = "100"
    r3 = s3.to_f64()
    r3 ?
        | Option.Some(v) { 
            io.println("Test 3 PASS: Parsed '${s3}' as float")
            io.println("  Value: ${v}")
        }
        | Option.None { io.println("Test 3 FAIL: Could not parse '${s3}'") }
    
    // Test 4: Invalid string (should return None)
    s4 = "not_a_number"
    r4 = s4.to_f64()
    r4 ?
        | Option.Some(v) { io.println("Test 4 FAIL: Should not have parsed '${s4}' as ${v}") }
        | Option.None { io.println("Test 4 PASS: Correctly rejected '${s4}'") }
    
    // Test 5: Empty string (should return None)
    s5 = ""
    r5 = s5.to_f64()
    r5 ?
        | Option.Some(v) { io.println("Test 5 FAIL: Should not have parsed empty string as ${v}") }
        | Option.None { io.println("Test 5 PASS: Correctly rejected empty string") }
    
    // Test 6: Scientific notation
    s6 = "1.5e2"
    r6 = s6.to_f64()
    r6 ?
        | Option.Some(v) { 
            io.println("Test 6 PASS: Parsed '${s6}' as float")
            io.println("  Value (should be 150): ${v}")
        }
        | Option.None { io.println("Test 6 FAIL: Could not parse '${s6}'") }
}