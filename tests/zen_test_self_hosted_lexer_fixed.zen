// Test suite for self-hosted lexer
// Tests the lexer implementation written in Zen

core = @std.core
io = @std.io

// Import the lexer (when module system supports it)
// For now, we'll test basic concepts

// Test token types
test_token_recognition = () void   {
    io.print("Testing token recognition...\n")
    io.print("  Testing identifier: hello\n")
    io.print("  Testing integer: 123\n")
    io.print("  Testing float: 3.14\n")
    io.print("  Testing string: \"test\"\n")
    io.print("  Testing char: 'c'\n")
    io.print("  Testing keyword: if\n")
    io.print("  Testing operator: +\n")
    io.print("  Testing symbol: (\n")
    io.print("  Testing comment: //\n")
}

// Test operator recognition
test_operators = () void   {
    io.print("Testing operator recognition...\n")
    io.print("  Operators: :=, :=, =, ==, !=, <=, >=, <, >\n")
    io.print("  Operators: +, -, *, /, %, &, |, ^, <<, >>\n")
    io.print("  Operators: &&, ||, !, ?, ->, =>, .., ..., :\n")
}

// Test keywords
test_keywords = () void   {
    io.print("Testing keyword recognition...\n")
    io.print("  Keywords: loop, break, continue, return\n")
    io.print("  Keywords: extern, export, import, comptime\n")
    io.print("  Keywords: type, void, bool, true, false\n")
}

// Test string parsing
test_string_parsing = () void   {
    io.print("Testing string parsing...\n")
    io.print("  Simple string\n")
    io.print("  String with newline\n")
    io.print("  String with tab\n")
    io.print("  String with quote\n")
    io.print("  String with backslash\n")
    io.print("  Multi-word string\n")
}

// Test number parsing
test_number_parsing = () void   {
    io.print("Testing number parsing...\n")
    io.print("  Integer: 0\n")
    io.print("  Integer: 42\n")
    io.print("  Integer: 123456789\n")
    io.print("  Float: 3.14\n")
    io.print("  Float: 0.5\n")
    io.print("  Float: 1.0\n")
    io.print("  Binary: 0b1010\n")
    io.print("  Octal: 0o755\n")
    io.print("  Hex: 0xDEADBEEF\n")
}

// Test comment handling
test_comments = () void   {
    io.print("Testing comment handling...\n")
    
    // Single-line comments
    // Should be skipped by lexer
    
    /* Multi-line comments
       should also be handled
       properly by the lexer */
    
    // Nested /* comments */ should work
}

// Test error cases
test_error_cases = () void   {
    io.print("Testing error cases...\n")
    io.print("  Unterminated string\n")
    io.print("  Invalid characters\n")
    io.print("  Invalid number formats\n")
}

// Test position tracking
test_position_tracking = () void   {
    io.print("Testing position tracking...\n")
    io.print("  Line numbers\n")
    io.print("  Column numbers\n")
    io.print("  Start positions\n")
    io.print("  End positions\n")
}

// Main test runner
main = () void   {
    io.print("=== Self-Hosted Lexer Tests ===\n\n")
    
    // Run tests
    test_token_recognition()
    test_operators()
    test_keywords()
    test_string_parsing()
    test_number_parsing()
    test_comments()
    test_error_cases()
    test_position_tracking()
    
    // Print summary
    io.print("\n=== Test Summary ===\n")
    io.print("All tests completed!\n")
}