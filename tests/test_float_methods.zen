{ io , get_default_allocator} = @std

main = () i32 {
    alloc = get_default_allocator()
    io.println("=== Float Methods and Type Coercion Tests ===")
    
    // Test automatic int-to-float coercion
    io.println("\n▸ Automatic int-to-float coercion:")
    int_val = 10
    float_val = 3.5
    
    // Mixed operations should auto-convert int to float
    sum = int_val + float_val
    diff = int_val - float_val
    prod = int_val * float_val
    quot = int_val / float_val
    
    io.println("  10 + 3.5 = ${sum}")
    io.println("  10 - 3.5 = ${diff}")
    io.println("  10 * 3.5 = ${prod}")
    io.println("  10 / 3.5 = ${quot}")
    
    // Test with different operation orders
    io.println("\n▸ Operation order:")
    rev_sum = float_val + int_val
    rev_diff = float_val - int_val
    rev_prod = float_val * int_val
    rev_quot = float_val / int_val
    
    io.println("  3.5 + 10 = ${rev_sum}")
    io.println("  3.5 - 10 = ${rev_diff}")
    io.println("  3.5 * 10 = ${rev_prod}")
    io.println("  3.5 / 10 = ${rev_quot}")
    
    // Test with negative values
    io.println("\n▸ With negative values:")
    neg_int = -7
    neg_float = -2.5
    
    mixed1 = neg_int + float_val
    mixed2 = int_val + neg_float
    mixed3 = neg_int * neg_float
    
    io.println("  -7 + 3.5 = ${mixed1}")
    io.println("  10 + (-2.5) = ${mixed2}")
    io.println("  -7 * (-2.5) = ${mixed3}")
    
    // Complex expressions
    io.println("\n▸ Complex expressions:")
    a = 5
    b_float = 2.5
    c = 3
    d_float = 1.5
    
    sum1 = a + b_float
    diff1 = c - d_float
    complex1 = sum1 * diff1
    complex2 = a * b_float + c / d_float
    diff2 = a - c
    complex3 = diff2 * b_float + d_float
    
    io.println("  (5 + 2.5) * (3 - 1.5) = ${complex1}")
    io.println("  5 * 2.5 + 3 / 1.5 = ${complex2}")
    io.println("  (5 - 3) * 2.5 + 1.5 = ${complex3}")
    
    // Test modulo with floats
    io.println("\n▸ Modulo operations:")
    int_mod = 17 % 5
    io.println("  17 % 5 = ${int_mod}")
    
    // Edge cases
    io.println("\n▸ Edge cases:")
    zero_int = 0
    zero_float = 0.0
    one_float = 1.0
    
    edge1 = zero_int + one_float
    edge2 = one_float * zero_int
    
    io.println("  0 + 1.0 = ${edge1}")
    io.println("  1.0 * 0 = ${edge2}")
    
    io.println("\n=== All float and coercion tests passed ===")
    
    return 0
}