// Comprehensive test for Vec<T, size> and DynVec<T> collection types
// Tests implementation according to LANGUAGE_SPEC.zen

{ io, GPA, AsyncPool } = @std

// Test basic Vec<T, size> functionality
test_vec_basic = () void {
    // Test Vec<i32, 5> constructor
    numbers = Vec<i32, 5>()
    
    io.println("Vec<i32, 5> created successfully")
    
    // Test Vec with initial values
    values = Vec<i32, 3>(1, 2, 3)
    
    io.println("Vec<i32, 3> with initial values created")
}

// Test DynVec<T> functionality  
test_dynvec_basic = () void {
    // Setup allocator
    sync_alloc = GPA.init()
    
    // Test DynVec<i32> constructor
    dynamic_numbers = DynVec<i32>(sync_alloc.allocator())
    
    io.println("DynVec<i32> created successfully")
    
    // Test DynVec with initial capacity
    dynamic_values = DynVec<i32>(sync_alloc.allocator(), 16)
    
    io.println("DynVec<i32> with capacity created")
    
    sync_alloc.deinit()
}

// Test mixed variant DynVec as per LANGUAGE_SPEC.zen
GameEntity: .Player | Enemy | Powerup

test_dynvec_mixed_variants = () void {
    sync_alloc = GPA.init()
    
    // Mixed type vector - can hold multiple variant types!
    entities = DynVec<GameEntity.Player, GameEntity.Enemy>(sync_alloc.allocator())
    
    io.println("Mixed variant DynVec created successfully")
    
    sync_alloc.deinit()
}

// Test shapes example from LANGUAGE_SPEC.zen
Point: {
    x: f64,
    y: f64,
}

Circle: {
    center: Point,
    radius: f64,
}

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

Shape: Circle, Rectangle

test_shapes_collections = () void {
    sync_alloc = GPA.init()
    
    // Static sized vector from spec
    shapes = Vec<Shape, 100>()
    
    // Create a circle to add
    circle = Circle { 
        center: Point { x: 0.0, y: 0.0 }, 
        radius: 10.0 
    }
    
    io.println("Vec<Shape, 100> created successfully")
    
    // Dynamic vector with allocator from spec  
    dynamic_shapes = DynVec<Shape>(sync_alloc.allocator())
    
    // Create a rectangle to add
    rectangle = Rectangle {
        top_left: Point { x: 0.0, y: 0.0 },
        bottom_right: Point { x: 50.0, y: 50.0 }
    }
    
    io.println("DynVec<Shape> created successfully")
    
    // Another example with inline types from spec
    mixed_items = DynVec<Circle, Rectangle>(sync_alloc.allocator())
    
    io.println("Mixed Circle/Rectangle DynVec created successfully")
    
    sync_alloc.deinit()
}

// Test with different primitive types
test_different_types = () void {
    sync_alloc = GPA.init()
    
    // Test different Vec types
    int_vec = Vec<i32, 10>()
    float_vec = Vec<f64, 5>()
    bool_vec = Vec<bool, 3>()
    
    io.println("Vec types for i32, f64, bool created")
    
    // Test different DynVec types
    dyn_int = DynVec<i32>(sync_alloc.allocator())
    dyn_float = DynVec<f64>(sync_alloc.allocator()) 
    dyn_bool = DynVec<bool>(sync_alloc.allocator())
    
    io.println("DynVec types for i32, f64, bool created")
    
    sync_alloc.deinit()
}

main = () void {
    io.println("=== Testing Zen Collection Types ===")
    
    io.println("\n1. Testing Vec<T, size> basic functionality...")
    test_vec_basic()
    
    io.println("\n2. Testing DynVec<T> basic functionality...")
    test_dynvec_basic()
    
    io.println("\n3. Testing mixed variant DynVec...")
    test_dynvec_mixed_variants()
    
    io.println("\n4. Testing shapes collections from LANGUAGE_SPEC...")
    test_shapes_collections()
    
    io.println("\n5. Testing different primitive types...")
    test_different_types()
    
    io.println("\n=== All Collection Tests Completed ===")
}