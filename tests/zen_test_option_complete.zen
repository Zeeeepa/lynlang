// Comprehensive test suite for Option<T> type
// Consolidates all Option tests into a single file
{io, Option} = @std

main = () i32 {
    io.println("═══════════════════════════════════════════")
    io.println("           OPTION<T> TEST SUITE            ")
    io.println("═══════════════════════════════════════════")
    io.println("")
    
    // ─────────────────────────────────────────
    // Basic Option<i32> tests
    // ─────────────────────────────────────────
    io.println("▸ Basic Option<i32>")
    
    // Test Some with integer
    int_opt = Some(42)
    int_opt ?
        | Some(v) { io.println("  Some(42) = ${v}") }
        | None { io.println("  None") }
    
    // Test None
    empty_int = None
    empty_int ?
        | Some(v) { io.println("  Some(${v})") }
        | None { io.println("  None (correct)") }
    
    // Test with arithmetic in Some
    calc = Some(10 + 15)
    result_calc = calc ?
        | Some(x) => x * 2
        | None => 0
    io.println("  Some(25) * 2 = ${result_calc}")
    
    // ─────────────────────────────────────────
    // Option<String> tests
    // ─────────────────────────────────────────
    io.println("")
    io.println("▸ Option<String>")
    
    // Test Some with string
    name_opt: Option<String> = Some("Alice")
    greeting = name_opt ?
        | Some(n) => "Hello, ${n}!"
        | None => "Hello, stranger!"
    io.println("  ${greeting}")
    
    // Test None with string
    empty_str: Option<String> = None
    msg = empty_str ?
        | Some(s) => "Found: ${s}"
        | None => "Nothing found"
    io.println("  ${msg}")
    
    // Test string interpolation in patterns
    city = Some("Tokyo")
    location = city ?
        | Some(c) => "Living in ${c}"
        | None => "Location unknown"
    io.println("  ${location}")
    
    // ─────────────────────────────────────────
    // Mixed pattern matching styles
    // ─────────────────────────────────────────
    io.println("")
    io.println("▸ Pattern Matching Styles")
    
    // Using shorthand .Some/.None
    val1 = Some(100)
    val1 ?
        | .Some(x) { io.println("  Shorthand: .Some(${x})") }
        | .None { io.println("  Shorthand: .None") }
    
    // Using qualified Option.Some/Option.None
    val2 = Some(200)
    val2 ?
        | Option.Some(x) { io.println("  Qualified: Option.Some(${x})") }
        | Option.None { io.println("  Qualified: Option.None") }
    
    // Using arrow syntax
    val3 = Some(300)
    res3 = val3 ?
        | Some(x) => x / 3
        | None => 0
    io.println("  Arrow syntax: Some(300)/3 = ${res3}")
    
    // ─────────────────────────────────────────
    // Edge cases and defaults
    // ─────────────────────────────────────────
    io.println("")
    io.println("▸ Edge Cases")
    
    // Default value for None
    maybe_val = None
    with_default = maybe_val ?
        | Some(v) => v
        | None => 999
    io.println("  None with default: ${with_default}")
    
    // Nested expressions
    nested = Some(5)
    complex = nested ?
        | Some(n) => {
            doubled = n * 2
            squared = doubled * doubled
            squared
        }
        | None => 0
    io.println("  Some(5) -> (5*2)^2 = ${complex}")
    
    // Multiple Options in sequence
    opt1 = Some(1)
    opt2 = Some(2)
    opt3 = None
    
    res1 = opt1 ?
        | Some(x) => x
        | None => 0
    
    res2 = opt2 ?
        | Some(x) => x
        | None => 0
    
    res_none = opt3 ?
        | Some(x) => x
        | None => 0
    
    total = res1 + res2 + res_none
    io.println("  Some(1) + Some(2) + None = ${total}")
    
    // ─────────────────────────────────────────
    // Integer size variations
    // ─────────────────────────────────────────
    io.println("")
    io.println("▸ Integer Size Handling")
    
    // Small integer (fits in i8)
    small = Some(127)
    small ?
        | Some(v) { io.println("  i8 range: ${v}") }
        | None { io.println("  None") }
    
    // Medium integer (needs i32)
    medium = Some(50000)
    medium ?
        | Some(v) { io.println("  i32 range: ${v}") }
        | None { io.println("  None") }
    
    // Large integer (needs i64)
    large = Some(1000000000)
    large ?
        | Some(v) { io.println("  i64 range: ${v}") }
        | None { io.println("  None") }
    
    // ─────────────────────────────────────────
    // Pattern matching with guards (future)
    // ─────────────────────────────────────────
    io.println("")
    io.println("▸ Advanced Patterns")
    
    // Testing Some followed by None (previously caused segfault)
    test_order1 = Some(42)
    test_order1 ?
        | Some(x) { io.println("  First Some: ${x}") }
        | None { io.println("  First None") }
    
    test_order2 = None
    test_order2 ?
        | Some(y) { io.println("  Second Some: ${y}") }
        | None { io.println("  Second None (correct)") }
    
    // Pattern with wildcard
    wild = Some(777)
    wild ?
        | Some(777) { io.println("  Matched exact 777") }
        | Some(x) { io.println("  Some other value: ${x}") }
        | None { io.println("  None") }
    
    io.println("")
    io.println("═══════════════════════════════════════════")
    io.println("        ALL OPTION TESTS PASSED!           ")
    io.println("═══════════════════════════════════════════")
    
    0
}