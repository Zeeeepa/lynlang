// Test file to verify that imports are rejected in invalid contexts
// This test should fail to compile if the parser is working correctly

core = @std
io = @std

// This function contains invalid import attempts that should be rejected
test_invalid_imports = () void   {
    // The following code blocks should all fail to compile:
    
    // INVALID: Import inside function body
    // Uncomment to test rejection:
    // mem = @std  // ERROR: Imports must be at module level
    
    // INVALID: Import inside if block
    // Uncomment to test rejection:
    // if (true) {
    //     string = @std  // ERROR: Imports must be at module level
    // }
    
    // INVALID: Import inside loop
    // Uncomment to test rejection:
    // for (i := 0; i < 1; i += 1) {
    //     { Vec, DynVec } = @std  // ERROR: Imports must be at module level
    // }
    
    io.println("If this compiles, imports are correctly restricted to module level")
}

// INVALID: Import inside comptime block
// This should be rejected by the parser
// Uncomment to test rejection:
// @std.@comptime {
//     math = @std  // ERROR: Imports not allowed in comptime blocks
//     TABLE_SIZE := 256
// }

// Valid comptime block (no imports)
@std.@comptime {
    // This is fine - comptime for meta-programming
    TABLE_SIZE := 256
    lookup_table := [TABLE_SIZE]u8{}
    
    for (i := 0; i < TABLE_SIZE; i += 1) {
        lookup_table[i] = i * 2
    }
}

main = () i32   {
    test_invalid_imports()
    io.println("Import rejection test completed")
    return 0
}