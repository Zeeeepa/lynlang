// Check if discriminant is preserved
{io, Option, Result, get_default_allocator} = @std
{io, Option, Result, get_default_allocator} = @std

main = () void {
    alloc = get_default_allocator()
    // Test with Option first (simpler)
    inner_opt = Option.Some(456)
    outer_result = Result.Ok(inner_opt)
    
    outer_result ? | Result.Ok(extracted_opt) => {
        io.println("Extracted Option from Result")
        extracted_opt ? | Option.Some(v) => io.println("Option.Some value: ${v}")
                       | Option.None => io.println("Option was None (wrong!)")
    } | Result.Err(e) => io.println("Err: ${e}")
    
    // Test with Result<Result>
    inner_res = Result.Ok(789)
    outer_res = Result.Ok(inner_res)
    
    outer_res ? | Result.Ok(extracted_res) => {
        io.println("Extracted Result from Result")
        extracted_res ? | Result.Ok(v) => io.println("Result.Ok value: ${v}")
                       | Result.Err(e) => io.println("Result.Err: ${e}")
    } | Result.Err(e) => io.println("Outer Err: ${e}")
}