// Test Result<void, E> for operations with no return value
{ io } = @std

// Function that performs validation and returns Result<void, string>
validate_age = (age: i32) Result<void, string> {
    age < 0 ? {
        return Result.Err("Age cannot be negative")
    }
    age > 150 ? {
        return Result.Err("Age is unreasonably high")
    }
    // Return Ok with void for success
    return Result.Ok(void)
}

// Function that chains operations with Result<void, E>
process_user_data = (name: string, age: i32) Result<void, string> {
    io.println("Processing user: ${name}")
    
    // Validate the age
    validation_result = validate_age(age)
    validation_result ?
        | .Ok(_) {
            io.println("  Age ${age} is valid")
            return Result.Ok(void)
        }
        | .Err(error) {
            io.println("  Validation failed: ${error}")
            return Result.Err(error)
        }
}

main = () i32 {
    io.println("═══════════════════════════════════")
    io.println("  RESULT<VOID, E> TEST SUITE      ")
    io.println("═══════════════════════════════════")
    io.println("")
    
    // Test 1: Valid age
    result1 = process_user_data("Alice", 25)
    result1 ?
        | .Ok(_) { io.println("✓ User 1 processed successfully") }
        | .Err(e) { io.println("✗ User 1 failed: ${e}") }
    
    io.println("")
    
    // Test 2: Negative age
    result2 = process_user_data("Bob", -5)
    result2 ?
        | .Ok(_) { io.println("✓ User 2 processed successfully") }
        | .Err(e) { io.println("✗ User 2 failed: ${e}") }
    
    io.println("")
    
    // Test 3: Too high age
    result3 = process_user_data("Charlie", 200)
    result3 ?
        | .Ok(_) { io.println("✓ User 3 processed successfully") }
        | .Err(e) { io.println("✗ User 3 failed: ${e}") }
    
    io.println("")
    io.println("All tests completed!")
    
    return 0
}
