// Test nested generic functions with simpler structure
{ io, Result, Option } = @std

// Simple nested function return
get_nested = () Result<Option<i32>, string> {
    Result.Ok(Option.Some(42))
}

// Double nested Result
get_double = () Result<Result<i32, string>, string> {
    Result.Ok(Result.Ok(100))
}

main = () i32 {
    io.println("Testing nested generic functions...")
    
    // Test 1: Result<Option<i32>, string>
    io.println("\nTest 1: Result<Option<i32>, string>")
    nested1 = get_nested()
    nested1 ? 
        | Result.Ok(opt) {
            opt ? 
                | Option.Some(val) {
                    io.println("  Got value: ${val}")
                    val
                }
                | Option.None => 1
        }
        | Result.Err(e) => 2
}