// ============================================================================
// Complete test from LANGUAGE_SPEC.zen main function (lines 297-489)
// This file tests all core features that should work
// ============================================================================

// Imports from L92-107
{ io, math } = @std

// Type definitions from L109-113
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

// Simple struct from L117-120
Point: {
    x:: f64,
    y:: f64 = 0
}

// Trait definition from L123-127
Geometric: {
    area: (self) f64,
    perimeter: (self) f64
}

// Circle struct from L130-133
Circle: {
    center: Point,
    radius: f64
}

// Implement trait for Circle from L136-143
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    }
})

// Rectangle from L146-149
Rectangle: {
    top_left: Point,
    bottom_right: Point
}

// Implement trait for Rectangle from L151-162
Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    }
})

// Enum type from L165-166
Shape: Circle | Rectangle

// GameEntity enum from L171
GameEntity: Player | Enemy | Powerup

// UFC overloaded functions from L174-181
get_health = (e: GameEntity.Player) u32 { return 100 }
get_health = (e: GameEntity.Enemy) u32 { return 50 }
get_health = (e: GameEntity.Powerup) u32 { return 0 }

get_speed = (e: GameEntity.Player) f64 { return 5.0 }
get_speed = (e: GameEntity.Enemy) f64 { return 3.0 }
get_speed = (e: GameEntity.Powerup) f64 { return 0.0 }

// Generic function from L184-187
print_area<T: Geometric>(shape: T) void {
    io.println("Area: ${shape.area()}")
}

// Parse radius function from L199-203
parse_radius = (s: string) Result<f64, string> {
    // Simplified version - just return Ok for demo
    return Ok(3.14)
}

// Main function from L297-489
main = () void {
    // Variable declarations from L299-306
    x: i32
    x = 10
    y = 10
    z: i32 = 20
    w:: i32
    w = 20
    v ::= 30
    u:: i32 = 40

    io.println("Variables: x=${x}, y=${y}, z=${z}, w=${w}, v=${v}, u=${u}")
    
    // Defer statement from L314
    @this.defer(io.println("Cleanup complete!"))
    
    // Pattern matching from L352-361
    is_ready = true
    is_ready ? {
        io.println("Starting game!")
    }
    
    has_data = false
    has_data ?
        | true { io.println("Processing data") }
        | false { io.println("Waiting for data...") }
    
    // Create shapes from L364-370
    circle = Circle { center: Point { x: 100, y: 100 }, radius: 50 }
    io.println("Circle area: ${circle.area()}")
    
    // Create rectangle
    rect = Rectangle {
        top_left: Point { x: 0, y: 0 },
        bottom_right: Point { x: 50, y: 50 }
    }
    io.println("Rectangle area: ${rect.area()}")
    io.println("Rectangle perimeter: ${rect.perimeter()}")
    
    // Range iterations from L432-435
    io.println("Counting from 0 to 9:")
    (0..10).loop((i) {
        io.println("Count: ${i}")
    })
    
    // Infinite loop with break from L453-459
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 10 ?
            | true { break }
            | false { 
                counter < 3 ? {
                    io.println("Counter: ${counter}")
                }
            }
    })
    
    // Option handling from L462-473
    maybe_radius: Option<f64> = Some(5.5)
    maybe_radius ?
        | Some(r) {
            io.println("Creating circle with radius: ${r}")
            c = Circle {
                center: Point { x: 100.0, y: 100.0 },
                radius: r
            }
            io.println("Created circle with area: ${c.area()}")
        }
        | None {
            io.println("No radius provided")
        }
    
    // Test with None
    empty: Option<f64> = None
    empty ?
        | Some(v) { io.println("Has value: ${v}") }
        | None { io.println("Empty option") }
    
    // GameEntity tests
    player = GameEntity.Player
    enemy = GameEntity.Enemy
    
    io.println("Player health: ${player.get_health()}")
    io.println("Enemy health: ${enemy.get_health()}")
    io.println("Player speed: ${player.get_speed()}")
    io.println("Enemy speed: ${enemy.get_speed()}")
    
    // Test parse_radius with Result type
    result = parse_radius("3.14")
    result ?
        | Ok(val) { io.println("Parsed radius: ${val}") }
        | Err(e) { io.println("Parse error: ${e}") }
    
    io.println("Test complete!")
}