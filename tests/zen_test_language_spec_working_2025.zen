// ==============================================================================
// Working Features from LANGUAGE_SPEC.zen - January 2025
// ==============================================================================
// This test demonstrates all currently working features from the language spec

{ io, math } = @std

// Option type definition - WORKING ✓
Option<T>: Some(T) | None

// Result type definition - WORKING ✓  
Result<T, E>: Ok(T) | Err(E)

// Simple struct - WORKING ✓
Point: {
    x:: f64,  // mutable field
    y:: f64
}

// Enum type - WORKING ✓
Shape: Circle | Rectangle

main = () void {
    io.println("=== ZEN LANGUAGE SPEC - WORKING FEATURES ===")
    io.println("")
    
    // ========================================================================
    // VARIABLE DECLARATIONS - ALL 8 FORMS WORKING ✓
    // ========================================================================
    io.println("1. Variable Declarations (All Forms):")
    
    x: i32              // forward declaration
    x = 10              // assignment
    y = 20              // immutable inferred
    z: i32 = 30         // immutable with type
    w:: i32             // mutable forward declaration
    w = 40              // assignment
    v ::= 50            // mutable inferred
    u:: i32 = 60        // mutable with type
    
    io.println("  ✓ Forward declaration: x = ${x}")
    io.println("  ✓ Immutable inferred: y = ${y}")
    io.println("  ✓ Immutable typed: z = ${z}")
    io.println("  ✓ Mutable: w = ${w}")
    
    // Mutation test
    v = 70
    io.println("  ✓ Mutation: v changed to ${v}")
    io.println("")
    
    // ========================================================================
    // PATTERN MATCHING WITH ? - WORKING ✓
    // ========================================================================
    io.println("2. Pattern Matching with ?:")
    
    // Boolean pattern matching - no if/else keywords!
    is_ready = true
    is_ready ?
        | true { io.println("  ✓ Boolean pattern: Ready!") }
        | false { io.println("  ✓ Boolean pattern: Not ready") }
    
    // Option pattern matching with value extraction - PARTIALLY WORKING
    maybe: Option<i32> = Some(42)
    maybe ?
        | Some(val) { io.println("  ✓ Option<i32> extraction: ${val}") }
        | None { io.println("  None") }
    
    // None case
    nothing: Option<i32> = None
    nothing ?
        | Some(v) { io.println("  Had value") }
        | None { io.println("  ✓ Option None case works") }
    
    io.println("")
    
    // ========================================================================
    // LOOPS AND RANGES - WORKING ✓
    // ========================================================================
    io.println("3. Loops and Ranges:")
    
    // Range loop with UFC
    io.println("  Range loop (0..3):")
    (0..3).loop((i) {
        io.println("    Count: ${i}")
    })
    
    // Infinite loop with break
    counter ::= 0
    io.println("  Infinite loop with break:")
    loop(() {
        counter = counter + 1
        counter > 2 ?
            | true { 
                io.println("    Breaking at ${counter}")
                break 
            }
            | false { 
                io.println("    Loop iteration: ${counter}")
            }
    })
    io.println("")
    
    // ========================================================================
    // STRING INTERPOLATION - WORKING ✓
    // ========================================================================
    io.println("4. String Interpolation:")
    name = "Zen"
    version = 2025
    io.println("  ✓ Multiple values: Language ${name} v${version}")
    io.println("")
    
    // ========================================================================
    // STANDARD LIBRARY IMPORTS - WORKING ✓
    // ========================================================================
    io.println("5. Standard Library:")
    io.println("  ✓ io module: println working")
    pi_val = math.pi
    io.println("  ✓ math module: pi = ${pi_val}")
    io.println("")
    
    // ========================================================================
    // STRUCTS - PARTIALLY WORKING ✓
    // ========================================================================
    io.println("6. Structs:")
    p ::= Point { x: 3.14, y: 2.71 }
    io.println("  ✓ Struct creation: Point")
    // Field access not fully working yet
    // io.println("  Point.x = ${p.x}")
    io.println("")
    
    // ========================================================================
    // DEFER STATEMENT - WORKING ✓
    // ========================================================================
    io.println("7. Defer (RAII):")
    @this.defer(io.println("  ✓ Deferred: This prints at end of scope"))
    io.println("  This prints first")
    io.println("")
    
    // ========================================================================
    // SUMMARY
    // ========================================================================
    io.println("=== SUMMARY ===")
    io.println("✓ Zero keywords - all control flow via pattern matching")
    io.println("✓ All 8 variable declaration forms")
    io.println("✓ Pattern matching with ?")
    io.println("✓ Option<T> with Some/None")
    io.println("✓ Range loops and infinite loops")
    io.println("✓ String interpolation")
    io.println("✓ Standard library (io, math)")
    io.println("✓ Basic structs")
    io.println("✓ @this.defer for RAII")
    io.println("")
    io.println("~30% of LANGUAGE_SPEC.zen implemented")
}