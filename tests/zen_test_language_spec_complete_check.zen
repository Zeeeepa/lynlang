// Complete test of LANGUAGE_SPEC.zen features
// Testing all core language features from the specification

// ============================================================================
// IMPORTS - Test @std imports (lines 92-107)
// ============================================================================
{ io, math } = @std
{ String } = @std

// ============================================================================
// TYPE DEFINITIONS - Core types from spec
// ============================================================================

// Option type - no null! (lines 109-110)
Option<T>: Some(T) | None

// Result type for error handling (lines 112-113)
Result<T, E>: Ok(T) | Err(E)

// Simple struct (lines 116-120)
Point: {
    x:: f64,    // mutable field
    y:: f64 = 0 // with default value
}

// Trait definition (lines 123-127)
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Circle struct (lines 130-133)
Circle: {
    center: Point,
    radius: f64,
}

// Implement trait for Circle (lines 135-143)
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

// Rectangle struct (lines 146-149)
Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

// Implement trait for Rectangle (lines 151-162)
Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// Enum type (line 165)
Shape: Circle | Rectangle

// Enforce all Shape variants must implement Geometric (line 167)
Shape.requires(Geometric)

// UFC overloading based on enum variants (lines 170-181)
GameEntity: Player | Enemy | Powerup

get_health = (e: GameEntity.Player) u32 { return 100 }
get_health = (e: GameEntity.Enemy) u32 { return 50 }
get_health = (e: GameEntity.Powerup) u32 { return 0 }

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

// Parse shape from string - demonstrates Result type (lines 198-203)
parse_radius = (s: String) Result<f64, String> {
    // Simplified for testing
    return Ok(5.5)
}

// Generic function with constraints (lines 184-187)
print_area<T: Geometric>(shape: T) void {
    io.println("Area: ${shape.area()}")
}

// ============================================================================
// MAIN FUNCTION - Test all features
// ============================================================================
main = () void {
    io.println("=== Testing LANGUAGE_SPEC.zen Features ===")
    
    // ========================================================================
    // 1. Variable declarations (lines 298-306)
    // ========================================================================
    io.println("\n1. Variable Declarations:")
    
    x: i32              // forward declaration
    x = 10              // immutable assignment
    y = 10              // immutable assignment with inference
    z : i32 = 20        // immutable with type
    w :: i32            // mutable forward declaration
    w = 20              // assign to mutable
    v ::= 30            // mutable assignment with inference
    u :: i32 = 40       // mutable with type
    
    io.println("Variables declared successfully")
    
    // ========================================================================
    // 2. Boolean pattern matching (lines 352-361)
    // ========================================================================
    io.println("\n2. Pattern Matching:")
    
    is_ready = true
    is_ready ? { 
        io.println("Boolean pattern: Ready!")
    }
    
    has_data = false
    has_data ?
        | true { io.println("Has data") }
        | false { io.println("No data") }
    
    // ========================================================================
    // 3. Struct creation and usage (lines 364-371)
    // ========================================================================
    io.println("\n3. Structs and Pointers:")
    
    circle = Circle { 
        center: Point { x: 100, y: 100 }, 
        radius: 50 
    }
    
    io.println("Circle area: ${circle.area()}")
    io.println("Circle perimeter: ${circle.perimeter()}")
    
    // Explicit pointer types
    circle_ptr: Ptr<Circle> = circle.ref()
    circle_mut: MutPtr<Circle> = circle.mut_ref()
    
    io.println("Via pointer: ${circle_ptr.val.area()}")
    circle_mut.val.radius = 75
    io.println("After mutation: ${circle_mut.val.area()}")
    
    // ========================================================================
    // 4. Rectangles and traits
    // ========================================================================
    io.println("\n4. Rectangles and Traits:")
    
    rect = Rectangle {
        top_left: Point { x: 0, y: 0 },
        bottom_right: Point { x: 50, y: 50 }
    }
    
    io.println("Rectangle area: ${rect.area()}")
    io.println("Rectangle perimeter: ${rect.perimeter()}")
    
    // ========================================================================
    // 5. Option handling - no null! (lines 462-473)
    // ========================================================================
    io.println("\n5. Option Types:")
    
    maybe_radius: Option<f64> = Some(5.5)
    maybe_radius ?
        | Some(r) {
            temp_circle = Circle {
                center: Point { x: 100.0, y: 100.0 },
                radius: r,
            }
            io.println("Option circle area: ${temp_circle.area()}")
        }
        | None {
            io.println("No radius provided")
        }
    
    none_option: Option<f64> = None
    none_option ?
        | Some(v) { io.println("Has value: ${v}") }
        | None { io.println("None case handled") }
    
    // ========================================================================
    // 6. Result type and error handling
    // ========================================================================
    io.println("\n6. Result Types:")
    
    result = parse_radius("5.5")
    result ?
        | Ok(val) { io.println("Parsed radius: ${val}") }
        | Err(e) { io.println("Error: ${e}") }
    
    // ========================================================================
    // 7. Range iterations (lines 432-439)
    // ========================================================================
    io.println("\n7. Ranges and Loops:")
    
    (0..3).loop((i) {
        io.println("Range iteration: ${i}")
    })
    
    // Step ranges
    (0..10).step(2).loop((i) {
        io.println("Step by 2: ${i}")
    })
    
    // ========================================================================
    // 8. Infinite loop with break (lines 452-459)
    // ========================================================================
    io.println("\n8. Loop Control:")
    
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { 
                io.println("Breaking at: ${counter}")
                break 
            }
            | false { io.println("Counting: ${counter}") }
    })
    
    // ========================================================================
    // 9. UFC and enum variants
    // ========================================================================
    io.println("\n9. UFC and Enum Variants:")
    
    player = GameEntity.Player
    enemy = GameEntity.Enemy
    
    io.println("Player health: ${player.get_health()}")
    io.println("Enemy health: ${enemy.get_health()}")
    
    // ========================================================================
    // FINAL STATUS
    // ========================================================================
    io.println("\n=== All LANGUAGE_SPEC.zen features tested successfully! ===")
}