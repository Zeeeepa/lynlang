// Comprehensive test for Vec<T, size> with generics
{ io } = @std

main = () void {
    io.println("Testing Vec<i32, 5>")
    
    // Create Vec with capacity 5
    vec = Vec<i32, 5>()
    
    // Test push
    vec.push(10)
    vec.push(20)
    vec.push(30)
    
    // Test len
    length = vec.len()
    io.println("Length: ${length}")
    
    // Test capacity with explicit type
    cap: i64 = vec.capacity()
    io.println("Capacity: ${cap}")
    
    // Test get with explicit type
    val1: i32 = vec.get(0)
    val2: i32 = vec.get(1)
    val3: i32 = vec.get(2)
    io.println("Values: ${val1}, ${val2}, ${val3}")
    
    // Test set
    vec.set(1, 99)
    val_updated: i32 = vec.get(1)
    io.println("After set(1, 99): ${val_updated}")
    
    // Push more items
    vec.push(40)
    vec.push(50)
    
    // Try to push beyond capacity (should be ignored)
    vec.push(60)
    
    final_len = vec.len()
    io.println("Final length: ${final_len}")
    
    // Test clear
    vec.clear()
    cleared_len = vec.len()
    io.println("After clear: ${cleared_len}")
}
