// Test .raise() error propagation
// .raise() unwraps Result<T,E> and propagates errors

io = @std

// Result type for error handling
Result<T, E>: Ok(T) | Err(E)

// Function that may fail
divide = (a: i32, b: i32) Result<i32, string> {
    b == 0 ?
        | true { return Err("Division by zero") }
        | false { return Ok(a / b) }
}

// Function using .raise() for error propagation
calculate = (x: i32) Result<i32, string> {
    // If divide returns Err, .raise() will propagate it
    step1 = divide(x, 2).raise()  // Returns i32 or propagates error
    step2 = divide(step1, 3).raise()  
    return Ok(step2 * 10)
}

main = () void {
    result1 = calculate(24)
    result1 ?
        | Ok(val) { io.println("Result 1: ${val}") }
        | Err(e) { io.println("Error 1: ${e}") }
    
    result2 = calculate(0)
    result2 ?
        | Ok(val) { io.println("Result 2: ${val}") }
        | Err(e) { io.println("Error 2: ${e}") }
}