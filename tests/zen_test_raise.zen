// Test .raise() error propagation

{ io } = @std

Result<T, E>: Ok(T) | Err(E)

divide = (a: f64, b: f64) Result<f64, string> {
    b == 0.0 ?
        | true { return Err("Division by zero") }
        | false { return Ok(a / b) }
}

calculate = (x: f64, y: f64) Result<f64, string> {
    // Use .raise() to propagate errors
    result1 = divide(x, y).raise()  // If error, returns early
    result2 = divide(result1, 2.0).raise()  // If error, returns early
    return Ok(result2)
}

main = () void {
    io.println("Testing .raise() error propagation:")
    
    // Test successful calculation
    calculate(10.0, 2.0) ?
        | Ok(val) { io.println("Success: ${val}") }
        | Err(e) { io.println("Error: ${e}") }
    
    // Test with division by zero
    calculate(10.0, 0.0) ?
        | Ok(val) { io.println("Success: ${val}") }
        | Err(e) { io.println("Error: ${e}") }
}
