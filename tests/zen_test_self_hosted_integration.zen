// Test for self-hosted compiler integration
// This test verifies that all self-hosted components work together

// Correct import syntax - no comptime wrapper
core = @std.core
io = @std.io
test = @std.test

// Import self-hosted compiler modules
lexer = @std.lexer
parser = @std.parser
type_checker = @std.type_checker
codegen = @std.codegen
errors = @std.errors

// Test lexer integration
test_lexer_integration = () bool   {
    input := "x := 42"
    
    // Create lexer
    lex := lexer.new(input)
    
    // Get tokens
    tokens := lexer.tokenize(lex)
    
    // Should have 4 tokens: x, :=, 42, EOF
    tokens.len != 4 ?
        | true {
            io.print("Expected 4 tokens, got ")
            io.print_int(tokens.len)
            io.print("\n")
            return false
        }
        | false {}
    
    return true
}

// Test parser integration
test_parser_integration = () bool   {
    input := "x := 42\ny := x + 1"
    
    // Create lexer
    lex := lexer.new(input)
    tokens := lexer.tokenize(lex)
    
    // Create parser
    p := parser.new(tokens)
    
    // Parse program
    ast := parser.parse_program(p)
    
    // Check AST
    if ast.is_error() {
        io.print("Parser error\n")
        return false
    }
    
    return true
}

// Test type checker integration
test_type_checker_integration = () bool   {
    input := "x: i32 = 42\ny := x + 1"
    
    // Create lexer
    lex := lexer.new(input)
    tokens := lexer.tokenize(lex)
    
    // Create parser
    p := parser.new(tokens)
    ast := parser.parse_program(p)
    
    // Create type checker
    tc := type_checker.new()
    
    // Type check the AST
    result := type_checker.check(tc, ast)
    
    if result.is_error() {
        io.print("Type check error\n")
        return false
    }
    
    return true
}

// Test full compilation pipeline
test_full_pipeline = () bool   {
    input := "main = () i32 { return 42 }"
    
    // Lexer phase
    lex := lexer.new(input)
    tokens := lexer.tokenize(lex)
    
    // Parser phase
    p := parser.new(tokens)
    ast := parser.parse_program(p)
    
    if ast.is_error() {
        io.print("Parse error\n")
        return false
    }
    
    // Type checker phase
    tc := type_checker.new()
    typed_ast := type_checker.check(tc, ast)
    
    if typed_ast.is_error() {
        io.print("Type check error\n")
        return false
    }
    
    // Codegen phase
    cg := codegen.new()
    ir := codegen.generate(cg, typed_ast)
    
    if ir.is_error() {
        io.print("Codegen error\n")
        return false
    }
    
    io.print("✓ Full compilation pipeline successful\n")
    return true
}

// Test error reporting
test_error_reporting = () bool   {
    input := "x := \"hello\" + 42"  // Type error
    
    // Create lexer
    lex := lexer.new(input)
    tokens := lexer.tokenize(lex)
    
    // Create parser
    p := parser.new(tokens)
    ast := parser.parse_program(p)
    
    // Create type checker
    tc := type_checker.new()
    result := type_checker.check(tc, ast)
    
    // Should have a type error
    if !result.is_error() {
        io.print("Expected type error\n")
        return false
    }
    
    // Check error formatting
    err := result.get_error()
    if !errors.is_type_error(err) {
        io.print("Expected type error category\n")
        return false
    }
    
    return true
}

// Test import validation
test_import_validation = () bool   {
    // Test that imports work at module level (this file demonstrates it)
    // and that the parser rejects imports in comptime blocks
    
    bad_input := "@comptime { io = @std.io }"
    
    // Create lexer
    lex := lexer.new(bad_input)
    tokens := lexer.tokenize(lex)
    
    // Create parser
    p := parser.new(tokens)
    ast := parser.parse_program(p)
    
    // Should have an error
    if !ast.is_error() {
        io.print("Parser should reject imports in comptime blocks\n")
        return false
    }
    
    return true
}

// Main test runner
main = () i32   {
    io.print("Testing Self-Hosted Compiler Integration\n")
    io.print("=========================================\n\n")
    
    passed := 0
    failed := 0
    
    // Run tests
    test_lexer_integration() ?
        | true {
            io.print("✓ Lexer integration test passed\n")
            passed = passed + 1
        }
        | false {
            io.print("✗ Lexer integration test failed\n")
            failed = failed + 1
        }
    
    test_parser_integration() ?
        | true {
            io.print("✓ Parser integration test passed\n")
            passed = passed + 1
        }
        | false {
            io.print("✗ Parser integration test failed\n")
            failed = failed + 1
        }
    
    test_type_checker_integration() ?
        | true {
            io.print("✓ Type checker integration test passed\n")
            passed = passed + 1
        }
        | false {
            io.print("✗ Type checker integration test failed\n")
            failed = failed + 1
        }
    
    test_full_pipeline() ?
        | true {
            io.print("✓ Full pipeline test passed\n")
            passed = passed + 1
        }
        | false {
            io.print("✗ Full pipeline test failed\n")
            failed = failed + 1
        }
    
    test_error_reporting() ?
        | true {
            io.print("✓ Error reporting test passed\n")
            passed = passed + 1
        }
        | false {
            io.print("✗ Error reporting test failed\n")
            failed = failed + 1
        }
    
    test_import_validation() ?
        | true {
            io.print("✓ Import validation test passed\n")
            passed = passed + 1
        }
        | false {
            io.print("✗ Import validation test failed\n")
            failed = failed + 1
        }
    
    // Print summary
    io.print("\n=========================================\n")
    io.print("Tests passed: ")
    io.print_int(passed)
    io.print("\nTests failed: ")
    io.print_int(failed)
    io.print("\n")
    
    failed == 0 ?
        | true {
            io.print("\n✓ All self-hosted integration tests passed!\n")
            return 0
        }
        | false {
            io.print("\n✗ Some tests failed\n")
            return 1
        }
}