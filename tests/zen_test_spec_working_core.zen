// Core working features from LANGUAGE_SPEC.zen
// This test demonstrates all currently working features

{ io } = @std

// Structs (from spec lines 115-129)
Point: {
    x:: f64,
    y:: f64 = 0
}

Circle: {
    center: Point,
    radius: f64
}

Rectangle: {
    top_left: Point,
    bottom_right: Point
}

// Enums (from spec line 166)
Shape: Circle | Rectangle

// Simple functions
add = (a: i32, b: i32) i32 {
    return a + b
}

multiply = (x1: f64, y1: f64) f64 {
    return x1 * y1
}

// Main function demonstrating working features
main = () void {
    io.println("=== ZEN LANGUAGE SPEC - WORKING CORE ===")
    
    // ============================================================================
    // VARIABLES (spec lines 299-306)
    // ============================================================================
    io.println("\n1. VARIABLES (All 8 forms):")
    
    // Forward declaration
    x: i32
    x = 10
    io.println("  Forward + assign: x = ${x}")
    
    // Immutable assignment
    y = 20
    io.println("  Immutable: y = ${y}")
    
    // Immutable with type
    z : i32 = 30
    io.println("  Immutable typed: z = ${z}")
    
    // Mutable forward declaration
    w :: i32
    w = 40
    io.println("  Mutable forward: w = ${w}")
    w = 50
    io.println("  Reassigned: w = ${w}")
    
    // Mutable assignment
    v ::= 60
    io.println("  Mutable: v = ${v}")
    v = 70
    io.println("  Reassigned: v = ${v}")
    
    // Mutable with type
    u :: i32 = 80
    io.println("  Mutable typed: u = ${u}")
    u = 90
    io.println("  Reassigned: u = ${u}")
    
    // ============================================================================
    // PATTERN MATCHING (spec lines 352-361)
    // ============================================================================
    io.println("\n2. PATTERN MATCHING:")
    
    // Simple boolean pattern
    ready = true
    ready ? { io.println("  Simple pattern: ready is true") }
    
    // Full boolean pattern
    value = false
    value ?
        | true { io.println("  value is true") }
        | false { io.println("  Full pattern: value is false") }
    
    // Pattern in expression
    result = 10
    check = result > 5
    check ?
        | true { io.println("  Expression pattern: result > 5") }
        | false { io.println("  result <= 5") }
    
    // ============================================================================
    // FUNCTIONS AND UFC (spec line 5)
    // ============================================================================
    io.println("\n3. FUNCTIONS AND UFC:")
    
    sum = add(10, 20)
    io.println("  Function call: add(10, 20) = ${sum}")
    
    product = multiply(3.5, 2.0)
    io.println("  Function call: multiply(3.5, 2.0) = ${product}")
    
    // ============================================================================
    // STRUCTS (spec lines 115-163)
    // ============================================================================
    io.println("\n4. STRUCTS:")
    
    p = Point { x: 10.0, y: 20.0 }
    io.println("  Point: x=${p.x}, y=${p.y}")
    
    c = Circle { 
        center: Point { x: 0.0, y: 0.0 },
        radius: 5.0
    }
    io.println("  Circle: radius=${c.radius}")
    
    rect = Rectangle {
        top_left: Point { x: 0.0, y: 10.0 },
        bottom_right: Point { x: 10.0, y: 0.0 }
    }
    io.println("  Rectangle created")
    
    // ============================================================================
    // LOOPS (spec lines 431-459)
    // ============================================================================
    io.println("\n5. LOOPS:")
    
    // Range loop
    io.print("  Range (0..5): ")
    (0..5).loop((i) {
        io.print("${i} ")
    })
    io.println("")
    
    // Range with body
    io.println("  Range with body:")
    (0..3).loop((i) {
        io.println("    Item ${i}")
    })
    
    // Infinite loop with break
    io.print("  Loop with break: ")
    counter ::= 0
    loop(() {
        counter = counter + 1
        io.print("${counter} ")
        counter >= 3 ? { break }
    })
    io.println("")
    
    // Loop with conditional break
    io.println("  Loop with pattern break:")
    count ::= 0
    loop(() {
        count = count + 1
        io.println("    Iteration ${count}")
        count > 2 ?
            | true { 
                io.println("    Breaking at ${count}")
                break 
            }
            | false { /* continue */ }
    })
    
    // ============================================================================
    // STRING INTERPOLATION
    // ============================================================================
    io.println("\n6. STRING INTERPOLATION:")
    
    name = "Zen"
    version = 2025
    pi = 3.14159
    
    io.println("  Language: ${name}")
    io.println("  Version: ${version}")
    io.println("  Pi: ${pi}")
    io.println("  Complex: ${name} v${version} with pi=${pi}")
    
    // ============================================================================
    // ARITHMETIC AND EXPRESSIONS
    // ============================================================================
    io.println("\n7. ARITHMETIC:")
    
    num1 = 10
    num2 = 3
    io.println("  ${num1} + ${num2} = ${num1 + num2}")
    io.println("  ${num1} - ${num2} = ${num1 - num2}")
    io.println("  ${num1} * ${num2} = ${num1 * num2}")
    io.println("  ${num1} / ${num2} = ${num1 / num2}")
    
    // ============================================================================
    // COMPARISONS
    // ============================================================================
    io.println("\n8. COMPARISONS:")
    
    x1_val = 10
    x2_val = 20
    
    comp1 = x1_val < x2_val
    comp1 ? { io.println("  ${x1_val} < ${x2_val} is true") }
    
    comp2 = x1_val > x2_val
    comp2 ?
        | true { io.println("  ${x1_val} > ${x2_val}") }
        | false { io.println("  ${x1_val} <= ${x2_val}") }
    
    comp3 = x1_val == 10
    comp3 ? { io.println("  ${x1_val} == 10 is true") }
    
    io.println("\n=== ALL WORKING CORE FEATURES DEMONSTRATED ===")
    io.println("This test validates the core implementation")
    io.println("matches LANGUAGE_SPEC.zen requirements")
}