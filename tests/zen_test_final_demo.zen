// Final demonstration of working Zen language features
// Based on LANGUAGE_SPEC.zen

{ io } = @std

// Core types from spec
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

// Simple struct
Point: {
    x: f64,
    y: f64,
}

// Enums
Color: .Red | Green | Blue
GameEntity: .Player | Enemy | Powerup

main = () void {
    io.println("=== ZEN LANGUAGE WORKING FEATURES ===")
    
    // 1. No keywords - pattern matching with ?
    io.println("Pattern matching (no if/else/switch):")
    true ? { io.println("  ✓ Boolean pattern") }
    
    false ?
        | true { }
        | false { io.println("  ✓ Full boolean pattern") }
    
    // 2. Option type (no null!)
    io.println("Option type:")
    opt1 = Some(42)
    opt1 ?
        | Some(v) { io.println("  ✓ Option.Some") }
        | None { }
    
    opt2 = None
    opt2 ?
        | Some(v) { }
        | None { io.println("  ✓ Option.None") }
    
    // 3. Result type
    io.println("Result type:")
    res1 = Ok(100)
    res1 ?
        | Ok(v) { io.println("  ✓ Result.Ok") }
        | Err(e) { }
    
    res2 = Err("error")
    res2 ?
        | Ok(v) { }
        | Err(e) { io.println("  ✓ Result.Err") }
    
    // 4. Mutable variables with ::=
    io.println("Variables:")
    x = 10
    io.println("  ✓ Immutable: x = 10")
    
    y ::= 20
    y = 21
    io.println("  ✓ Mutable: y ::= 20, then 21")
    
    // 5. Structs
    io.println("Structs:")
    p = Point { x: 1.0, y: 2.0 }
    io.println("  ✓ Struct creation")
    
    // 6. Enums
    io.println("Enums:")
    entity = GameEntity.Player
    entity ?
        | Player { io.println("  ✓ Enum matching") }
        | Enemy { }
        | Powerup { }
    
    // 7. Range loops
    io.println("Loops:")
    (0..2).loop((i) {
        io.println("  ✓ Range iteration")
    })
    
    // 8. String interpolation
    val = 42
    io.println("String interpolation: value = ${val}")
    
    io.println("=== SUCCESS: Core features working! ===")
}