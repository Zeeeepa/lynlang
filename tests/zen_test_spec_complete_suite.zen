// Complete test suite for LANGUAGE_SPEC.zen implementation
// This file tests ALL features from the specification
// Working features are tested with actual code
// Not-yet-implemented features are documented as TODOs

// ============================================================================
// SECTION 1: Core Imports and Basic Setup (WORKING)
// ============================================================================
{ io, math } = @std

// ============================================================================
// SECTION 2: Option and Result Types (PARTIALLY WORKING)
// ============================================================================
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

// ============================================================================
// SECTION 3: Basic Structs (WORKING)
// ============================================================================
Point: {
    x:: f64,  // mutable field
    y:: f64 = 0  // with default value
}

// ============================================================================
// SECTION 4: Traits (NOT YET IMPLEMENTED)
// ============================================================================
// TODO: Implement trait definition and .implements()
/*
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

Circle: {
    center: Point,
    radius: f64,
}

Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})
*/

// ============================================================================
// SECTION 5: Enums (PARTIALLY WORKING)
// ============================================================================
Shape: Circle | Rectangle

// TODO: Implement Shape.requires(Geometric)

// ============================================================================
// SECTION 6: UFC Overloading (NOT YET IMPLEMENTED)
// ============================================================================
// TODO: Implement function overloading based on enum variants
/*
GameEntity: Player | Enemy | Powerup

get_health = (e: GameEntity.Player) u32 { return 100 }
get_health = (e: GameEntity.Enemy) u32 { return 50 }
get_health = (e: GameEntity.Powerup) u32 { return 0 }
*/

// ============================================================================
// SECTION 7: Generic Functions (NOT YET IMPLEMENTED)
// ============================================================================
// TODO: Implement generic function syntax
/*
print_area<T: Geometric>(shape: T) void {
    io.println("Area: ${shape.area()}")
}
*/

// ============================================================================
// SECTION 8: Error Propagation (PARSED BUT NOT WORKING)
// ============================================================================
// TODO: Fix .raise() codegen
/*
parse_radius = (s: string) Result<f64, string> {
    s.to_f64() ?
        | Some(val) { return Ok(val) }
        | None { return Err("Invalid radius") }
}

load_config = (path: string) Result<Config, Error> {
    file = File.open(path).raise()  // If Err, returns early
    contents = file.read_all().raise()
    config = json.parse(contents).raise()
    return Ok(config)
}
*/

// ============================================================================
// SECTION 9: Main Function - Testing Working Features
// ============================================================================
main = () void {
    io.println("=== ZEN LANGUAGE SPEC TEST SUITE ===")
    
    // Test 1: Variable Declarations (WORKING)
    io.println("1. Variable Declarations (spec lines 298-306):")
    x: i32  // forward declaration
    x = 10
    y = 20  // immutable
    z: i32 = 30  // immutable with type
    w:: i32  // mutable forward declaration
    w = 40
    v ::= 50  // mutable assignment
    u:: i32 = 60  // mutable with type
    
    io.println("  x = ${x}")
    io.println("  y = ${y}")
    io.println("  z = ${z}")
    io.println("  w = ${w}")
    io.println("  v = ${v}")
    io.println("  u = ${u}")
    
    // Modify mutable variables
    w = w + 5
    v = v * 2
    u = u - 10
    io.println("  After modification: w=${w}, v=${v}, u=${u}")
    io.println("  ✓ All 6 variable forms working")
    
    // Test 2: Pattern Matching (WORKING)
    io.println("2. Pattern Matching with ? operator:")
    is_ready = true
    is_ready ? {
        io.println("  ✓ Single branch pattern works")
    }
    
    has_data = false
    has_data ?
        | true { io.println("  Has data") }
        | false { io.println("  ✓ No data (boolean pattern match works)") }
    
    // Test 3: Loops and Ranges (WORKING)
    io.println("3. Loops and Ranges (spec lines 431-459):")
    
    io.println("  Range (0..5):")
    (0..5).loop((i) {
        io.print("    ${i}")
    })
    io.println("") 
    io.println("  ✓ Range loop works")
    
    // TODO: Test step ranges when implemented
    // (0..20).step(5).loop((i) { ... })
    
    // Infinite loop with break
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { 
                io.println("  ✓ Loop with break works (stopped at ${counter})")
                break
            }
            | false { }
    })
    
    // Test 4: UFC Method Calls (WORKING)
    io.println("4. UFC - Uniform Function Call (spec line 5):")
    arr = [10, 20, 30]
    io.println("  Array elements via .loop():")
    arr.loop((item) {
        io.print("    ${item}")
    })
    io.println("") 
    io.println("  ✓ UFC on arrays works")
    
    // Test 5: String Interpolation (WORKING)
    io.println("5. String Interpolation:")
    name = "Zen"
    version = 1.0
    message = "Language: ${name}, Version: ${version}"
    io.println("  ${message}")
    io.println("  ✓ String interpolation works")
    
    // Test 6: Math Constants (WORKING)
    io.println("6. @std.math constants:")
    io.println("  Pi = ${math.pi}")
    radius = 2.0
    area = math.pi * radius * radius
    io.println("  Circle area (r=${radius}) = ${area}")
    io.println("  ✓ Math.pi constant works")
    
    // Test 7: Struct Usage (WORKING)
    io.println("7. Structs (spec lines 117-120):")
    p = Point { x: 10.5, y: 20.7 }
    io.println("  Point: x=${p.x}, y=${p.y}")
    p.x = p.x + 5.0  // mutable field
    p.y = p.y * 2.0
    io.println("  After modification: x=${p.x}, y=${p.y}")
    io.println("  ✓ Struct with mutable fields works")
    
    // Test 8: Option Type (PARTIALLY WORKING)
    io.println("8. Option Type (spec lines 109-110, 462-473):")
    maybe_value: Option<i32> = Some(42)
    maybe_value ?
        | Some(val) { io.println("  Got value: ${val}") }
        | None { io.println("  No value") }
    
    empty: Option<i32> = None
    empty ?
        | Some(val) { io.println("  Should not print: ${val}") }
        | None { io.println("  ✓ Option type pattern matching works") }
    
    // Test 9: Result Type (PARTIALLY WORKING)
    io.println("9. Result Type (spec lines 112-113):")
    success: Result<i32, string> = Ok(100)
    success ?
        | Ok(val) { io.println("  Success: ${val}") }
        | Err(e) { io.println("  Error: ${e}") }
    
    failure: Result<i32, string> = Err("Something went wrong")
    failure ?
        | Ok(val) { io.println("  Should not print: ${val}") }
        | Err(e) { io.println("  ✓ Error handling: ${e}") }
    
    // ========================================================================
    // NOT YET IMPLEMENTED FEATURES (TODO)
    // ========================================================================
    io.println("=== NOT YET IMPLEMENTED ===")
    io.println("The following LANGUAGE_SPEC.zen features need implementation:")
    io.println("  □ Traits with .implements() and .requires()")
    io.println("  □ Generic functions and constraints <T: Trait>")
    io.println("  □ DynVec and Vec<T, N> types")
    io.println("  □ Function overloading for enum variants")
    io.println("  □ Error propagation with .raise()")
    io.println("  □ Pointer types: Ptr<>, MutPtr<>, RawPtr<>")
    io.println("  □ Allocators for sync/async behavior")
    io.println("  □ Actor system and channels")
    io.println("  □ Mutex and atomic operations")
    io.println("  □ AST reflection and @meta.comptime")
    io.println("  □ Module imports/exports")
    io.println("  □ FFI with inline C/LLVM")
    io.println("  □ SIMD operations")
    
    io.println("=== TEST SUITE COMPLETE ===")
    io.println("Working features: 9/22 core features")
    io.println("See IMPLEMENTATION_STATUS.md for detailed roadmap")
}