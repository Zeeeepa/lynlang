// Test file showing currently working features from LANGUAGE_SPEC.zen
{ io, math } = @std

// Working: Option type definition (lines 109-110)
Option<T>: Some(T) | None

// Working: Result type definition (lines 112-113)  
Result<T, E>: Ok(T) | Err(E)

// Working: Simple struct (lines 117-120)
Point: {
    x:: f64,
    y:: f64 = 0.0
}

// Working: Simple enum (line 166)
Color: Red | Green | Blue

main = () void {
    io.println("LANGUAGE_SPEC.zen Working Features")
    io.println("===================================")
    
    // Variables (lines 298-306)
    io.println("\n1. Variable declarations:")
    x: i32
    x = 10
    y = 20
    z: i32 = 30
    w:: i32
    w = 40
    v ::= 50
    u:: i32 = 60
    io.println("  All 6 forms working: x=${x}, y=${y}, z=${z}, w=${w}, v=${v}, u=${u}")
    
    // Pattern matching (lines 352-361)
    io.println("\n2. Pattern matching:")
    is_ready = true
    is_ready ? {
        io.println("  Single pattern: Ready!")
    }
    
    has_data = false  
    has_data ?
        | true { io.println("  Has data") }
        | false { io.println("  Two patterns: No data") }
    
    // Option type (lines 462-473)
    io.println("\n3. Option type:")
    maybe: Option<i32> = Some(42)
    maybe ?
        | Some(val) { io.println("  Some(${val})") }
        | None { io.println("  None") }
    
    // Result type
    io.println("\n4. Result type:")
    result: Result<i32, string> = Ok(100)
    result ?
        | Ok(val) { io.println("  Ok(${val})") }
        | Err(e) { io.println("  Err(${e})") }
    
    // Structs (lines 364-372)
    io.println("\n5. Structs with mutable fields:")
    p ::= Point { x: 1.0, y: 2.0 }
    io.println("  Before: (${p.x}, ${p.y})")
    p.x = 3.0
    io.println("  After: (${p.x}, ${p.y})")
    
    // Enums
    io.println("\n6. Enums:")
    c = Color.Red
    c ?
        | Red { io.println("  Color is Red") }
        | Green { io.println("  Color is Green") }
        | Blue { io.println("  Color is Blue") }
    
    // Loops and ranges (lines 431-459)
    io.println("\n7. Loops and ranges:")
    io.print("  Range: ")
    (0..5).loop((i) {
        io.print("${i} ")
    })
    io.println("")
    
    io.print("  Loop: ")
    counter ::= 0
    loop(() {
        io.print("${counter} ")
        counter = counter + 1
        counter >= 3 ?
            | true { break }
            | false { }
    })
    io.println("")
    
    // UFC (lines 441-450)
    io.println("\n8. UFC (Uniform Function Call):")
    numbers = [1, 2, 3]
    io.print("  Array: ")
    numbers.loop((n) {
        io.print("${n} ")
    })
    io.println("")
    
    // String interpolation
    io.println("\n9. String interpolation:")
    name = "Zen"
    version = 1.0
    io.println("  Language: ${name} v${version}")
    
    // Math constants (line 138)
    io.println("\n10. Math constants:")
    pi = math.pi
    io.println("  Pi: ${pi}")
    area = pi * 5.0 * 5.0
    io.println("  Circle area (r=5): ${area}")
    
    io.println("\nAll tested features working!")
}