// Test trait system implementation for Zen language
// Based on examples from LANGUAGE_SPEC.zen

// Import standard library
io = @std.io

// Define a trait with method signatures
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Define types to implement the trait
Point: {
    x: f64,
    y: f64,
}

Circle: {
    center: Point,
    radius: f64,
}

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

// Implement the trait for Circle
Circle.implements(Geometric, {
    area = (self) f64 {
        return 3.14159 * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * 3.14159 * self.radius
    },
})

// Implement the trait for Rectangle  
Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// Define an enum type with trait requirements
Shape: Circle, Rectangle
Shape.requires(Geometric)

// Generic function with trait constraints
print_area<T: Geometric>(shape: T) void {
    io.println("Area: ${shape.area()}")
}

// Generic container with multiple constraints
Serializable: {
    serialize: (self) string,
}

Container<T: Geometric + Serializable>: {
    items: Vec<T, 10>,
    
    add: (item: T) void,
    total_area: () f64,
}

main = () void {
    // Create test objects
    circle = Circle {
        center: Point { x: 0.0, y: 0.0 },
        radius: 5.0,
    }
    
    rectangle = Rectangle {
        top_left: Point { x: 0.0, y: 0.0 },
        bottom_right: Point { x: 10.0, y: 10.0 },
    }
    
    // Test trait method calls
    circle_area = circle.area()
    circle_perimeter = circle.perimeter()
    
    rectangle_area = rectangle.area()
    rectangle_perimeter = rectangle.perimeter()
    
    io.println("Circle area: ${circle_area}")
    io.println("Circle perimeter: ${circle_perimeter}")
    io.println("Rectangle area: ${rectangle_area}")
    io.println("Rectangle perimeter: ${rectangle_perimeter}")
    
    // Test generic function with trait constraints
    print_area(circle)
    print_area(rectangle)
    
    io.println("Trait system test completed!")
}