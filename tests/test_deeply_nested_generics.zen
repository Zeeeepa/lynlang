// Test deeply nested generic types
{ io, Result, Option , get_default_allocator} = @std

main = () void {
    alloc = get_default_allocator()
    io.println("=== Deeply Nested Generics Test ===")
    
    // Test 1: Quadruple nested Results
    io.println("Test 1: Result<Result<Result<Result<i32,E>,E>,E>,E>")
    create_quad = () Result<Result<Result<Result<i32, string>, string>, string>, string> {
        return Result.Ok(Result.Ok(Result.Ok(Result.Ok(999))))
    }
    
    quad = create_quad()
    level1 = quad.raise()
    level2 = level1.raise()
    level3 = level2.raise()
    value = level3.raise()
    io.println("  Got: ${value} (expected 999)")
    
    // Test 2: Mixed nested Option and Result
    io.println("\nTest 2: Option<Result<Option<Result<i32,E>>,E>>")
    create_mixed = () Option<Result<Option<Result<i32, string>>, string>> {
        return Option.Some(Result.Ok(Option.Some(Result.Ok(777))))
    }
    
    mixed = create_mixed()
    mixed ?
        | Option.Some(result1) {
            inner_opt = result1.raise()
            inner_opt ?
                | Option.Some(result2) {
                    val = result2.raise()
                    io.println("  Got: ${val} (expected 777)")
                }
                | Option.None { io.println("  Error: Got None") }
        }
        | Option.None { io.println("  Error: Got None") }
    
    // Test 3: Result with complex error type
    io.println("\nTest 3: Result<T, Result<string, i32>>")
    create_complex_err = () Result<i32, Result<string, i32>> {
        // Return an error that is itself a Result
        return Result.Err(Result.Ok("complex error"))
    }
    
    complex = create_complex_err()
    complex ?
        | Result.Ok(v) { io.println("  Error: Got Ok(${v})") }
        | Result.Err(err_result) {
            err_result ?
                | Result.Ok(msg) { io.println("  Got error message: '${msg}' (expected 'complex error')") }
                | Result.Err(code) { io.println("  Got error code: ${code}") }
        }
    
    io.println("\n=== Test Complete ===")
}
