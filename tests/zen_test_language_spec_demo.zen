// Zen Language Demo - Based on LANGUAGE_SPEC.zen
// This demonstrates the working features of the Zen language

{ io } = @std

// ============================================================================
// Core Types and Structures
// ============================================================================

// Simple struct with mutable fields
Point: {
    x:: f64,
    y:: f64 = 0.0
}

// Nested struct
Circle: {
    center: Point,
    radius: f64
}

Rectangle: {
    top_left: Point,
    bottom_right: Point
}

// Option type - no null!
Option<T>: Some(T) | None

// Result type for error handling
Result<T, E>: Ok(T) | Err(E)

// Basic enum
Shape: Circle | Rectangle
GameEntity: Player | Enemy | Powerup

// ============================================================================
// Functions
// ============================================================================

calculate_circle_area = (radius: f64) f64 {
    pi = 3.14159
    return pi * radius * radius
}

calculate_rectangle_area = (width: f64, height: f64) f64 {
    return width * height
}

// Function with pattern matching on Option
process_maybe_value = (maybe: Option<i32>) void {
    maybe ?
        | Some(val) { 
            io.println("Got value: ${val}")
        }
        | None { 
            io.println("No value provided")
        }
}

// Function with Result type
divide = (a: f64, b: f64) Result<f64, string> {
    b == 0.0 ?
        | true { return Err("Division by zero") }
        | false { return Ok(a / b) }
}

// ============================================================================
// Main Program
// ============================================================================

main = () void {
    io.println("=== Zen Language Demo ===")
    io.println("")
    
    // ========================================================================
    // 1. Variables (all forms from LANGUAGE_SPEC lines 298-306)
    // ========================================================================
    io.println("1. Variable Declarations:")
    
    // Direct assignment (forward declaration for immutable not yet working)
    x = 10
    io.println("  Direct assignment x = ${x}")
    
    // Immutable assignment
    y = 20
    io.println("  Immutable y = ${y}")
    
    // Immutable with type
    z: i32 = 30
    io.println("  Typed immutable z = ${z}")
    
    // Mutable forward declaration
    w:: i32
    w = 40
    io.println("  Mutable forward declared w = ${w}")
    w = 45  // Can reassign
    io.println("  Reassigned w = ${w}")
    
    // Mutable assignment
    v ::= 50
    io.println("  Mutable v = ${v}")
    v = 55  // Can reassign
    io.println("  Reassigned v = ${v}")
    
    // Mutable with type
    u:: i32 = 60
    io.println("  Typed mutable u = ${u}")
    
    io.println("")
    
    // ========================================================================
    // 2. Pattern Matching (lines 352-361)
    // ========================================================================
    io.println("2. Pattern Matching:")
    
    is_ready = true
    is_ready ? {
        io.println("  System is ready!")
    }
    
    has_data = false
    has_data ?
        | true { io.println("  Processing data...") }
        | false { io.println("  No data to process") }
    
    io.println("")
    
    // ========================================================================
    // 3. Structs (lines 117-120, 364-371)
    // ========================================================================
    io.println("3. Structs:")
    
    origin = Point { x: 0.0, y: 0.0 }
    io.println("  Origin point: (${origin.x}, ${origin.y})")
    
    point1 = Point { x: 10.0, y: 20.0 }
    io.println("  Point1: (${point1.x}, ${point1.y})")
    
    // Mutable struct field modification
    point1.x = 15.0
    io.println("  Modified point1: (${point1.x}, ${point1.y})")
    
    circle = Circle {
        center: Point { x: 100.0, y: 100.0 },
        radius: 50.0
    }
    io.println("  Circle center: (${circle.center.x}, ${circle.center.y}), radius: ${circle.radius}")
    
    area = calculate_circle_area(circle.radius)
    io.println("  Circle area: ${area}")
    
    io.println("")
    
    // ========================================================================
    // 4. Option Types (lines 109-110, 462-473)
    // ========================================================================
    io.println("4. Option Types (No null!):")
    
    some_value: Option<i32> = Some(42)
    process_maybe_value(some_value)
    
    no_value: Option<i32> = None
    process_maybe_value(no_value)
    
    io.println("")
    
    // ========================================================================
    // 5. Result Types (lines 113-114, 199-211)
    // ========================================================================
    io.println("5. Result Types:")
    
    result1 = divide(10.0, 2.0)
    result1 ?
        | Ok(val) { io.println("  10 / 2 = ${val}") }
        | Err(msg) { io.println("  Error: ${msg}") }
    
    result2 = divide(10.0, 0.0)
    result2 ?
        | Ok(val) { io.println("  10 / 0 = ${val}") }
        | Err(msg) { io.println("  Error: ${msg}") }
    
    io.println("")
    
    // ========================================================================
    // 6. Loops (lines 432-460)
    // ========================================================================
    io.println("6. Loops:")
    
    io.println("  Range loop (0..5):")
    (0..5).loop((i) {
        io.println("    ${i}")
    })
    
    io.println("  Step range (0..10 by 2):")
    (0..10).step(2).loop((i) {
        io.println("    ${i}")
    })
    
    io.println("  Infinite loop with break:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        io.println("    Counter: ${counter}")
        counter >= 3 ?
            | true { break }
            | false { }
    })
    
    io.println("")
    
    // ========================================================================
    // 7. String Interpolation (line 186)
    // ========================================================================
    io.println("7. String Interpolation:")
    
    language = "Zen"
    version = 1.0
    features = 42
    message = "Welcome to ${language} v${version} with ${features} features!"
    io.println("  ${message}")
    
    io.println("")
    
    // ========================================================================
    // 8. Complex Example
    // ========================================================================
    io.println("8. Complex Example - Shape Processing:")
    
    // Create shapes
    c1 = Circle {
        center: Point { x: 0.0, y: 0.0 },
        radius: 10.0
    }
    
    r1 = Rectangle {
        top_left: Point { x: 0.0, y: 10.0 },
        bottom_right: Point { x: 20.0, y: 0.0 }
    }
    
    circle_area = calculate_circle_area(c1.radius)
    rect_area = calculate_rectangle_area(20.0, 10.0)
    
    io.println("  Circle area: ${circle_area}")
    io.println("  Rectangle area: ${rect_area}")
    
    total_area = circle_area + rect_area
    io.println("  Total area: ${total_area}")
    
    io.println("")
    io.println("=== Demo Complete ===")
}