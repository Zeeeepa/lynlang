// Zen Language Demo - Core features from LANGUAGE_SPEC.zen
// This is a working subset of the language specification

{ io } = @std

// Simple struct
Point: {
    x:: f64,
    y:: f64 = 0
}

Circle: {
    center: Point,
    radius: f64
}

main = () void {
    io.println("=== Zen Language Demo ===")
    
    // 1. Variables Test
    io.println("1. Variables:")
    x = 10           // Immutable  
    y = 10           // Immutable 
    z : i32 = 20     // With type
    w :: i32         // Mutable forward declaration
    w = 20
    v ::= 30         // Mutable
    u :: i32 = 40    // Mutable with type
    
    io.println("   Immutable x = ")
    io.println(x)
    io.println("   Mutable v = ")
    io.println(v)
    v = v + 5
    io.println("   After v = v + 5: ")
    io.println(v)
    
    // 2. Boolean pattern matching
    io.println("2. Pattern Matching:")
    is_ready = true
    is_ready ? { 
        io.println("   System is ready!")
    }
    
    // Pattern match with branches
    has_data = false
    has_data ?
        | true { io.println("   Processing data...") }
        | false { io.println("   Waiting for data...") }
    
    // 3. Structs
    io.println("3. Structs:")
    circle = Circle { 
        center: Point { x: 100, y: 100 }, 
        radius: 50 
    }
    io.println("   Circle created with radius 50")
    
    // 4. Comparisons
    io.println("4. Comparisons:")
    a = 10
    b = 20
    is_less = a < b
    is_less ? {
        io.println("   10 < 20 is true")
    }
    
    io.println("=== Demo Complete ===")
}
