// Test for error propagation with .raise() from LANGUAGE_SPEC.zen

{ io } = @std

// Result type for error handling (line 113)
Result<T, E>: Ok(T) | Err(E)

// Mock file operations for testing
File: {
    path: string,
    content: string = ""
}

// File.open returns Result<File, string>
open = (path: string) Result<File, string> {
    // Simulate file not found for paths containing "missing"
    path.contains("missing") ?
        | true { return Err("File not found: ${path}") }
        | false { 
            return Ok(File { path: path, content: "test content" })
        }
}

// File.read_all returns Result<string, string>
read_all = (file: File) Result<string, string> {
    // Simulate read error for specific files
    file.path.contains("corrupt") ?
        | true { return Err("Read error: corrupted file") }
        | false { return Ok(file.content) }
}

// Parse JSON mock - returns Result<Config, string>
Config: {
    name: string,
    value: i32
}

parse_json = (contents: string) Result<Config, string> {
    // Simple mock parsing
    contents.contains("test") ?
        | true { return Ok(Config { name: "test", value: 42 }) }
        | false { return Err("Invalid JSON format") }
}

// Error propagation with .raise() - from line 205
load_config = (path: string) Result<Config, string> {
    file = open(path).raise()           // If Err, returns early with that error
    contents = read_all(file).raise()   // If Err, returns early with that error  
    config = parse_json(contents).raise() // If Err, returns early with that error
    return Ok(config)
}

// Another example without .raise() for comparison
load_config_verbose = (path: string) Result<Config, string> {
    file_result = open(path)
    file_result ?
        | Ok(file) {
            contents_result = read_all(file)
            contents_result ?
                | Ok(contents) {
                    config_result = parse_json(contents)
                    config_result ?
                        | Ok(config) { return Ok(config) }
                        | Err(e) { return Err(e) }
                }
                | Err(e) { return Err(e) }
        }
        | Err(e) { return Err(e) }
}

// Parse radius from string (line 199)
parse_radius = (s: string) Result<f64, string> {
    s.to_f64() ?
        | Some(val) { return Ok(val) }
        | None { return Err("Invalid radius: ${s}") }
}

// Chain multiple operations with .raise()
process_radius = (input: string) Result<f64, string> {
    radius = parse_radius(input).raise()   // Early return on error
    // Validate radius is positive
    radius > 0.0 ?
        | true { return Ok(radius * 2.0) }  // Return doubled radius
        | false { return Err("Radius must be positive") }
}

main = () void {
    io.println("=== ERROR PROPAGATION WITH .raise() TEST ===")
    io.println("")
    
    // Test successful path
    io.println("1. Successful config load:")
    result1 = load_config("config.json")
    result1 ?
        | Ok(cfg) { 
            io.println("   ✓ Loaded config: ${cfg.name} = ${cfg.value}") 
        }
        | Err(e) { 
            io.println("   ✗ Error: ${e}") 
        }
    
    // Test file not found error propagation
    io.println("")
    io.println("2. File not found error propagation:")
    result2 = load_config("missing.json")
    result2 ?
        | Ok(cfg) { 
            io.println("   ✓ Loaded config: ${cfg.name}") 
        }
        | Err(e) { 
            io.println("   ✓ Error correctly propagated: ${e}") 
        }
    
    // Test corrupted file error propagation
    io.println("")
    io.println("3. Corrupted file error propagation:")
    result3 = load_config("corrupt.json")
    result3 ?
        | Ok(cfg) { 
            io.println("   ✓ Loaded config: ${cfg.name}") 
        }
        | Err(e) { 
            io.println("   ✓ Error correctly propagated: ${e}") 
        }
    
    // Test radius parsing
    io.println("")
    io.println("4. Radius parsing with .raise():")
    
    test_radius1 = process_radius("5.5")
    test_radius1 ?
        | Ok(r) { io.println("   ✓ Valid radius processed: ${r}") }
        | Err(e) { io.println("   ✗ Error: ${e}") }
    
    test_radius2 = process_radius("invalid")
    test_radius2 ?
        | Ok(r) { io.println("   ✓ Radius: ${r}") }
        | Err(e) { io.println("   ✓ Error correctly propagated: ${e}") }
    
    io.println("")
    io.println("✓ .raise() error propagation working as per LANGUAGE_SPEC.zen")
    io.println("✓ Early returns on Err, continues on Ok")
}