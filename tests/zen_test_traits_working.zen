// Test for .implements() and .requires() from LANGUAGE_SPEC.zen
{ io } = @std
{ math } = @std

// Trait definition - methods that types can implement
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Simple struct
Circle: {
    radius: f64,
}

// Implement trait for type using .implements()
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

Rectangle: {
    width: f64,
    height: f64,
}

Rectangle.implements(Geometric, {
    area = (self) f64 {
        return self.width * self.height
    },
    perimeter = (self) f64 {
        return 2.0 * (self.width + self.height)
    },
})

// Enum type that requires all variants implement Geometric
Shape: Circle | Rectangle
Shape.requires(Geometric)

main = () i32 {
    io.println("=== Traits Test ===")
    
    // Create a circle
    circle = Circle { radius: 5.0 }
    io.println("Circle area: ${circle.area()}")
    io.println("Circle perimeter: ${circle.perimeter()}")
    
    // Create a rectangle
    rect = Rectangle { width: 10.0, height: 5.0 }
    io.println("Rectangle area: ${rect.area()}")
    io.println("Rectangle perimeter: ${rect.perimeter()}")
    
    io.println("=== Test Complete ===")
    return 0
}