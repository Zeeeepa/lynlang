// Test .raise() with nested generics - fixed syntax
{ io } = @std
{ Option, Result } = @std

// Helper function that returns Result<Option<i32>, string>
get_nested = () Result<Option<i32>, string> {
    Result.Ok(Option.Some(123))
}

// Helper that returns Result<Result<i32, string>, string>
get_double_result = () Result<Result<i32, string>, string> {
    Result.Ok(Result.Ok(789))
}

// Test raise with nested generics
test_nested_raise = () Result<i32, string> {
    // Get Result<Option<i32>, string> and extract Option
    opt = get_nested().raise()
    
    // Now extract from Option using braces
    opt ? 
        | Option.Some(val) { Result.Ok(val) }
        | Option.None { Result.Err("was None") }
}

// Test raise with double Result
test_double_raise = () Result<i32, string> {
    // Get Result<Result<i32, string>, string> and extract inner Result
    inner = get_double_result().raise()
    
    // Extract from inner Result  
    val = inner.raise()
    Result.Ok(val)
}

// Test with immediate pattern matching after raise
test_raise_and_match = () Result<string, string> {
    nested = get_nested().raise()
    
    msg = nested ? 
        | Option.Some(v) { "Got ${v}" }
        | Option.None { "Got None" }
    
    Result.Ok(msg)
}

main = () void {
    io.println("=== Testing .raise() with Nested Generics ===")
    
    io.println("\n1. Test nested raise (Result<Option<i32>>):")
    r1 = test_nested_raise()
    r1 ? 
        | Result.Ok(v) { io.println("  Success: ${v}") }
        | Result.Err(e) { io.println("  Error: ${e}") }
    
    io.println("\n2. Test double raise (Result<Result<i32>>):")
    r2 = test_double_raise()
    r2 ? 
        | Result.Ok(v) { io.println("  Success: ${v}") }
        | Result.Err(e) { io.println("  Error: ${e}") }
    
    io.println("\n3. Test raise and pattern match:")
    r3 = test_raise_and_match()
    r3 ? 
        | Result.Ok(msg) { io.println("  ${msg}") }
        | Result.Err(e) { io.println("  Error: ${e}") }
    
    io.println("\n=== All raise tests complete ===")
}