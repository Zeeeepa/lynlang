// Test nested raise() expressions
{ io, Result } = @std

// Function that might fail
risky_op = (x: i32) {
    x > 0 ? | true => Result.Ok(x * 2)
            | false => Result.Err("negative input")
}

// Chain multiple operations that might fail
chain_ops = (x: i32) {
    // First operation
    step1 = risky_op(x).raise()
    
    // Second operation on result
    step2 = risky_op(step1).raise()
    
    // Third operation
    risky_op(step2)
}

main = () void {
    io.println("Testing nested raise() expressions")
    
    // Test successful chain
    result1 = chain_ops(5)
    result1 ? | Result.Ok(v) => io.println("Chain(5) succeeded: ${v}")
              | Result.Err(e) => io.println("Chain(5) failed: ${e}")
    
    // Direct nested raise - this should work
    val = risky_op(10).raise()
    io.println("Direct raise(10): ${val}")
    
    // Multiple raises in sequence
    r1 = risky_op(3)
    v1 = r1.raise()
    io.println("Sequential raise 1: ${v1}")
    
    r2 = risky_op(v1)
    v2 = r2.raise()
    io.println("Sequential raise 2: ${v2}")
}