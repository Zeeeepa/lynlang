// Test raise() with closures returning Result<T,E>
{ io, Result } = @std

main = () i32 {
    // Test 1: Closure returning Result<i32, string>
    get_value = () Result<i32, string> {
        return Result.Ok(42)
    }
    
    val1 = get_value().raise()
    val1 == 42 ? {
        io.println("✓ Test 1: Basic closure with Result<i32, string>")
    }
    val1 != 42 ? {
        io.println("✗ Test 1 failed: Expected 42, got ${val1}")
        return 1
    }
    
    // Test 2: Closure with parameters returning Result<f64, string>
    divide = (a: f64, b: f64) Result<f64, string> {
        b == 0.0 ? {
            return Result.Err("Division by zero")
        }
        return Result.Ok(a / b)
    }
    
    val2 = divide(10.0, 2.0).raise()
    val2 == 5.0 ? {
        io.println("✓ Test 2: Closure with params returning Result<f64, string>")
    }
    val2 != 5.0 ? {
        io.println("✗ Test 2 failed: Expected 5.0, got ${val2}")
        return 1
    }
    
    // Test 3: Inline closure with raise
    inline_fn = () Result<i32, string> { return Result.Ok(100) }
    val3 = inline_fn().raise()
    val3 == 100 ? {
        io.println("✓ Test 3: Inline closure with raise")
    }
    val3 != 100 ? {
        io.println("✗ Test 3 failed: Expected 100, got ${val3}")
        return 1
    }
    
    // Test 4: Closure with computation
    compute = () Result<i32, string> {
        return Result.Ok(50 * 2)
    }
    
    val4 = compute().raise()
    val4 == 100 ? {
        io.println("✓ Test 4: Closure with computation")
    }
    val4 != 100 ? {
        io.println("✗ Test 4 failed: Expected 100, got ${val4}")
        return 1
    }
    
    // Test 5: Nested closures with raise
    outer = () Result<i32, string> {
        inner = () Result<i32, string> {
            return Result.Ok(25)
        }
        val = inner().raise()
        return Result.Ok(val * 2)
    }
    
    val5 = outer().raise()
    val5 == 50 ? {
        io.println("✓ Test 5: Nested closures with raise")
    }
    val5 != 50 ? {
        io.println("✗ Test 5 failed: Expected 50, got ${val5}")
        return 1
    }
    
    io.println("\n✓ All closure + raise() tests passed!")
    return 0
}