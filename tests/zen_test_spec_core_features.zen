// Test core features from LANGUAGE_SPEC.zen

// No null - only Option<T>
Option<T>: Some(T) | None

// Result type
Result<T, E>: Ok(T) | Err(E)

// Simple struct
Point: {
    x: f64,
    y: f64,
}

// Enum type
Shape: Circle | Rectangle

// Test basic patterns
test_option = () void {
    maybe_value: Option<i32> = Option.Some(42)
    
    maybe_value ?
        | Some(v) { io.println("Got value: ${v}") }
        | None { io.println("No value") }
}

// Test mutable assignment
test_mutable = () void {
    counter ::= 0  // Mutable with ::=
    value = 10     // Immutable with =
    
    counter = counter + 1
    // value = 20  // This would error - immutable
}

// Test loop
test_loop = () void {
    // Range loop
    (0..5).loop((i) {
        io.println("Index: ${i}")
    })
    
    // Infinite loop with break
    count ::= 0
    loop(() {
        count = count + 1
        count > 3 ?
            | true { break }
            | false { continue }
    })
}

// Test defer
test_defer = () void {
    @this.defer(io.println("Third"))
    @this.defer(io.println("Second"))
    io.println("First")
}

main = () void {
    test_option()
    test_mutable()
    test_loop()
    test_defer()
}