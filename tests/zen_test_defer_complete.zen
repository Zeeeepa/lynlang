// Test @this.defer() functionality from LANGUAGE_SPEC.zen
// Both traditional defer and @this.defer() should work

{ io } = @std

test_defer = () i32 {
    io.println("Starting test_defer")
    
    // @this.defer() executes at function exit
    @this.defer(io.println("Deferred: Third (last deferred)"))
    @this.defer(io.println("Deferred: Second"))
    @this.defer(io.println("Deferred: First (first deferred)"))
    
    io.println("Normal execution")
    
    return 42
}

main = () void {
    result = test_defer()
    io.println("Result: ${result}")
}