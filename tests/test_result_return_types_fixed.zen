// Test Result<T,E> return types with direct returns
{ io, Result } = @std

// Function that returns Result<i32, string>
get_value = (should_succeed: bool) Result<i32, string> {
    should_succeed ?
        | true { return Result.Ok(42) }
        | false { return Result.Err("Failed to get value") }
}

// Function that chains Result operations
process_value = () Result<i32, string> {
    // Get the initial value
    result = get_value(true)
    
    // Pattern match on the result
    result ?
        | .Ok(val) { 
            new_val = val * 2
            return Result.Ok(new_val) 
        }
        | .Err(msg) { 
            return Result.Err(msg) 
        }
}

// Function with early returns
validate_number = (n: i32) Result<i32, string> {
    n < 0 ?
        | true { return Result.Err("Number must be non-negative") }
        | false { }
    
    n > 100 ?
        | true { return Result.Err("Number must be <= 100") }
        | false { }
    
    return Result.Ok(n)
}

main = () i32 {
    io.println("Testing Result<T,E> return types...")
    
    // Test get_value
    r1 = get_value(true)
    r1 ?
        | .Ok(val) { io.println("✓ get_value(true) returned Ok(${val})") }
        | .Err(msg) { io.println("✗ get_value(true) returned Err: ${msg}") }
    
    r2 = get_value(false)
    r2 ?
        | .Ok(val) { io.println("✗ get_value(false) returned Ok(${val})") }
        | .Err(msg) { io.println("✓ get_value(false) returned Err: ${msg}") }
    
    // Test process_value
    r3 = process_value()
    r3 ?
        | .Ok(val) { io.println("✓ process_value() returned Ok(${val})") }
        | .Err(msg) { io.println("✗ process_value() returned Err: ${msg}") }
    
    // Test validate_number
    r4 = validate_number(50)
    r4 ?
        | .Ok(val) { io.println("✓ validate_number(50) returned Ok(${val})") }
        | .Err(msg) { io.println("✗ validate_number(50) returned Err: ${msg}") }
    
    r5 = validate_number(-5)
    r5 ?
        | .Ok(val) { io.println("✗ validate_number(-5) returned Ok(${val})") }
        | .Err(msg) { io.println("✓ validate_number(-5) returned Err: ${msg}") }
    
    r6 = validate_number(150)
    r6 ?
        | .Ok(val) { io.println("✗ validate_number(150) returned Ok(${val})") }
        | .Err(msg) { io.println("✓ validate_number(150) returned Err: ${msg}") }
    
    io.println("All tests completed!")
    return 0
}