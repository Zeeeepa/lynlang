// Test current feature support from LANGUAGE_SPEC.zen
{ io } = @std

// Test Option type
Option<T>: Some(T) | None

// Test Result type  
Result<T, E>: Ok(T) | Err(E)

// Test simple struct
Point: {
    x:: f64,
    y:: f64
}

// Test enum
Shape: Circle | Rectangle

main = () void {
    io.println("=== Testing LANGUAGE_SPEC.zen Features ===")
    
    // Test variable declarations
    x = 10           // immutable
    y ::= 20         // mutable
    z: i32 = 30      // immutable with type
    w :: i32 = 40    // mutable with type
    
    io.println("Variables: x=${x}, y=${y}, z=${z}, w=${w}")
    
    // Test mutable update
    y = 25
    w = 45
    io.println("After update: y=${y}, w=${w}")
    
    // Test struct creation
    point = Point { x: 1.0, y: 2.0 }
    io.println("Point: x=${point.x}, y=${point.y}")
    
    // Test Option
    maybe = Option.Some(42)
    maybe ?
        | Some(v) { io.println("Got value: ${v}") }
        | None { io.println("Got None") }
    
    // Test Result
    result = Result.Ok(100)
    result ?
        | Ok(v) { io.println("Success: ${v}") }
        | Err(e) { io.println("Error: ${e}") }
    
    // Test boolean pattern matching
    flag = true
    flag ?
        | true { io.println("Flag is true") }
        | false { io.println("Flag is false") }
    
    // Test range loop
    io.println("Range loop:")
    (0..5).loop((i) {
        io.println("  i = ${i}")
    })
    
    io.println("=== Test Complete ===")
}