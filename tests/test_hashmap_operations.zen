// Test HashMap<K,V> operations
{ io } = @std

main = () i32 {
    io.println("Testing HashMap operations...")
    
    // Create a HashMap
    map ::= HashMap<string, i32>.new()
    
    // Test insert operation
    map.insert("one", 1)
    map.insert("two", 2)
    map.insert("three", 3)
    io.println("Inserted 3 key-value pairs")
    
    // Test get operation
    value1 = map.get("one")
    value1 ?
        | Option.Some(v) { io.println("Value for 'one': ${v}") }
        | Option.None { io.println("Key 'one' not found") }
    
    value2 = map.get("two")
    value2 ?
        | Option.Some(v) { io.println("Value for 'two': ${v}") }
        | Option.None { io.println("Key 'two' not found") }
    
    // Test non-existent key
    value4 = map.get("four")
    value4 ?
        | Option.Some(v) { io.println("Value for 'four': ${v}") }
        | Option.None { io.println("Key 'four' not found (expected)") }
    
    // Test contains
    has_one = map.contains("one")
    has_four = map.contains("four")
    io.println("Contains 'one': ${has_one}")
    io.println("Contains 'four': ${has_four}")
    
    // Test remove
    removed = map.remove("two")
    removed ?
        | Option.Some(v) { io.println("Removed 'two' with value: ${v}") }
        | Option.None { io.println("Could not remove 'two'") }
    
    // Verify removal
    value2_after = map.get("two")
    value2_after ?
        | Option.Some(v) { io.println("'two' still exists: ${v}") }
        | Option.None { io.println("'two' successfully removed") }
    
    // Test size
    size = map.size()
    io.println("Map size after removal: ${size}")
    
    return 0
}