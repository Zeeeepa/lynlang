// Test trait implementation per LANGUAGE_SPEC.zen

{ io, math } = @std

// Simple struct
Point: {
    x: f64,
    y: f64,
}

// Trait definition
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Circle struct
Circle: {
    center: Point,
    radius: f64,
}

// Implement trait for Circle
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

main = () void {
    io.println("=== Trait Test ===")
    
    // Create a circle
    circle = Circle { 
        center: Point { x: 0.0, y: 0.0 }, 
        radius: 5.0 
    }
    
    // Call trait methods
    area_value = circle.area()
    perimeter_value = circle.perimeter()
    
    io.println("Circle radius: 5.0")
    io.println("Circle area: ${area_value}")
    io.println("Circle perimeter: ${perimeter_value}")
    
    io.println("=== Test Complete ===")
}