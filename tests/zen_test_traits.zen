// Trait tests from LANGUAGE_SPEC.zen lines 123-162
// Tests trait definitions, implementations, and requirements

{ io, math } = @std
// { implements, requires } = @std.meta  // Already handled by Type.implements() syntax

// Trait definition (lines 123-127)
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Struct definitions
Circle: {
    center: Point,
    radius: f64,
}

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

Point: {
    x: f64,
    y: f64
}

// Implement trait for Circle (lines 136-143)
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

// Implement trait for Rectangle (lines 151-162)
Rectangle.implements(Geometric, {
    area = (self) f64 {
        x1 = self.top_left.x
        y1 = self.top_left.y
        x2 = self.bottom_right.x
        y2 = self.bottom_right.y
        width = x2 - x1
        height = y2 - y1
        result = width * height
        io.println("DEBUG Rect: x1=${x1}, y1=${y1}, x2=${x2}, y2=${y2}")
        io.println("DEBUG Rect: width=${width}, height=${height}, area=${result}")
        return result
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// Enum that requires trait (lines 165-168)
Shape: Circle | Rectangle
Shape.requires(Geometric)

// Generic function with trait constraint (lines 184-187)
// TODO: Implement generic functions first
// print_area<T: Geometric>(shape: T) void {
//     io.println("Area: ${shape.area()}")
// }

// Generic container with multiple constraints (lines 189-195)
// TODO: Implement Vec type first
// Container<T: Geometric + Serializable>: {
//     items: Vec<T>,
//     
//     add: (item: T) void,
//     total_area: () f64,
// }

main = () void {
    // Create shapes
    circle = Circle {
        center: Point { x: 0.0, y: 0.0 },
        radius: 10.0
    }
    
    rect = Rectangle {
        top_left: Point { x: 0.0, y: 0.0 },
        bottom_right: Point { x: 20.0, y: 10.0 }
    }
    
    // Call trait methods
    circle_area = circle.area()
    circle_perimeter = circle.perimeter()
    
    rect_area = rect.area()
    rect_perimeter = rect.perimeter()
    
    // Generic function with trait constraint
    // TODO: Uncomment when generics are implemented
    // print_area(circle)
    // print_area(rect)
    
    // TODO: Fix enum variant assignment
    // shape: Shape = Circle {
    //     center: Point { x: 5, y: 5 },
    //     radius: 3.0
    // }
    
    // Output results
    io.println("Circle area: ${circle_area}")
    io.println("Circle perimeter: ${circle_perimeter}")
    io.println("Rectangle area: ${rect_area}")
    io.println("Rectangle perimeter: ${rect_perimeter}")
}