// Trait tests from LANGUAGE_SPEC.zen lines 123-162
// Tests trait definitions, implementations, and requirements

{ io, math } = @std
{ implements, requires } = @std.meta

// Trait definition (lines 123-127)
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Struct definitions
Circle: {
    center: Point,
    radius: f64,
}

Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

Point: {
    x: f64,
    y: f64
}

// Implement trait for Circle (lines 136-143)
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

// Implement trait for Rectangle (lines 151-162)
Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// Enum that requires trait (lines 165-168)
Shape: Circle | Rectangle
Shape.requires(Geometric)

// Generic function with trait constraint (lines 184-187)
print_area<T: Geometric>(shape: T) void {
    io.println("Area: ${shape.area()}")
}

// Generic container with multiple constraints (lines 189-195)
Container<T: Geometric + Serializable>: {
    items: Vec<T>,
    
    add: (item: T) void,
    total_area: () f64,
}

main = () void {
    // Create shapes
    circle = Circle {
        center: Point { x: 0, y: 0 },
        radius: 10.0
    }
    
    rect = Rectangle {
        top_left: Point { x: 0, y: 0 },
        bottom_right: Point { x: 20, y: 10 }
    }
    
    // Call trait methods
    circle_area = circle.area()
    circle_perimeter = circle.perimeter()
    
    rect_area = rect.area()
    rect_perimeter = rect.perimeter()
    
    // Generic function with trait constraint
    print_area(circle)
    print_area(rect)
    
    // Polymorphism via enum
    shape: Shape = Circle {
        center: Point { x: 5, y: 5 },
        radius: 3.0
    }
    
    // Pattern match and use trait methods
    shape ?
        | Circle {
            a = shape.area()
            io.println("Circle area: ${a}")
        }
        | Rectangle {
            a = shape.area()
            io.println("Rectangle area: ${a}")
        }
}