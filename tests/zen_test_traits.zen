// Test for .implements() and .requires() trait system from LANGUAGE_SPEC.zen

{ io, math } = @std

// Trait definition - methods that types can implement (line 123)
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Simple struct for Circle (line 130)
Circle: {
    center: Point,
    radius: f64,
}

// Point struct (line 115)
Point: {
    x:: f64,
    y:: f64 = 0
}

// Implement trait for Circle using .implements() (line 135)
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

// Rectangle struct (line 145)
Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

// Implement trait for Rectangle (line 151)
Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// Enum type that requires all variants implement Geometric (line 165-168)
Shape:
    Circle,
    Rectangle
Shape.requires(Geometric)

// Generic function with trait constraint (line 184)
print_area<T: Geometric>(shape: T) void {
    io.println("Area: ${shape.area()}")
}

main = () void {
    io.println("=== TRAIT SYSTEM TEST (.implements() and .requires()) ===")
    io.println("")
    
    // Create a circle
    c = Circle {
        center: Point { x: 0, y: 0 },
        radius: 5.0
    }
    
    // Call trait methods on circle
    io.println("Circle:")
    io.println("  Radius: ${c.radius}")
    io.println("  Area: ${c.area()}")
    io.println("  Perimeter: ${c.perimeter()}")
    io.println("")
    
    // Create a rectangle
    r = Rectangle {
        top_left: Point { x: 0, y: 0 },
        bottom_right: Point { x: 10, y: 5 }
    }
    
    // Call trait methods on rectangle
    io.println("Rectangle:")
    io.println("  Width: ${r.bottom_right.x - r.top_left.x}")
    io.println("  Height: ${r.bottom_right.y - r.top_left.y}")
    io.println("  Area: ${r.area()}")
    io.println("  Perimeter: ${r.perimeter()}")
    io.println("")
    
    // Use generic function with trait constraint
    io.println("Using generic print_area function:")
    print_area(c)
    print_area(r)
    
    io.println("")
    io.println("✓ Traits with .implements() working")
    io.println("✓ Shape enum with .requires() enforces trait implementation")
}