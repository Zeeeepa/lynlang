// Test generic types in closures
{ io, Option, Result } = @std

main = () void {
    io.println("=== Generic Closure Test ===")
    
    // Closure with Option<i32> parameter (return i32 instead of void)
    process_option = (opt: Option<i32>) i32 {
        opt ?
            | Option.Some(v) { 
                io.println("Closure got value: ${v}")
                v
            }
            | Option.None { 
                io.println("Closure got None")
                0
            }
    }
    
    opt1: Option<i32> = Option.Some(100)
    process_option(opt1)
    
    opt2: Option<i32> = Option.None
    process_option(opt2)
    
    // Closure returning Option<i32>
    make_option = (val: i32) Option<i32> {
        val > 0 ?
            | true { Option.Some(val) }
            | false { Option.None }
    }
    
    result1 = make_option(50)
    result1 ?
        | Option.Some(v) { io.println("make_option(50) = Some(${v})") }
        | Option.None { io.println("make_option(50) = None") }
    
    result2 = make_option(-10)
    result2 ?
        | Option.Some(v) { io.println("make_option(-10) = Some(${v})") }
        | Option.None { io.println("make_option(-10) = None") }
    
    io.println("Test complete!")
}