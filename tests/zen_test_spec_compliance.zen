// Comprehensive test for LANGUAGE_SPEC.zen compliance
// Tests all core language features that are currently implemented

// ============================================================================
// 1. IMPORTS - Only @std and @this are special
// ============================================================================
{ io } = @std

// ============================================================================
// 2. NO NULL - Only Option types
// ============================================================================
Option<T>: Some(T) | None

// ============================================================================
// 3. RESULT TYPE for error handling
// ============================================================================
Result<T, E>: Ok(T) | Err(E)

// ============================================================================
// 4. STRUCTS - Simple record types
// ============================================================================
Point: {
    x: f64,
    y: f64,
}

// ============================================================================
// 5. ENUMS - Sum types with variant constructors
// ============================================================================
Shape: .Circle | Rectangle

// Enum with payloads
GameEntity: .Player | Enemy | Powerup

// ============================================================================
// 6. FUNCTIONS - Simple syntax
// ============================================================================
add = (a: i32, b: i32) i32 {
    return a + b
}

// Function returning void
print_point = (p: Point) void {
    io.println("Point coordinates")
}

// ============================================================================
// 7. PATTERN MATCHING with ? operator (no match/switch keywords!)
// ============================================================================
test_pattern_matching = () void {
    io.println("=== Pattern Matching Tests ===")
    
    // Boolean pattern matching
    is_ready = true
    is_ready ? {
        io.println("✓ Boolean pattern: true branch")
    }
    
    // Full boolean pattern
    has_data = false
    has_data ?
        | true { io.println("  Has data") }
        | false { io.println("✓ Boolean pattern: false branch") }
    
    // Option pattern matching
    maybe: Option<i32> = Some(42)
    maybe ?
        | Some(val) { io.println("✓ Option pattern: Some branch") }
        | None { io.println("  Option pattern: None branch") }
    
    // Test with None
    nothing: Option<i32> = None
    nothing ?
        | Some(val) { io.println("  Got value") }
        | None { io.println("✓ Option pattern: None matched") }
    
    // Result pattern matching
    success: Result<i32, String> = Ok(100)
    success ?
        | Ok(val) { io.println("✓ Result pattern: Ok branch") }
        | Err(msg) { io.println("  Result pattern: Error branch") }
    
    // Enum pattern matching
    entity = GameEntity.Player
    entity ?
        | Player { io.println("✓ Enum pattern: Player matched") }
        | Enemy { io.println("  Enemy") }
        | Powerup { io.println("  Powerup") }
}

// ============================================================================
// 8. VARIABLES - Immutable by default, mutable with ::=
// ============================================================================
test_variables = () void {
    io.println("=== Variable Tests ===")
    
    // Immutable binding (default)
    x = 42
    io.println("✓ Immutable variable: x = 42")
    
    // Mutable binding with ::=
    y ::= 100
    io.println("✓ Mutable variable: y ::= 100")
    
    y = y + 1
    io.println("✓ Mutable reassignment: y = 101")
}

// ============================================================================
// 9. LOOPS - loop() for infinite, range.loop() for iteration
// ============================================================================
test_loops = () void {
    io.println("=== Loop Tests ===")
    
    // Range loop
    io.println("✓ Range loop (0..3):")
    (0..3).loop((i) {
        io.println("  Count")
    })
    
    // Inclusive range
    io.println("✓ Inclusive range (1..=2):")
    (1..=2).loop((i) {
        io.println("  Count")
    })
    
    // Infinite loop with break
    counter ::= 0
    io.println("✓ Infinite loop with break:")
    loop(() {
        io.println("  Loop iteration")
        counter = counter + 1
        counter > 2 ?
            | true { break }
            | false { }
    })
}

// ============================================================================
// 10. STRUCTS with fields
// ============================================================================
test_structs = () void {
    io.println("=== Struct Tests ===")
    
    // Create struct instance
    p = Point { x: 10.5, y: 20.5 }
    io.println("✓ Struct creation: Point {x: 10.5, y: 20.5}")
    io.println("✓ Field access: p.x and p.y")
}

// ============================================================================
// MAIN - Entry point
// ============================================================================
main = () void {
    io.println("====================================")
    io.println("LANGUAGE_SPEC.zen Compliance Test")
    io.println("====================================")
    
    test_pattern_matching()
    test_variables()
    test_loops()
    test_structs()
    
    io.println("====================================")
    io.println("✓ Core features working!")
    io.println("====================================")
}