// Test file to verify alignment with LANGUAGE_SPEC.zen

// Test imports - only @std and @this are special
{ io, maths , get_default_allocator} = @std

main = () void {
    alloc = get_default_allocator()
    // Test variable declarations - all forms from spec
    x: i32           // forward declaration (immutable)
    x = 10          // initialization
    
    y = 10          // immutable assignment
    z: i32 = 20     // immutable with type
    
    w:: i32         // mutable forward declaration
    w = 20          // initialization
    w = 25          // reassignment allowed
    
    v ::= 30        // mutable assignment
    u:: i32 = 40    // mutable with type
    u = 45          // reassignment
    
    // Test pattern matching with ?
    is_ready = true
    is_ready ? {
        io.println("Starting!")
    }
    
    // Test if-else with pattern match
    has_data = false
    has_data ?
        | true { io.println("Processing...") }
        | false { io.println("Waiting...") }
    
    // Test range loop
    (0..5).loop((i) {
        io.println("Count: ${i}")
    })
    
    // Test Option type
    maybe: Option<i32> = Some(42)
    maybe ?
        | Some(val) { io.println("Value: ${val}") }
        | None { io.println("No value") }
}