// Test with function returning nested Result
{ io, Result , get_default_allocator} = @std

// Function that returns nested Result without explicit annotation
get_nested = () {
    Result.Ok(Result.Ok(999))
}

main = () void {
    alloc = get_default_allocator()
    io.println("=== Function Return Test ===")
    
    nested = get_nested()
    nested ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(val) { io.println("Value: ${val}") }
                | Result.Err(e) { io.println("Error") }
        }
        | Result.Err(e) { io.println("Error") }
}