// Comprehensive test for LANGUAGE_SPEC.zen features
// Testing all major features from the spec

{ io, math } = @std

// Option type as defined in spec
Option<T>: Some(T) | None

// Result type as defined in spec
Result<T, E>: Ok(T) | Err(E)

// Simple struct as per spec
Point: {
    x:: f64,  // mutable field
    y:: f64 = 0  // with default value
}

// Trait definition
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Circle struct
Circle: {
    center: Point,
    radius: f64,
}

// Implement trait for Circle
Circle.implements(Geometric, {
    area = (self) f64 {
        return math.pi * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * math.pi * self.radius
    },
})

// Rectangle struct
Rectangle: {
    top_left: Point,
    bottom_right: Point,
}

Rectangle.implements(Geometric, {
    area = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return width * height
    },
    perimeter = (self) f64 {
        width = self.bottom_right.x - self.top_left.x
        height = self.bottom_right.y - self.top_left.y
        return 2.0 * (width + height)
    },
})

// Enum type (sum type)
// Shape: Circle | Rectangle  // TODO: Fix enum with struct variants

// Test basic patterns and control flow
test_patterns = () void {
    io.println("=== Testing Pattern Matching ===")
    
    // Boolean pattern matching - no ternary
    is_ready = true
    is_ready ? { 
        io.println("✓ Boolean pattern: Ready!")
    }
    
    // For if-else, use full pattern match
    has_data = false
    has_data ?
        | true { io.println("Has data") }
        | false { io.println("✓ Boolean if-else: No data") }
    
    // Option handling - no null!
    maybe: Option<i32> = Some(42)
    maybe ?
        | Some(v) { io.println("✓ Option Some: Value = 42") }  // TODO: Fix value extraction
        | None { io.println("No value") }
    
    none_val: Option<i32> = None
    none_val ?
        | Some(v) { io.println("Has value") }
        | None { io.println("✓ Option None: No value") }
}

// Test variable declarations (all 6 forms from spec)
test_variables = () void {
    io.println("=== Testing Variable Declarations ===")
    
    // Forward declaration
    x: i32
    x = 10
    io.println("✓ Forward declaration: x = 10")
    
    // Immutable assignment
    y = 20
    io.println("✓ Immutable inferred: y = 20")
    
    // Typed immutable
    z: i32 = 30
    io.println("✓ Typed immutable: z = 30")
    
    // Mutable forward declaration
    w:: i32
    w = 40
    io.println("✓ Mutable forward: w = 40")
    
    // Mutable assignment
    v ::= 50
    io.println("✓ Mutable inferred: v = 50")
    v = 60  // Can reassign
    io.println("✓ Mutable reassign: v = 60")
    
    // Typed mutable
    u:: i32 = 70
    io.println("✓ Typed mutable: u = 70")
}

// Test loops and ranges
test_loops = () void {
    io.println("=== Testing Loops and Ranges ===")
    
    // Range iteration
    io.println("Range (0..3):")
    (0..3).loop((i) {
        io.println("  Count: ${i}")
    })
    
    // Infinite loop with break
    counter ::= 0
    io.println("Infinite loop with break:")
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { 
                io.println("  Breaking at counter = ${counter}")
                break 
            }
            | false { io.println("  Counter: ${counter}") }
    })
}

// Test structs and traits
test_structs_and_traits = () void {
    io.println("=== Testing Structs and Traits ===")
    
    circle = Circle {
        center: Point { x: 0.0, y: 0.0 },
        radius: 5.0
    }
    
    io.println("Circle radius: ${circle.radius}")
    io.println("Circle area: ${circle.area()}")
    io.println("Circle perimeter: ${circle.perimeter()}")
    
    rect = Rectangle {
        top_left: Point { x: 0.0, y: 0.0 },
        bottom_right: Point { x: 10.0, y: 5.0 }
    }
    
    io.println("Rectangle area: ${rect.area()}")
    io.println("Rectangle perimeter: ${rect.perimeter()}")
}

// Test defer for RAII
test_defer = () void {
    io.println("=== Testing @this.defer ===")
    
    io.println("Before defer block")
    // TODO: Fix block scope with defer
    // @this.defer(io.println("✓ Deferred: Cleaning up"))
    io.println("After block")
}

// Main function
main = () void {
    io.println("==================================")
    io.println("LANGUAGE_SPEC.zen Feature Testing")
    io.println("==================================")
    
    test_variables()
    io.println("")
    
    test_patterns()
    io.println("")
    
    test_loops()
    io.println("")
    
    test_structs_and_traits()
    io.println("")
    
    test_defer()
    io.println("")
    
    io.println("==================================")
    io.println("Testing Complete")
    io.println("==================================")
}