// Comprehensive tests for Zen stdlib core module

core = @std
test = @std
io = @std
assert = @std

// Test Option type
test_option = () void   {
    suite := test.suite_new("Option Tests")
    
    test.suite_add_test(&suite, "Option.Some construction", () void {
        opt := Option<i32>.Some(42)
        opt ?
            | Some(value) { assert.equal(value, 42) }
            | None { assert.fail("Expected Some, got None") }
        }
    })
    
    test.suite_add_test(&suite, "Option.None construction", () void {
        opt := Option<i32>.None
        opt ?
            | Some(_) { assert.fail("Expected None, got Some") }
            | None { assert.ok(true) }
        }
    })
    
    test.suite_add_test(&suite, "Option.map", () void {
        opt := Option<i32>.Some(10)
        mapped := opt.map((x) i32 { x * 2 })
        mapped ?
            | Some(value) { assert.equal(value, 20) }
            | None { assert.fail("map failed") }
        }
    })
    
    test.suite_add_test(&suite, "Option.unwrap_or", () void {
        some_opt := Option<i32>.Some(42)
        none_opt := Option<i32>.None
        
        assert.equal(some_opt.unwrap_or(0), 42)
        assert.equal(none_opt.unwrap_or(0), 0)
    })
    
    test.suite_add_test(&suite, "Option.is_some and is_none", () void {
        some_opt := Option<i32>.Some(42)
        none_opt := Option<i32>.None
        
        assert.ok(some_opt.is_some())
        assert.ok(!some_opt.is_none())
        assert.ok(!none_opt.is_some())
        assert.ok(none_opt.is_none())
    })
    
    test.run_suite(&suite)
}

// Test Result type
test_result = () void   {
    suite := test.suite_new("Result Tests")
    
    test.suite_add_test(&suite, "Result.Ok construction", () void {
        res := Result<i32, string>.Ok(42)
        res ?
            | Ok(value) { assert.equal(value, 42) }
            | Err(_) { assert.fail("Expected Ok, got Err") }
        }
    })
    
    test.suite_add_test(&suite, "Result.Err construction", () void {
        res := Result<i32, string>.Err("error message")
        res ?
            | Ok(_) { assert.fail("Expected Err, got Ok") }
            | Err(msg) { assert.equal(msg, "error message") }
        }
    })
    
    test.suite_add_test(&suite, "Result.map", () void {
        ok_res := Result<i32, string>.Ok(10)
        mapped := ok_res.map((x) i32 { x * 2 })
        mapped ?
            | Ok(value) { assert.equal(value, 20) }
            | Err(_) { assert.fail("map failed") }
        }
    })
    
    test.suite_add_test(&suite, "Result.map_err", () void {
        err_res := Result<i32, string>.Err("error")
        mapped := err_res.map_err((s) string { s + "!" })
        mapped ?
            | Ok(_) { assert.fail("Expected Err") }
            | Err(msg) { assert.equal(msg, "error!") }
        }
    })
    
    test.suite_add_test(&suite, "Result.unwrap_or", () void {
        ok_res := Result<i32, string>.Ok(42)
        err_res := Result<i32, string>.Err("error")
        
        assert.equal(ok_res.unwrap_or(0), 42)
        assert.equal(err_res.unwrap_or(0), 0)
    })
    
    test.suite_add_test(&suite, "Result.is_ok and is_err", () void {
        ok_res := Result<i32, string>.Ok(42)
        err_res := Result<i32, string>.Err("error")
        
        assert.ok(ok_res.is_ok())
        assert.ok(!ok_res.is_err())
        assert.ok(!err_res.is_ok())
        assert.ok(err_res.is_err())
    })
    
    test.run_suite(&suite)
}

// Test numeric operations
test_numeric = () void   {
    suite := test.suite_new("Numeric Tests")
    
    test.suite_add_test(&suite, "Integer arithmetic", () void {
        assert.equal(2 + 3, 5)
        assert.equal(10 - 4, 6)
        assert.equal(3 * 4, 12)
        assert.equal(15 / 3, 5)
        assert.equal(17 % 5, 2)
    })
    
    test.suite_add_test(&suite, "Float arithmetic", () void {
        assert.approx_equal(2.5 + 3.5, 6.0, 0.001)
        assert.approx_equal(10.0 - 4.5, 5.5, 0.001)
        assert.approx_equal(3.0 * 4.0, 12.0, 0.001)
        assert.approx_equal(15.0 / 3.0, 5.0, 0.001)
    })
    
    test.suite_add_test(&suite, "Bitwise operations", () void {
        assert.equal(0b1010 & 0b1100, 0b1000)
        assert.equal(0b1010 | 0b1100, 0b1110)
        assert.equal(0b1010 ^ 0b1100, 0b0110)
        assert.equal(!0b0000, -1)
        assert.equal(0b0010 << 2, 0b1000)
        assert.equal(0b1000 >> 2, 0b0010)
    })
    
    test.suite_add_test(&suite, "Numeric conversions", () void {
        i := 42i32
        l := i as i64
        f := i as f32
        d := i as f64
        
        assert.equal(l, 42i64)
        assert.approx_equal(f, 42.0f32, 0.001)
        assert.approx_equal(d, 42.0f64, 0.001)
    })
    
    test.run_suite(&suite)
}

// Test type utilities
test_type_utilities = () void   {
    suite := test.suite_new("Type Utility Tests")
    
    test.suite_add_test(&suite, "sizeof", () void {
        assert.equal(@sizeof(i8), 1)
        assert.equal(@sizeof(i16), 2)
        assert.equal(@sizeof(i32), 4)
        assert.equal(@sizeof(i64), 8)
        assert.equal(@sizeof(f32), 4)
        assert.equal(@sizeof(f64), 8)
        assert.equal(@sizeof(bool), 1)
    })
    
    test.suite_add_test(&suite, "alignof", () void {
        assert.ok(@alignof(i32) >= 4)
        assert.ok(@alignof(i64) >= 8)
        assert.ok(@alignof(f64) >= 8)
    })
    
    test.suite_add_test(&suite, "typeof", () void {
        x := 42
        y := 3.14
        z := "hello"
        
        assert.ok(@typeof(x) == i32)
        assert.ok(@typeof(y) == f64)
        assert.ok(@typeof(z) == string)
    })
    
    test.run_suite(&suite)
}

// Test panic recovery
test_panic_recovery = () void   {
    suite := test.suite_new("Panic Recovery Tests")
    
    test.suite_add_panic_test(&suite, "Panic on unwrap None", () void {
        opt := Option<i32>.None
        _ := opt.unwrap()  // Should panic
    })
    
    test.suite_add_panic_test(&suite, "Panic on unwrap Err", () void {
        res := Result<i32, string>.Err("error")
        _ := res.unwrap()  // Should panic
    })
    
    test.suite_add_panic_test(&suite, "Panic on assert failure", () void {
        assert.equal(1, 2)  // Should panic
    })
    
    test.run_suite(&suite)
}

// Main test runner
main = () i32   {
    io.println("=== Running Core Module Tests ===\n")
    
    test_option()
    test_result()
    test_numeric()
    test_type_utilities()
    test_panic_recovery()
    
    io.println("\n=== All Core Tests Completed ===")
    return 0
}