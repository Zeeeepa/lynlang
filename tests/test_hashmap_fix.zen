// Test HashMap with proper key checking
{ io, HashMap } = @std

// Simple hash function for strings
string_hash = (s: string) i64 {
    hash ::= 5381 as i64
    i ::= 0 as i64
    loop {
        i >= s.len() ? { break }
        char_val ::= s.char_at(i as i32)
        temp ::= hash * 33
        char_i64 ::= char_val as i64
        hash = temp + char_i64
        i = i + 1
    }
    return hash
}

// Equality function for strings  
string_eq = (a: string, b: string) i64 {
    a == b ? { return 1 as i64 }
    return 0 as i64
}

main = () i32 {
    io.println("Testing HashMap with proper key checking...")
    
    // Create HashMap<string, i32>
    map ::= HashMap<string, i32>.new()
    
    // Insert multiple values
    map.insert("Alice", 25, string_hash, string_eq)
    map.insert("Bob", 30, string_hash, string_eq) 
    map.insert("Charlie", 35, string_hash, string_eq)
    
    io.println("\nRetrieving values:")
    
    // Retrieve Alice
    alice ::= map.get("Alice", string_hash, string_eq)
    alice ?
        | .Some(age) { io.println("  Alice is ${age} years old") }
        | .None { io.println("  Alice not found") }
        
    // Retrieve Bob  
    bob ::= map.get("Bob", string_hash, string_eq)
    bob ?
        | .Some(age) { io.println("  Bob is ${age} years old") }
        | .None { io.println("  Bob not found") }
    
    // Retrieve Charlie
    charlie ::= map.get("Charlie", string_hash, string_eq)
    charlie ?
        | .Some(age) { io.println("  Charlie is ${age} years old") }
        | .None { io.println("  Charlie not found") }
        
    // Try a key that doesn't exist
    david ::= map.get("David", string_hash, string_eq)
    david ?
        | .Some(age) { io.println("  David is ${age} years old") }
        | .None { io.println("  David not found") }
    
    return 0
}