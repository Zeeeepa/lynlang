// Test file for enhanced LSP features: code actions and UFC improvements
{io, Result, Option, get_default_allocator, HashMap, DynVec, Array, String} = @std

main = () i32 {
    // Test 1: Missing allocator - should show code action to add get_default_allocator()
    bad_hashmap = HashMap()  // DIAGNOSTIC: requires allocator -> QUICKFIX: Add get_default_allocator()
    bad_dynvec = DynVec()    // DIAGNOSTIC: requires allocator -> QUICKFIX: Add get_default_allocator()
    bad_array = Array()      // DIAGNOSTIC: requires allocator -> QUICKFIX: Add get_default_allocator()

    // Test 2: Correct usage with allocator
    alloc = get_default_allocator()
    good_hashmap = HashMap(alloc)
    good_dynvec = DynVec(alloc)
    good_array = Array(alloc)

    // Test 3: UFC method resolution with chained calls
    test_str = "hello world"
    upper_trimmed = test_str.to_upper().trim()  // Chained UFC calls
    length = upper_trimmed.len()

    // Test 4: Complex UFC on Result types
    divide = (a: f64, b: f64) Result<f64, String> {
        b == 0.0 ? {
            return Result.Err("Division by zero")
        }
        Result.Ok(a / b)
    }

    result = divide(10.0, 2.0)
    value = result.raise()  // UFC on Result

    // Test 5: UFC on collections with allocator
    vec = DynVec(alloc)
    vec.push(10)     // UFC method on DynVec
    vec.push(20)
    vec.push(30)

    first_item = vec.get(0)  // Returns Option<T>
    first_item ?
        | Some(v) => { io.println("First: ${v}") }
        | None => { io.println("Empty vector") }

    // Test 6: HashMap UFC methods
    map = HashMap(alloc)
    map.insert("key1", 100)
    map.insert("key2", 200)

    value1 = map.get("key1")  // Returns Option<V>
    has_key = map.contains_key("key3")  // Returns bool

    // Test 7: Array UFC methods with allocator
    arr = Array(alloc)
    arr.push("first")
    arr.push("second")
    arr.push("third")

    arr_len = arr.len()  // UFC on Array
    last_elem = arr.last()  // Returns Option<T>

    // Test 8: String conversions (code action test)
    static_str: StaticString = "static"
    // dynamic_str: String = static_str  // DIAGNOSTIC: type mismatch -> QUICKFIX: Convert to String

    // Test 9: Loop with UFC
    vec.loop((item) {
        io.println("Item: ${item}")
    })

    // Test 10: Nested UFC with Option and Result
    opt_result = Some(Result.Ok(42))
    opt_result ?
        | Some(res) => {
            res ?
                | Ok(val) => { io.println("Value: ${val}") }
                | Err(e) => { io.println("Error: ${e}") }
        }
        | None => { io.println("No value") }

    0
}