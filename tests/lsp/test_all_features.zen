// Comprehensive LSP Feature Test File
// This file exercises all major LSP features

// Test 1: Hover on function definition
divide = (a: f64, b: f64) Result<f64, StaticString> {
    if b == 0.0 {
        return Result::Err("Division by zero")
    }
    return Result::Ok(a / b)
}

// Test 2: Struct definition for goto definition
Point = struct {
    x: f64,
    y: f64,
}

// Test 3: Enum for hover info
Status = enum {
    Success,
    Error(StaticString),
    Pending,
}

// Test 4: Function with parameters for signature help
calculate = (x: i32, y: i32, op: StaticString) i32 {
    if op == "add" {
        return x + y
    }
    if op == "sub" {
        return x - y
    }
    return 0
}

// Test 5: Function with inlay hints
test_inlay_hints = () void {
    // Variable without type annotation - should show inlay hint
    result = divide(10.0, 2.0)

    // Variable with type - no hint needed
    value: f64 = 5.0

    // Function call with parameters - should show parameter names
    sum = calculate(5, 3, "add")

    // Pattern match for hover
    match result {
        Result::Ok(val) => {
            // Hover on 'val' should show f64
            print(val)
        },
        Result::Err(msg) => {
            print(msg)
        }
    }
}

// Test 6: Rename symbol test
test_rename = () void {
    local_var = 42
    another_var = local_var + 1
    print(local_var)
}

// Test 7: Find references test
global_constant = 100

use_global = () i32 {
    return global_constant * 2
}

another_use = () i32 {
    return global_constant + 10
}

// Test 8: Code actions test
test_code_actions = () void {
    // This should trigger allocator code action
    // message = String::from_static("Hello")
}

// Test 9: Document symbols test - all functions should appear in outline
helper1 = () void {}
helper2 = () void {}
helper3 = () void {}

// Test 10: Main function with various features
main = () void {
    // Signature help: hover between parentheses
    result = calculate(10, 20, "add")

    // Goto definition: ctrl+click on Point
    p = Point { x: 1.0, y: 2.0 }

    // Find references: find all uses of divide
    div_result = divide(100.0, 5.0)

    // Code lens: this is a test function
    test_inlay_hints()
}
