// Test file for LSP features
// This file tests goto definition, find references, and hover functionality

// Test function definition
test_function = (x: i32, y: i32) i32 {
    result := x + y
    return result
}

// Test struct definition
TestStruct struct {
    field1: i32
    field2: String
}

// Test enum definition
TestEnum enum {
    Variant1
    Variant2(i32)
    Variant3 { data: String }
}

// Main function that uses the above definitions
main = () i32 {
    // Test function reference (goto definition should jump to line 5)
    value := test_function(10, 20)

    // Test struct usage (hover should show struct info)
    my_struct := TestStruct {
        field1: 42,
        field2: "test"
    }

    // Test enum usage (hover should show enum info)
    my_enum := TestEnum::Variant1

    // Test pattern matching with enum
    result := my_enum ? {
        TestEnum::Variant1 => 1,
        TestEnum::Variant2(n) => n,
        TestEnum::Variant3 { data } => data.len()
    }

    // Test Option type (hover should show built-in info)
    opt := Option::Some(100)

    // Test Result type
    res := Result::Ok(200)

    // Test loop construct (hover should show loop syntax)
    sum := 0
    (0..10).loop((i) {
        sum = sum + i
    })

    // Test string types
    static_str: StaticString = "compile-time string"
    dynamic_str: String = "runtime string"

    return result
}

// Another function that calls test_function (for find references)
helper_function = () i32 {
    // This is another reference to test_function
    return test_function(5, 10)
}

// Test UFC syntax
ufc_test = () void {
    arr := [1, 2, 3, 4, 5]

    // UFC method calls (hover should explain UFC)
    filtered := arr
        .filter((x) { x > 2 })
        .map((x) { x * 2 })

    return
}