// Test method chaining on generic function results
{ io, Result , get_default_allocator} = @std

get_chained = () Result<Result<i32, StaticString>, StaticString> {
    Result.Ok(Result.Ok(500))
}

main = () void {
    alloc = get_default_allocator()
    io.println("Testing method chaining on nested generics")
    
    // Test 1: Store in intermediate variables (should work)
    result = get_chained()
    inner = result.raise()
    value = inner.raise()
    io.println("With intermediate vars: ${value}")
    
    // Test 2: Chain one level
    inner2 = get_chained().raise()
    value2 = inner2.raise()
    io.println("One level chained: ${value2}")
    
    // Test 3: Full chain (this likely fails)
    // value3 = get_chained().raise().raise()
    // io.println("Full chain: ${value3}")
}