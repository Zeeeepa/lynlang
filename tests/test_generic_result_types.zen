// Test generic Result<T,E> type instantiation with different types
{ io, Result } = @std

// Test with i64
test_i64_result = () Result<i64, string> {
    a = Result.Ok(1000000)
    val = a.raise()
    
    // Verify we got the correct i64 value
    if val != 1000000 {
        return Result.Err("Expected i64 value")
    }
    
    return Result.Ok(val)
}

// Test with f64
test_f64_result = () Result<f64, string> {
    a = Result.Ok(3.14159)
    val = a.raise()
    
    // Return the extracted f64 value
    return Result.Ok(val)
}

// Test with bool
test_bool_result = () Result<bool, string> {
    a = Result.Ok(true)
    val = a.raise()
    
    if !val {
        return Result.Err("Expected true")
    }
    
    return Result.Ok(val)
}

// Test with different error types
test_error_i32 = () Result<i32, i32> {
    // This should propagate the error
    a = Result.Err(42)
    val = a.raise() // Should early return with Result.Err(42)
    
    // This shouldn't be reached
    return Result.Ok(0)
}

main = () i32 {
    // Test i64
    result_i64 = test_i64_result()
    result_i64 ?
        | Result.Ok(v) { io.println("i64 test passed: ${v}") }
        | Result.Err(e) { 
            io.println("i64 test failed: ${e}")
            return 1
        }
    
    // Test f64
    result_f64 = test_f64_result()
    result_f64 ?
        | Result.Ok(v) { io.println("f64 test passed: ${v}") }
        | Result.Err(e) {
            io.println("f64 test failed: ${e}")
            return 1
        }
    
    // Test bool
    result_bool = test_bool_result()
    result_bool ?
        | Result.Ok(v) { 
            msg = v ? "true" | "false"
            io.println("bool test passed: ${msg}")
        }
        | Result.Err(e) {
            io.println("bool test failed: ${e}")
            return 1
        }
    
    // Test error propagation
    result_err = test_error_i32()
    result_err ?
        | Result.Ok(_) { 
            io.println("Error test failed: expected Err")
            return 1
        }
        | Result.Err(e) {
            if e == 42 {
                io.println("Error propagation test passed: ${e}")
            } else {
                io.println("Error test failed: wrong error value")
                return 1
            }
        }
    
    io.println("All generic Result<T,E> tests passed!")
    return 0
}