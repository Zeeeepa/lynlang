// Zen Language Working Features Demo
// Based on LANGUAGE_SPEC.zen - testing only confirmed working features

{ io } = @std

// Option type
Option<T>: Some(T) | None

// Result type 
Result<T, E>: Ok(T) | Err(E)

// Simple functions
add = (a: i32, b: i32) i32 {
    return a + b
}

multiply = (x: f64, y: f64) f64 {
    return x * y
}

main = () void {
    io.println("=== Zen Language Working Features ===")
    io.println("")
    
    // ========================================================================
    // 1. Variables 
    // ========================================================================
    io.println("1. Variable Declarations:")
    
    // Immutable assignments
    a = 10
    b = 20
    io.println("  a = ${a}, b = ${b}")
    
    // Typed assignments
    c: i32 = 30
    io.println("  c: i32 = ${c}")
    
    // Mutable variables
    counter ::= 0
    io.println("  Initial counter = ${counter}")
    counter = counter + 1
    io.println("  Incremented counter = ${counter}")
    
    // Mutable with type
    value:: i32 = 100
    io.println("  value:: i32 = ${value}")
    value = 200
    io.println("  Reassigned value = ${value}")
    
    io.println("")
    
    // ========================================================================
    // 2. Pattern Matching
    // ========================================================================
    io.println("2. Pattern Matching:")
    
    flag = true
    flag ? {
        io.println("  Flag is true")
    }
    
    condition = false
    condition ?
        | true { io.println("  Condition: true branch") }
        | false { io.println("  Condition: false branch") }
    
    io.println("")
    
    // ========================================================================
    // 3. Functions
    // ========================================================================
    io.println("3. Functions:")
    
    sum = add(5, 3)
    io.println("  add(5, 3) = ${sum}")
    
    product = multiply(2.5, 4.0)
    io.println("  multiply(2.5, 4.0) = ${product}")
    
    io.println("")
    
    // ========================================================================
    // 4. Option Types
    // ========================================================================
    io.println("4. Option Types:")
    
    some_value: Option<i32> = Some(42)
    some_value ?
        | Some(v) { io.println("  Option has value: ${v}") }
        | None { io.println("  Option is None") }
    
    no_value: Option<i32> = None
    no_value ?
        | Some(v) { io.println("  Value: ${v}") }
        | None { io.println("  No value (None)") }
    
    io.println("")
    
    // ========================================================================
    // 5. Result Types
    // ========================================================================
    io.println("5. Result Types:")
    
    success: Result<i32, string> = Ok(100)
    success ?
        | Ok(val) { io.println("  Success: ${val}") }
        | Err(msg) { io.println("  Error: ${msg}") }
    
    failure: Result<i32, string> = Err("Something went wrong")
    failure ?
        | Ok(val) { io.println("  Value: ${val}") }
        | Err(msg) { io.println("  Error: ${msg}") }
    
    io.println("")
    
    // ========================================================================
    // 6. Loops
    // ========================================================================
    io.println("6. Loops:")
    
    io.println("  Range (0..3):")
    (0..3).loop((i) {
        io.println("    ${i}")
    })
    
    io.println("  Step range (0..6 by 2):")
    (0..6).step(2).loop((i) {
        io.println("    ${i}")
    })
    
    io.println("  Loop with break:")
    n ::= 0
    loop(() {
        n = n + 1
        io.println("    n = ${n}")
        n >= 2 ?
            | true { break }
            | false { }
    })
    
    io.println("")
    
    // ========================================================================
    // 7. String Interpolation
    // ========================================================================
    io.println("7. String Interpolation:")
    
    name = "Zen"
    version = 1
    message = "Language: ${name}, Version: ${version}"
    io.println("  ${message}")
    
    x = 10
    y = 20
    result = x + y
    io.println("  ${x} + ${y} = ${result}")
    
    io.println("")
    io.println("=== Demo Complete ===")
}