// Debug generic type tracking
{ io } = @std
{ Result } = @std

// Returns Result<Result<i32, string>, string>
get_double_result = () Result<Result<i32, string>, string> {
    inner = Result.Ok(789)
    Result.Ok(inner)
}

main = () void {
    io.println("=== Testing Generic Type Tracking ===")
    
    // Call the function
    outer = get_double_result()
    
    io.println("Got outer Result")
    
    // This should show Result<Result<i32, string>, string>
    outer ?
        | Result.Ok(inner) {
            io.println("Outer is Ok, inner type should be Result<i32, string>")
            inner ?
                | Result.Ok(val) { io.println("  Inner Ok: ${val}") }
                | Result.Err(e) { io.println("  Inner Err: ${e}") }
        }
        | Result.Err(e) { io.println("Outer Err: ${e}") }
}