// Ultimate stress test for generic type system
// Tests the most complex generic patterns imaginable
{ io, Result, Option, Array, HashMap , get_default_allocator} = @std

// Custom generic enum for testing
Either<L, R> : .Left(L) | .Right(R)

main = () void {
    alloc = get_default_allocator()
    io.println("=== Ultimate Generics Stress Test ===")
    
    // Test 1: 5-level deep nested Result
    io.println("\n[1] 5-level nested Result")
    create_penta = () Result<Result<Result<Result<Result<i32, StaticString>, StaticString>, StaticString>, StaticString>, StaticString> {
        Result.Ok(Result.Ok(Result.Ok(Result.Ok(Result.Ok(12345)))))
    }
    
    penta = create_penta()
    v1 = penta.raise()
    v2 = v1.raise()
    v3 = v2.raise()
    v4 = v3.raise()
    final_value = v4.raise()
    io.println("  Expected 12345, got: ${final_value}")
    
    // Test 2: Complex mixed nesting with custom enum
    io.println("\n[2] Complex mixed: Result<Option<Either<i32, Result<StaticString, f64>>>>")
    create_complex = () Result<Option<Either<i32, Result<StaticString, f64>>>, StaticString> {
        Result.Ok(Option.Some(Either.Right(Result.Ok("nested"))))
    }
    
    complex = create_complex()
    complex ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(either) {
                    either ?
                        | Either.Left(num) { io.println("  Got Left: ${num}") }
                        | Either.Right(inner_result) {
                            inner_result ?
                                | Result.Ok(s) { io.println("  Got Right->Ok: ${s} (expected 'nested')") }
                                | Result.Err(f) { io.println("  Got Right->Err: ${f}") }
                        }
                }
                | Option.None { io.println("  Got None") }
        }
        | Result.Err(e) { io.println("  Got Err: ${e}") }
    
    // Test 3: Array of nested generics
    io.println("\n[3] Array<Option<Result<i32, StaticString>>>")
    arr = Array<Option<Result<i32, StaticString>>>()
    arr.push(Option.Some(Result.Ok(100)))
    arr.push(Option.None)
    arr.push(Option.Some(Result.Err("error")))
    arr.push(Option.Some(Result.Ok(200)))
    
    io.println("  Array created and populated with nested generics")
    io.println("  Array length: ${arr.len()}")
    
    // Test 4: HashMap instantiation with generic values (methods not yet implemented)
    io.println("\n[4] HashMap instantiation test")
    map = HashMap<String, Option<Result<i32, String>>>.new(alloc)
    io.println("  Created HashMap with complex generic type (instantiation works!)")
    
    // Test 5: Function returning deeply nested generic
    io.println("\n[5] Function chaining with nested generics")
    
    transform = (x: i32) Result<Option<Result<i32, StaticString>>, StaticString> {
        x > 0 ?
            | true { Result.Ok(Option.Some(Result.Ok(x * 2))) }
            | false { Result.Ok(Option.None) }
    }
    
    chain_result = transform(25)
    chain_result ?
        | Result.Ok(opt) {
            opt ?
                | Option.Some(inner) {
                    inner ?
                        | Result.Ok(v) { io.println("  Transform(25) = ${v} (expected 50)") }
                        | Result.Err(e) { io.println("  Transform error: ${e}") }
                }
                | Option.None { io.println("  Transform returned None") }
        }
        | Result.Err(e) { io.println("  Transform failed: ${e}") }
    
    // Test 6: Alternating Option/Result nesting
    io.println("\n[6] Alternating: Option<Result<Option<Result<Option<i32>, E>>, E>>")
    create_alternating = () Option<Result<Option<Result<Option<i32>, StaticString>>, StaticString>> {
        Option.Some(Result.Ok(Option.Some(Result.Ok(Option.Some(888)))))
    }
    
    alt = create_alternating()
    alt ?
        | Option.Some(r1) {
            r1 ?
                | Result.Ok(o2) {
                    o2 ?
                        | Option.Some(r2) {
                            r2 ?
                                | Result.Ok(o3) {
                                    o3 ?
                                        | Option.Some(v) { io.println("  Alternating value: ${v} (expected 888)") }
                                        | Option.None { io.println("  Got None at level 3") }
                                }
                                | Result.Err(e) { io.println("  Error at level 2: ${e}") }
                        }
                        | Option.None { io.println("  Got None at level 2") }
                }
                | Result.Err(e) { io.println("  Error at level 1: ${e}") }
        }
        | Option.None { io.println("  Got None at level 1") }
    
    // Test 7: Generic type with multiple type parameters
    io.println("\n[7] Result with both T and E as nested generics")
    complex_both = () Result<Result<i32, Option<StaticString>>, Option<Result<StaticString, i32>>> {
        Result.Ok(Result.Ok(777))
    }
    
    both = complex_both()
    both ?
        | Result.Ok(inner) {
            inner ?
                | Result.Ok(v) { io.println("  Complex both: Ok(Ok(${v}))") }
                | Result.Err(opt) {
                    opt ?
                        | Option.Some(s) { io.println("  Complex both: Ok(Err(Some('${s}')))") }
                        | Option.None { io.println("  Complex both: Ok(Err(None))") }
                }
        }
        | Result.Err(opt) {
            opt ?
                | Option.Some(inner_res) {
                    inner_res ?
                        | Result.Ok(s) { io.println("  Complex both: Err(Some(Ok('${s}')))") }
                        | Result.Err(i) { io.println("  Complex both: Err(Some(Err(${i})))") }
                }
                | Option.None { io.println("  Complex both: Err(None)") }
        }
    
    io.println("\n=== All Stress Tests Complete ===")
    io.println("If you're seeing this, generics are ROCK SOLID! ðŸŽ‰")
}