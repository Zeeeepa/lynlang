// Simple Bootstrap Compiler Test
// This test validates basic functionality without complex features

core = @std
io = @std
math = @std
string = @std

// Test that imports work at module level (no comptime needed)
test_module_imports = () bool   {
    io.print("[TEST] Module-level imports... ")
    
    // Test math module
    pi_test := math.PI > 3.0 && math.PI < 4.0
    
    pi_test ?
        | true {
            io.print("PASS\n")
            return true
        }
        | false {
            io.print("FAIL\n")
            return false
        }
}

// Test basic arithmetic operations
test_arithmetic = () i32   {
    io.print("[TEST] Arithmetic operations... ")
    
    a := 10
    b := 20
    sum := a + b
    diff := b - a
    product := a * 2
    quotient := b / a
    
    (sum == 30 && diff == 10 && product == 20 && quotient == 2) ?
        | true {
            io.print("PASS\n")
            return 1
        }
        | false {
            io.print("FAIL\n")
            return 0
        }
}

// Test string operations
test_strings = () bool   {
    io.print("[TEST] String operations... ")
    
    hello := "Hello"
    world := "World"
    
    // Simple length check (assuming string module has a len function)
    (hello != world) ?
        | true {
            io.print("PASS\n")
            return true
        }
        | false {
            io.print("FAIL\n")
            return false
        }
}

// Test control flow
test_control_flow = () i32   {
    io.print("[TEST] Control flow... ")
    
    result := 0
    
    // Test pattern matching
    x := 5
    (x > 3) ?
        | true {
            result = result + 1
        }
        | false {
            result = result - 1
        }
    
    // Test loops
    count ::= 0
    (0..3).loop((_) {
        count = count + 1
    })
    
    (result == 1 && count == 3) ?
        | true {
            io.print("PASS\n")
            return 1
        }
        | false {
            io.print("FAIL\n")
            return 0
        }
}

// Test function calls and returns
helper_add = (a: i32, b: i32) i32   {
    return a + b
}

test_functions = () bool   {
    io.print("[TEST] Function calls... ")
    
    result := helper_add(5, 10)
    
    result == 15 ?
        | true {
            io.print("PASS\n")
            return true
        }
        | false {
            io.print("FAIL\n")
            return false
        }
}

// Test pattern matching
test_pattern_matching = () bool   {
    io.print("[TEST] Pattern matching... ")
    
    value := 42
    
    result := value ?
        | 0 { false }
        | 42 { true }
        | _ { false }
    
    result ?
        | true {
            io.print("PASS\n")
            return true
        }
        | false {
            io.print("FAIL\n")
            return false
        }
}

// Main test runner
main = () i32   {
    io.print("=====================================\n")
    io.print("Zen Bootstrap Compiler Test Suite\n")
    io.print("=====================================\n\n")
    
    total_tests := 6
    passed_tests ::= 0
    
    // Run all tests
    test_module_imports() ?
        | true {
            passed_tests = passed_tests + 1
        }
    
    passed_tests = passed_tests + test_arithmetic()
    
    test_strings() ?
        | true {
            passed_tests = passed_tests + 1
        }
    
    passed_tests = passed_tests + test_control_flow()
    
    test_functions() ?
        | true {
            passed_tests = passed_tests + 1
        }
    
    test_pattern_matching() ?
        | true {
            passed_tests = passed_tests + 1
        }
    
    // Print results
    io.print("\n=====================================\n")
    io.print("Results: ")
    io.print_int(passed_tests)
    io.print(" / ")
    io.print_int(total_tests)
    io.print(" tests passed\n")
    io.print("=====================================\n")
    
    // Return status
    (passed_tests == total_tests) ?
        | true {
            io.print("\n✅ All bootstrap tests passed!\n")
            return 0
        }
        | false {
            io.print("\n❌ Some bootstrap tests failed.\n")
            return 1
        }
}