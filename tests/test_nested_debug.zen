// Debug nested generic issue
{ io, Result } = @std

make_inner = () Result<i32, string> {
    Result.Ok(42)
}

make_outer = () Result<Result<i32, string>, string> {
    inner = make_inner()
    Result.Ok(inner)
}

main = () i32 {
    io.println("=== Nested Generic Debug ===")
    
    // Test 1: Direct creation
    io.println("Test 1: Direct creation")
    inner1 = Result.Ok(42)
    outer1 = Result.Ok(inner1)
    
    outer1 ?
        | Result.Ok(inn) {
            io.println("  Got inner from outer")
            inn ?
                | Result.Ok(v) {
                    io.println("  Inner Ok value: ${v}")
                }
                | Result.Err(e) {
                    io.println("  Inner Err: ${e}")
                }
        }
        | Result.Err(e) {
            io.println("  Outer Err: ${e}")
        }
    
    // Test 2: Via functions
    io.println("\nTest 2: Via functions")
    outer2 = make_outer()
    
    outer2 ?
        | Result.Ok(inn) {
            io.println("  Got inner from function")
            inn ?
                | Result.Ok(v) {
                    io.println("  Function inner value: ${v}")
                }
                | Result.Err(e) {
                    io.println("  Function inner Err: ${e}")
                }
        }
        | Result.Err(e) {
            io.println("  Function outer Err: ${e}")
        }
    
    0
}