// Test for improved .raise() functionality with closures
{ io, Result , get_default_allocator} = @std

// Test with nested closures that return Result
chain_raises = () Result<i32, string> {
    first = () Result<i32, string> { Result.Ok(10) }
    second = (x: i32) Result<i32, string> { Result.Ok(x * 2) }
    third = (x: i32) Result<i32, string> { Result.Ok(x + 5) }
    
    // Chain: 10 -> 20 -> 25
    val1 = first().raise()
    val2 = second(val1).raise()
    val3 = third(val2).raise()
    
    Result.Ok(val3)
}

// Test early error return
early_error_return = (input: i32) Result<i32, string> {
    validate = (x: i32) Result<i32, string> {
        x < 0 ?
            | true { Result.Err("Negative not allowed") }
            | false { Result.Ok(x) }
    }
    
    // This should return early if input is negative
    validated = validate(input).raise()
    Result.Ok(validated * 2)
}

main = () i32 {
    alloc = get_default_allocator()
    // Test 1: Chain raises
    test1 = chain_raises()
    test1 ?
        | Result.Ok(v) {
            v == 25 ? {
                io.println("✓ Test 1 passed: Chain raises")
            }
            v != 25 ? {
                io.println("✗ Test 1 failed: Expected 25, got ${v}")
                return 1
            }
        }
        | Result.Err(e) {
            io.println("✗ Test 1 failed with error: ${e}")
            return 1
        }
    
    // Test 2a: Early return on error
    test2a = early_error_return(-5)
    test2a ?
        | Result.Ok(v) {
            io.println("✗ Test 2a failed: Should have returned error")
            return 1
        }
        | Result.Err(e) {
            e == "Negative not allowed" ? {
                io.println("✓ Test 2a passed: Early error return")
            }
            e != "Negative not allowed" ? {
                io.println("✗ Test 2a failed: Wrong error: ${e}")
                return 1
            }
        }
    
    // Test 2b: Success case  
    test2b = early_error_return(10)
    test2b ?
        | Result.Ok(v) {
            v == 20 ? {
                io.println("✓ Test 2b passed: Success case")
            }
            v != 20 ? {
                io.println("✗ Test 2b failed: Expected 20, got ${v}")
                return 1
            }
        }
        | Result.Err(e) {
            io.println("✗ Test 2b failed with unexpected error: ${e}")
            return 1
        }
    
    io.println("\n✓ All improved raise() tests passed!")
    return 0
}