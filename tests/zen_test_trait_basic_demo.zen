// Test basic trait implementation from LANGUAGE_SPEC.zen
{ io } = @std

// Trait definition (lines 124-127 from spec)
Geometric: {
    area: (self) f64,
    perimeter: (self) f64,
}

// Circle struct (lines 130-133 from spec)
Circle: {
    center_x: f64,
    center_y: f64,
    radius: f64,
}

// Implement trait for Circle (lines 135-143 from spec)
Circle.implements(Geometric, {
    area = (self) f64 {
        return 3.14159 * self.radius * self.radius
    },
    perimeter = (self) f64 {
        return 2.0 * 3.14159 * self.radius
    },
})

main = () void {
    io.println("Testing trait implementation...")
    
    // Create a circle
    c = Circle { 
        center_x: 0.0, 
        center_y: 0.0, 
        radius: 5.0 
    }
    
    // Call trait methods
    area_val = c.area()
    perim_val = c.perimeter()
    
    io.println("Circle with radius 5.0:")
    io.println("  Area: ${area_val}")
    io.println("  Perimeter: ${perim_val}")
}