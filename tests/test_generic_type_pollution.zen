// Test that generic type context doesn't pollute across functions
// This test ensures each function gets clean generic context
{ io, Result, Option } = @std

// Function with Result<i32, string>
func_with_i32_result = () Result<i32, string> {
    Result.Ok(42)
}

// Function with Result<f64, string>
func_with_f64_result = () Result<f64, string> {
    Result.Ok(3.14)
}

// Function with Option<string>
func_with_string_option = () Option<string> {
    Option.Some("hello")
}

// Function with Option<i32>
func_with_i32_option = () Option<i32> {
    Option.Some(100)
}

// Function that uses multiple generic types
test_multiple_generics = () void {
    // Test Result<i32, string>
    r1 = func_with_i32_result()
    r1 ?
        | Result.Ok(v) { 
            io.println("Result<i32>: ${v}")
            v == 42 ?
                | true { io.println("  ✓ i32 result correct") }
                | false { io.println("  ✗ i32 result wrong: ${v}") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test Result<f64, string>
    r2 = func_with_f64_result()
    r2 ?
        | Result.Ok(v) { 
            io.println("Result<f64>: ${v}")
            // Just check if it's 3.14
            v == 3.14 ?
                | true { io.println("  ✓ f64 result correct") }
                | false { io.println("  ✗ f64 result wrong: ${v}") }
        }
        | Result.Err(e) { io.println("Error: ${e}") }
    
    // Test Option<string>
    o1 = func_with_string_option()
    o1 ?
        | Option.Some(v) { 
            io.println("Option<string>: ${v}")
            v == "hello" ?
                | true { io.println("  ✓ string option correct") }
                | false { io.println("  ✗ string option wrong: ${v}") }
        }
        | Option.None { io.println("None") }
    
    // Test Option<i32>
    o2 = func_with_i32_option()
    o2 ?
        | Option.Some(v) { 
            io.println("Option<i32>: ${v}")
            v == 100 ?
                | true { io.println("  ✓ i32 option correct") }
                | false { io.println("  ✗ i32 option wrong: ${v}") }
        }
        | Option.None { io.println("None") }
}

main = () void {
    io.println("Testing generic type context isolation")
    
    // Call multiple times to ensure no pollution
    test_multiple_generics()
    io.println("\nSecond call (should get same results):")
    test_multiple_generics()
    
    io.println("\n✓ All generic type context tests passed!")
}