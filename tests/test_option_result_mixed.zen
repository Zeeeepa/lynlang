// Test mixed Option<Result<T,E>> nesting
{ io, Option, Result , get_default_allocator} = @std

main = () void {
    alloc = get_default_allocator()
    io.println("=== Testing Option<Result<i32,string>> ===")
    
    // Create Option containing Result
    result_ok = Result.Ok(123)
    opt_result = Option.Some(result_ok)
    
    // Extract with pattern matching
    opt_result ?
        | Option.Some(res) {
            io.println("Option.Some extracted")
            res ?
                | Result.Ok(val) {
                    io.println("Value: ${val}")
                    val == 123 ?
                        | true { io.println("✓ Option<Result> works!") }
                        | false { io.println("✗ Wrong value: ${val}") }
                }
                | Result.Err(e) { io.println("Error: ${e}") }
        }
        | Option.None { io.println("Option.None") }
}