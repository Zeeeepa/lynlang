// Simple test for core LANGUAGE_SPEC.zen features
// Tests the most fundamental features that should work

// Import from @std - only @std and @this are special
io = @std.io
{ Option } = @std.core

// Test pattern matching with ? operator
main = () void {
    io.println("=== Testing LANGUAGE_SPEC.zen Core Features ===")
    
    // Test 1: Option pattern matching with ?
    maybe: Option<i32> = Option.Some(42)
    maybe ?
        | Some(v) { io.println("Option value: 42") }
        | None { io.println("No value") }
    
    // Test 2: Boolean pattern matching
    is_ready = true
    is_ready ? { 
        io.println("System is ready") 
    }
    
    // Test 3: Mutable assignment with ::=
    counter ::= 0
    counter = counter + 10
    io.println("Counter: 10")
    
    // Test 4: Simple enum
    Color: Red | Green | Blue
    c: Color = Color.Red
    c ?
        | Red { io.println("Color: Red") }
        | Green { io.println("Color: Green") }  
        | Blue { io.println("Color: Blue") }
    
    // Test 5: @this.defer
    io.println("Before defer")
    @this.defer(io.println("Deferred action"))
    io.println("After defer setup")
    
    io.println("=== Tests Complete ===")
}