// Simple test of LANGUAGE_SPEC.zen features without string interpolation
{ io } = @std

// Type definitions - no null, only Option and Result
Option<T>: Some(T) | None
Result<T, E>: Ok(T) | Err(E)

// Simple struct
Point: {
    x:: f64,
    y:: f64 = 0
}

main = () void {
    io.println("=== ZEN SPEC SIMPLE TEST ===")
    
    // 1. Variable declarations (all 6 forms)
    io.println("1. Variables:")
    x: i32
    x = 10
    y = 20  
    z: i32 = 30
    w:: i32
    w = 40
    v ::= 50
    u:: i32 = 60
    
    io.println(x)
    io.println(y)
    io.println(z)
    io.println(w)
    io.println(v)
    io.println(u)
    
    // 2. Pattern matching with ?
    io.println("2. Pattern matching:")
    
    // Boolean short form
    is_ready = true
    is_ready ? {
        io.println("Ready!")
    }
    
    // Full pattern match
    has_data = false
    has_data ?
        | true { io.println("Has data") }
        | false { io.println("No data") }
    
    // Option type
    maybe: Option<i32> = Some(42)
    maybe ?
        | Some(val) { io.println(val) }
        | None { io.println("None") }
    
    nothing: Option<i32> = None
    nothing ?
        | Some(val) { io.println(val) }
        | None { io.println("Was None") }
    
    // Result type
    success: Result<i32, string> = Ok(100)
    success ?
        | Ok(val) { io.println(val) }
        | Err(msg) { io.println(msg) }
    
    failure: Result<i32, string> = Err("error message")
    failure ?
        | Ok(val) { io.println(val) }
        | Err(msg) { io.println(msg) }
    
    // 3. Range iteration
    io.println("3. Ranges:")
    (0..5).loop((i) {
        io.println(i)
    })
    
    // 4. UFC
    io.println("4. UFC:")
    double = (n: i32) i32 { return n * 2 }
    result = 10.double()
    io.println(result)
    
    // 5. Infinite loop with break
    io.println("5. Loop:")
    counter ::= 0
    loop(() {
        counter = counter + 1
        counter > 3 ?
            | true { break }
            | false { io.println(counter) }
    })
    
    // 6. Defer
    io.println("6. Defer:")
    @this.defer(io.println("Cleanup!"))
    io.println("Working...")
    
    io.println("Done!")
}