// Test basic Zen spec syntax

{ io , get_default_allocator} = @std

// Option type definition
// NOTE: Using stdlib Option instead of redefining
{ Option, Some, None , get_default_allocator} = @std

// Simple assignment operators
main = () void {
    alloc = get_default_allocator()
    x = 10          // Immutable assignment  
    y ::= 20        // Mutable assignment
    z :: i32 = 30   // Mutable with type
    
    // Pattern matching with ?
    maybe_value: Option<i32> = Some(42)
    maybe_value ?
        | Some(val) { io.println("Value: ${val}") }
        | None { io.println("No value") }
    
    // Range loop
    (0..10).loop((i) {
        io.println("Count: ${i}")
    })
    
    // Boolean pattern
    is_ready = true
    is_ready ? {
        io.println("Ready!")
    }
}