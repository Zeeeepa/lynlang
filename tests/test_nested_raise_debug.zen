// Test .raise() with nested Result - debugging version
{ io, Result } = @std

// Function that returns Result<Result<i32, string>, string>
get_nested = () Result<Result<i32, string>, string> {
    inner = Result.Ok(42)
    io.println("Creating inner Result.Ok(42)")
    Result.Ok(inner)
}

// Function that uses raise
process = () Result<i32, string> {
    // First raise to get inner Result<i32, string>
    outer = get_nested()
    io.println("Got outer result")
    
    // Pattern match to see what we have
    outer ?
        | Result.Ok(inner) {
            io.println("Outer is Ok, extracting inner")
            // Use the inner directly
            inner
        }
        | Result.Err(e) {
            io.println("Outer is Err: ${e}")
            Result.Err(e)
        }
}

main = () i32 {
    result = process()
    result ?
        | Result.Ok(v) {
            io.println("Final value: ${v}")
            v == 42 ?
                | true { 0 }
                | false { 1 }
        }
        | Result.Err(e) {
            io.println("Final error: ${e}")
            2
        }
}