// Comprehensive test for Option<T> pattern matching with various types
{ io , get_default_allocator} = @std

main = () i32 {
    alloc = get_default_allocator()
    io.println("=== Option<i32> Tests ===")
    
    // Test with integer payload
    int_opt = Some(42)
    int_opt ?
        | .Some(v) {
            io.println("Integer Some: ${v}")
        }
        | .None {
            io.println("Integer None")
        }
    
    // Test None case
    none_opt = None
    none_opt ?
        | .Some(v) {
            io.println("Should not see this: ${v}")
        }
        | .None {
            io.println("Got None as expected")
        }
    
    io.println("")
    io.println("=== Option<String> Tests ===")
    
    // Test with string payload using blocks
    str_opt = Some("hello world")
    str_opt ?
        | .Some(s) {
            io.println("String Some: ${s}")
        }
        | .None {
            io.println("String None")
        }
    
    // Test string None with default
    empty_str = None
    result = empty_str ?
        | .Some(s) {
            s
        }
        | .None {
            "default value"
        }
    io.println("None with default: ${result}")
    
    io.println("")
    io.println("=== Nested Option Tests ===")
    
    // Test with different integer sizes
    small = Some(127)  // Should fit in i8
    small ?
        | .Some(v) {
            io.println("Small int: ${v}")
        }
        | .None {
            io.println("None")
        }
    
    big = Some(1000000)  // Needs i32 or i64
    big ?
        | .Some(v) {
            io.println("Big int: ${v}")
        }
        | .None {
            io.println("None")
        }
    
    io.println("")
    io.println("All Option tests passed!")
    
    0
}