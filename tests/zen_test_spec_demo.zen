// Demo of working LANGUAGE_SPEC.zen features

{ io } = @std

Point: {
    x:: f64,
    y:: f64
}

double = (n: i32) i32 {
    return n * 2
}

main = () void {
    io.println("=== LANGUAGE_SPEC.zen Demo ===")
    
    // No keywords - pattern matching
    value = 42
    value == 42 ? {
        io.println("Found the answer!")
    }
    
    // Variables (all forms from spec)
    name = "Zen"           // Immutable
    version: f64 = 1.0    // Immutable with type
    count ::= 0           // Mutable
    count = count + 1
    io.println("${name} v${version}, count: ${count}")
    
    // Structs
    p = Point { x: 1.0, y: 2.0 }
    io.println("Point: (${p.x}, ${p.y})")
    p.x = 5.0  // Mutable field
    io.println("Updated: (${p.x}, ${p.y})")
    
    // UFC
    result = 5.double()
    io.println("5.double() = ${result}")
    
    // Loops
    io.println("Range loop:")
    (0..3).loop((i) {
        io.println("  ${i}")
    })
    
    // Pattern matching
    has_data = false
    has_data ?
        | true { io.println("Processing...") }
        | false { io.println("Waiting...") }
    
    // @this.defer
    @this.defer(io.println("Cleanup executed!"))
    
    io.println("=== Done ===")
}