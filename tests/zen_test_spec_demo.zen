// Test file based on LANGUAGE_SPEC.zen examples
{ io } = @std

// Option type from spec
Option<T>: Some(T) | None

// Simple struct from spec
Point: {
    x :: f64,
    y :: f64
}

// Test main function
main = () void {
    // Test variable declarations from spec (lines 298-306)
    x :: i32  // Should be mutable for forward declaration
    x = 10
    io.print("x = ")
    io.print_int(x)
    io.println("")
    
    y = 10  // Immutable
    io.print("y = ")
    io.print_int(y)
    io.println("")
    
    z: i32 = 20  // Immutable with type
    io.print("z = ")
    io.print_int(z)
    io.println("")
    
    w :: i32  // Mutable forward declaration
    w = 20
    io.print("w = ")
    io.print_int(w)
    io.println("")
    
    v ::= 30  // Mutable assignment
    v = v + 1
    io.print("v = ")
    io.print_int(v)
    io.println("")
    
    u :: i32 = 40  // Mutable with type
    u = u + 1
    io.print("u = ")
    io.print_int(u)
    io.println("")
    
    // Test pointer operations (lines 364-372)
    point = Point { x: 100.0, y: 100.0 }
    point_ptr = point.ref()
    io.println("Got pointer reference")
    
    // Test pointer dereference with .val
    deref_point = point_ptr.val
    io.print("Dereferenced x: ")
    io.print_float(deref_point.x)
    io.println("")
    
    // Test Option type (lines 462-473)
    maybe_radius: Option<f64> = Option.Some(5.5)
    maybe_radius ?
        | Some(r) {
            io.print("Radius: ")
            io.print_float(r)
            io.println("")
        }
        | None {
            io.println("No radius")
        }
    
    // Test range loop (lines 431-434)
    io.println("Range loop:")
    (0..3).loop((i) {
        io.print_int(i)
        io.print(" ")
    })
    io.println("")
    
    // Test defer (line 217)
    @this.defer(io.println("Deferred cleanup"))
    
    io.println("End of main")
}