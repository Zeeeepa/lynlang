    Checking zen v0.1.0 (/home/ubuntu/zenlang)
error[E0433]: failed to resolve: could not find `StructFieldName` in `ast`
   --> src/ffi/mod.rs:138:39
    |
138 |                     name: crate::ast::StructFieldName::Named(name),
    |                                       ^^^^^^^^^^^^^^^
    |                                       |
    |                                       could not find `StructFieldName` in `ast`
    |                                       help: a struct with a similar name exists: `StructField`

warning: this `if` statement can be collapsed
   --> src/codegen/llvm/behaviors.rs:161:13
    |
161 | /             if matches!(llvm_return_type, super::Type::Void) {
162 | |                 if self.builder.get_insert_block().unwrap().get_terminator().is_none() {
163 | |                     self.builder.build_return(None)?;
164 | |                 }
165 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
    = note: `#[warn(clippy::collapsible_if)]` on by default
help: collapse nested if block
    |
161 ~             if matches!(llvm_return_type, super::Type::Void) && self.builder.get_insert_block().unwrap().get_terminator().is_none() {
162 +                 self.builder.build_return(None)?;
163 +             }
    |

warning: this `else` branch is empty
   --> src/codegen/llvm/functions.rs:257:11
    |
257 |           } else {
    |  ___________^
258 | |         }
    | |_________^ help: you can remove it
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_else
    = note: `#[warn(clippy::needless_else)]` on by default

warning: this `else` branch is empty
   --> src/codegen/llvm/functions.rs:255:15
    |
255 |               } else {
    |  _______________^
256 | |             }
    | |_____________^ help: you can remove it
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_else

warning: this `else { if .. }` block can be collapsed
  --> src/lexer.rs:65:16
   |
65 |           } else {
   |  ________________^
66 | |             if let Some((_idx, ch)) = self.input[self.read_position..].char_indices().next() {
67 | |                 self.current_char = Some(ch);
68 | |                 self.position = self.read_position;
...  |
82 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
   = note: `#[warn(clippy::collapsible_else_if)]` on by default
help: collapse nested if block
   |
65 ~         } else if let Some((_idx, ch)) = self.input[self.read_position..].char_indices().next() {
66 +             self.current_char = Some(ch);
67 +             self.position = self.read_position;
68 +             self.read_position += ch.len_utf8();
69 +             
70 +             // Update line and column tracking
71 +             if ch == '\n' {
72 +                 self.line += 1;
73 +                 self.column = 1;
74 +             } else {
75 +                 self.column += 1;
76 +             }
77 +         } else {
78 +             self.current_char = None;
79 +             self.position = self.read_position;
80 +         }
   |

warning: this `if` statement can be collapsed
   --> src/type_system/monomorphization.rs:229:17
    |
229 | /                 if !type_args.is_empty() {
230 | |                     if self.env.get_generic_struct(name).is_some() || 
231 | |                        self.env.get_generic_enum(name).is_some() {
232 | |                         self.pending_instantiations.push((name.clone(), type_args.clone()));
233 | |                     }
234 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
229 ~                 if !type_args.is_empty() && (self.env.get_generic_struct(name).is_some() || self.env.get_generic_enum(name).is_some()) {
230 +                     self.pending_instantiations.push((name.clone(), type_args.clone()));
231 +                 }
    |

error[E0308]: mismatched types
   --> src/ffi/mod.rs:135:19
    |
135 |             name: Some(name.into()),
    |                   ^^^^^^^^^^^^^^^^^ expected `String`, found `Option<String>`
    |
    = note: expected struct `std::string::String`
                 found enum `std::option::Option<std::string::String>`

error[E0560]: struct `ast::StructField` has no field named `ty`
   --> src/ffi/mod.rs:139:21
    |
139 |                     ty,
    |                     ^^ `ast::StructField` does not have this field
    |
    = note: available fields are: `type_`, `is_mutable`

error[E0560]: struct `ast::StructField` has no field named `mutable`
   --> src/ffi/mod.rs:140:21
    |
140 |                     mutable: false,
    |                     ^^^^^^^ `ast::StructField` does not have this field
    |
    = note: available fields are: `type_`, `is_mutable`

error[E0277]: a value of type `std::vec::Vec<(std::string::String, ast::AstType)>` cannot be built from an iterator over elements of type `ast::StructField`
    --> src/ffi/mod.rs:143:16
     |
143  |             }).collect(),
     |                ^^^^^^^ value of type `std::vec::Vec<(std::string::String, ast::AstType)>` cannot be built from `std::iter::Iterator<Item=ast::StructField>`
     |
     = help: the trait `FromIterator<ast::StructField>` is not implemented for `std::vec::Vec<(std::string::String, ast::AstType)>`
             but trait `FromIterator<(std::string::String, ast::AstType)>` is implemented for it
     = help: for that trait implementation, expected `(std::string::String, ast::AstType)`, found `ast::StructField`
note: the method call chain might not have had the expected associated types
    --> src/ffi/mod.rs:136:40
     |
136  |               fields: fields.into_iter().map(|(name, ty)| {
     |  _____________________------_-----------_^
     | |                     |      |
     | |                     |      `Iterator::Item` is `(String, AstType)` here
     | |                     this expression has type `Vec<(String, AstType)>`
137  | |                 crate::ast::StructField {
138  | |                     name: crate::ast::StructFieldName::Named(name),
139  | |                     ty,
...    |
143  | |             }).collect(),
     | |______________^ `Iterator::Item` changed to `StructField` here
note: required by a bound in `std::iter::Iterator::collect`
    --> /home/ubuntu/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:1972:19
     |
1972 |     fn collect<B: FromIterator<Self::Item>>(self) -> B
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`

error[E0308]: mismatched types
   --> src/ffi/mod.rs:159:19
    |
159 |             name: Some(name.into()),
    |                   ^^^^^^^^^^^^^^^^^ expected `String`, found `Option<String>`
    |
    = note: expected struct `std::string::String`
                 found enum `std::option::Option<std::string::String>`

error[E0560]: struct `ast::EnumVariant` has no field named `fields`
   --> src/ffi/mod.rs:163:21
    |
163 |                     fields: vec![],
    |                     ^^^^^^ `ast::EnumVariant` does not have this field
    |
    = note: available fields are: `payload`

error[E0382]: borrow of partially moved value: `self`
    --> src/ffi/mod.rs:180:45
     |
180  |           let path = self.path.unwrap_or_else(|| {
     |                      --------- -              ^^ value borrowed here after partial move
     |  ____________________|_________|
     | |                    |
     | |                    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents
181  | |             self.find_library().unwrap_or_else(|| Self::default_lib_path(&self.name))
     | |             ---- borrow occurs due to use in closure
182  | |         });
     | |__________- `self.path` partially moved due to this method call
     |
note: `std::option::Option::<T>::unwrap_or_else` takes ownership of the receiver `self`, which moves `self.path`
    --> /home/ubuntu/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1017:30
     |
1017 |     pub fn unwrap_or_else<F>(self, f: F) -> T
     |                              ^^^^
     = note: partial move occurs because `self.path` has type `std::option::Option<std::path::PathBuf>`, which does not implement the `Copy` trait
help: you can `clone` the value and consume it, but this might not be your desired behavior
     |
180  |         let path = self.path.clone().unwrap_or_else(|| {
     |                             ++++++++

Some errors have detailed explanations: E0277, E0308, E0382, E0433, E0560.
For more information about an error, try `rustc --explain E0277`.
warning: `zen` (lib) generated 5 warnings
error: could not compile `zen` (lib) due to 8 previous errors; 5 warnings emitted
