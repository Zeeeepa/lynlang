{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Zenlang",
  "patterns": [
    {"include": "#comments"},
    {"include": "#strings"},
    {"include": "#keywords"},
    {"include": "#types"},
    {"include": "#operators"},
    {"include": "#numbers"},
    {"include": "#functions"},
    {"include": "#imports"},
    {"include": "#structs"},
    {"include": "#enums"},
    {"include": "#variables"}
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.zen",
          "match": "//.*$"
        },
        {
          "name": "comment.block.zen",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.zen",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.zen",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.zen",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.zen",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.zen",
          "match": "\\b(if|else|while|for|loop|break|continue|return|match|defer|async|await|yield|try|catch|throw)\\b"
        },
        {
          "name": "keyword.other.zen",
          "match": "\\b(fn|struct|enum|type|trait|impl|pub|const|static|extern|unsafe|macro|mod|use|as|where|move)\\b"
        },
        {
          "name": "constant.language.boolean.zen",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.zen",
          "match": "\\b(null|nil|undefined)\\b"
        },
        {
          "name": "keyword.other.self.zen",
          "match": "\\b(self|Self)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.zen",
          "match": "\\b(i8|i16|i32|i64|i128|isize|u8|u16|u32|u64|u128|usize|f32|f64|bool|char|str|string|String|void)\\b"
        },
        {
          "name": "support.type.zen",
          "match": "\\b(Vec|HashMap|HashSet|Option|Result|Box|Rc|Arc|Mutex|RwLock|Cell|RefCell)\\b"
        },
        {
          "name": "entity.name.type.zen",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.zen",
          "match": "(=|:=|::=|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=)"
        },
        {
          "name": "keyword.operator.comparison.zen",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.zen",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.logical.zen",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.zen",
          "match": "(&|\\||\\^|<<|>>|~)"
        },
        {
          "name": "keyword.operator.other.zen",
          "match": "(\\?|:|\\.\\.\\.|\\.\\.|\\.|\\.\\*|->|=>|@|#)"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.zen",
          "match": "\\b0x[0-9a-fA-F_]+\\b"
        },
        {
          "name": "constant.numeric.binary.zen",
          "match": "\\b0b[01_]+\\b"
        },
        {
          "name": "constant.numeric.octal.zen",
          "match": "\\b0o[0-7_]+\\b"
        },
        {
          "name": "constant.numeric.float.zen",
          "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.integer.zen",
          "match": "\\b[0-9][0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*=\\s*\\(",
          "captures": {
            "1": {"name": "entity.name.function.zen"}
          }
        },
        {
          "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*:\\s*\\(",
          "captures": {
            "1": {"name": "entity.name.function.zen"}
          }
        },
        {
          "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {"name": "entity.name.function.call.zen"}
          }
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "match": "(@import|@std|@compiler)\\s*\\(([^)]+)\\)",
          "captures": {
            "1": {"name": "keyword.other.import.zen"},
            "2": {"name": "string.quoted.other.zen"}
          }
        },
        {
          "match": "(@[a-zA-Z0-9_\\.]+)",
          "name": "keyword.other.import.zen"
        },
        {
          "match": "([a-z_][a-zA-Z0-9_]*)\\s*:=\\s*@",
          "captures": {
            "1": {"name": "variable.other.zen"}
          }
        }
      ]
    },
    "structs": {
      "patterns": [
        {
          "match": "([A-Z][A-Za-z0-9_]*)\\s*=\\s*\\{",
          "captures": {
            "1": {"name": "entity.name.type.struct.zen"}
          }
        },
        {
          "match": "([A-Z][A-Za-z0-9_]*)\\s*=\\s*struct",
          "captures": {
            "1": {"name": "entity.name.type.struct.zen"}
          }
        }
      ]
    },
    "enums": {
      "patterns": [
        {
          "match": "([A-Z][A-Za-z0-9_]*)\\s*=\\s*\\|",
          "captures": {
            "1": {"name": "entity.name.type.enum.zen"}
          }
        },
        {
          "match": "\\|\\s*([A-Z][A-Za-z0-9_]*)",
          "captures": {
            "1": {"name": "constant.other.enum.zen"}
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "([a-z_][a-zA-Z0-9_]*)\\s*:=",
          "captures": {
            "1": {"name": "variable.other.immutable.zen"}
          }
        },
        {
          "match": "([a-z_][a-zA-Z0-9_]*)\\s*::=",
          "captures": {
            "1": {"name": "variable.other.mutable.zen"}
          }
        },
        {
          "match": "([a-z_][a-zA-Z0-9_]*)\\s*:",
          "captures": {
            "1": {"name": "variable.parameter.zen"}
          }
        }
      ]
    }
  },
  "scopeName": "source.zen"
}