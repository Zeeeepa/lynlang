// core.zen - Core utilities and types for Zen

// Type aliases for common types
type byte = u8
type rune = i32
type size = u64

// Memory operations
alloc := (size: u64) *void {
    return @compiler.builtin("alloc", size)
}

free := (ptr: *void) void {
    @compiler.builtin("free", ptr)
}

copy := (dest: *void, src: *void, size: u64) void {
    @compiler.builtin("memcpy", dest, src, size)
}

set := (ptr: *void, value: byte, size: u64) void {
    @compiler.builtin("memset", ptr, value, size)
}

// Panic and assertions
panic := (msg: string) void {
    @compiler.builtin("panic", msg)
}

assert := (condition: bool, msg: string) void {
    if !condition {
        panic(msg)
    }
}

// Min/max functions
min := (a: i32, b: i32) i32 {
    if a < b {
        return a
    }
    return b
}

max := (a: i32, b: i32) i32 {
    if a > b {
        return a
    }
    return b
}

// Absolute value
abs := (n: i32) i32 {
    if n < 0 {
        return -n
    }
    return n
}