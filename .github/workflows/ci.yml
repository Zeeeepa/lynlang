name: Zen Language CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  LLVM_VERSION: "18"

jobs:
  # Quick formatting and linting checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check Formatting
      run: cargo fmt -- --check
    
    - name: Run Clippy
      run: cargo clippy -- -W clippy::all
    
    - name: Check Import Syntax
      run: |
        echo "Verifying import syntax compliance..."
        if grep -r "comptime.*{.*@std" --include="*.zen" . 2>/dev/null | grep -v "^Binary"; then
          echo "Error: Found incorrect comptime import usage!"
          exit 1
        else
          echo "✓ Import syntax is correct"
        fi

  # Main build job
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install LLVM
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: ${{ env.LLVM_VERSION }}
        cached: true
    
    - name: Cache Dependencies
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-llvm${{ env.LLVM_VERSION }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build Compiler
      run: cargo build --release --verbose
    
    - name: Upload Compiler Binary
      uses: actions/upload-artifact@v4
      with:
        name: zen-compiler
        path: target/release/zen

  # Parallel test jobs
  test-rust:
    name: Rust Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install LLVM
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: ${{ env.LLVM_VERSION }}
        cached: true
    
    - name: Restore Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-llvm${{ env.LLVM_VERSION }}
    
    - name: Run Rust Tests
      run: cargo test --verbose -- --nocapture
      timeout-minutes: 10

  test-zen:
    name: Zen Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Compiler Binary
      uses: actions/download-artifact@v4
      with:
        name: zen-compiler
        path: target/release/
    
    - name: Make Binary Executable
      run: chmod +x target/release/zen
    
    - name: Test Examples
      run: |
        echo "Testing hello world..."
        ./target/release/zen examples/01_hello_world.zen || true
        
        echo "Testing basics..."
        [ -f examples/01_basics_working.zen ] && ./target/release/zen examples/01_basics_working.zen || true
    
    - name: Run Zen Test Suite
      run: |
        if [ -f ./run_tests.sh ]; then
          echo "Running Zen test suite..."
          ./run_tests.sh || true
        fi

  # Project validation
  validate:
    name: Validate Project
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Structure
      run: |
        echo "=== Validating project structure ==="
        required_dirs=("src" "examples" "tests" "stdlib")
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "✓ $dir exists"
          else
            echo "✗ Missing required directory: $dir"
            exit 1
          fi
        done
    
    - name: Check Documentation
      run: |
        echo "=== Checking documentation ==="
        required_docs=("README.md" "STATUS.md" "LANGUAGE_SPEC.zen")
        for doc in "${required_docs[@]}"; do
          if [ -f "$doc" ]; then
            echo "✓ $doc exists"
          else
            echo "✗ Missing required document: $doc"
            exit 1
          fi
        done
    
    - name: Project Statistics
      run: |
        echo "=== Project Statistics ==="
        echo "Rust files: $(find src -name "*.rs" | wc -l)"
        echo "Zen files: $(find . -name "*.zen" | wc -l)"
        echo "Test files: $(find tests -name "*.rs" -o -name "*.zen" | wc -l)"

  # Matrix testing for different Rust versions
  test-matrix:
    name: Test ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [stable, beta]
        os: [ubuntu-latest]
    continue-on-error: ${{ matrix.rust == 'beta' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Install LLVM
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: ${{ env.LLVM_VERSION }}
        cached: true
    
    - name: Build
      run: cargo build --verbose
    
    - name: Test
      run: cargo test --verbose