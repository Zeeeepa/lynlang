name: Zen Language CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  LLVM_SYS_18_1_PREFIX: /usr/lib/llvm-18
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Install LLVM 18.1
      run: |
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-18 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y llvm-18 llvm-18-dev llvm-18-runtime clang-18 libclang-18-dev lld-18
        sudo ln -sf /usr/bin/llvm-config-18 /usr/bin/llvm-config
        echo "/usr/lib/llvm-18/bin" >> $GITHUB_PATH
        llvm-config --version
    
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build Compiler
      run: |
        export LLVM_SYS_18_1_PREFIX=/usr/lib/llvm-18
        cargo build --release --verbose
    
    - name: Run Tests
      run: |
        export LLVM_SYS_18_1_PREFIX=/usr/lib/llvm-18
        cargo test --verbose -- --nocapture
      timeout-minutes: 10
    
    - name: Check Formatting
      run: cargo fmt -- --check
    
    - name: Run Clippy
      run: cargo clippy -- -W clippy::all
    
    - name: Test Examples
      run: |
        if [ -f ./target/release/zen ]; then
          echo "Testing hello world..."
          ./target/release/zen examples/01_hello_world.zen
          echo "Testing basics..."
          [ -f examples/01_basics_working.zen ] && ./target/release/zen examples/01_basics_working.zen || true
        else
          echo "Error: Zen compiler not built!"
          exit 1
        fi
    
    - name: Verify Self-Hosted Components
      run: |
        echo "Checking self-hosted compiler components..."
        for file in compiler/lexer.zen compiler/parser.zen compiler/codegen.zen; do
          if [ -f "$file" ]; then
            echo "✓ Found $file"
          else
            echo "✗ Missing $file"
          fi
        done
    
    - name: Check Import Syntax
      run: |
        echo "Verifying import syntax compliance..."
        if grep -r "comptime.*{.*@std" --include="*.zen" . 2>/dev/null | grep -v "^Binary"; then
          echo "Error: Found incorrect comptime import usage!"
          exit 1
        else
          echo "✓ Import syntax is correct"
        fi

  lint-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check TODOs
      run: |
        echo "=== TODO/FIXME Comments ==="
        grep -rn "TODO\|FIXME\|XXX\|HACK" . --include="*.zen" --include="*.rs" || echo "No TODOs found"
    
    - name: Validate Project Structure
      run: |
        echo "=== Validating project structure ==="
        required_dirs=("src" "examples" "tests" ".agent")
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "✓ $dir exists"
          else
            echo "✗ Missing directory: $dir"
            echo "Creating $dir..."
            mkdir -p "$dir"
          fi
        done
        
        # Check optional directories
        optional_dirs=("stdlib" "compiler")
        for dir in "${optional_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "✓ $dir exists"
          else
            echo "ℹ Optional directory: $dir not present"
          fi
        done
    
    - name: Count Project Stats
      run: |
        echo "=== Project Statistics ==="
        echo "Rust files: $(find src -name "*.rs" | wc -l)"
        echo "Zen files: $(find . -name "*.zen" | wc -l)"
        echo "Test files: $(find tests -name "*.rs" -o -name "*.zen" | wc -l)"
        echo "Lines of Rust: $(find src -name "*.rs" -exec wc -l {} + | tail -1)"
        echo "Lines of Zen: $(find . -name "*.zen" -exec wc -l {} + | tail -1)"