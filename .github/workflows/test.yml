name: Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  LLVM_SYS_181_PREFIX: /usr/lib/llvm-18

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Install LLVM 18.1
      run: |
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-18 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y llvm-18 llvm-18-dev llvm-18-runtime clang-18 libclang-18-dev lld-18 libpolly-18-dev libllvm18
        sudo ln -sf /usr/bin/llvm-config-18 /usr/bin/llvm-config
        echo "/usr/lib/llvm-18/bin" >> $GITHUB_PATH
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build Debug
      run: |
        export LLVM_SYS_181_PREFIX=/usr/lib/llvm-18
        cargo build --verbose
    
    - name: Run Unit Tests
      run: |
        export LLVM_SYS_181_PREFIX=/usr/lib/llvm-18
        cargo test --lib --verbose -- --nocapture
      timeout-minutes: 10
    
    - name: Run Doc Tests
      run: |
        export LLVM_SYS_181_PREFIX=/usr/lib/llvm-18
        cargo test --doc --verbose
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install LLVM 18.1
      run: |
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-18 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y llvm-18 llvm-18-dev llvm-18-runtime clang-18 libclang-18-dev lld-18 libpolly-18-dev libllvm18
        sudo ln -sf /usr/bin/llvm-config-18 /usr/bin/llvm-config
        echo "/usr/lib/llvm-18/bin" >> $GITHUB_PATH
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build Release
      run: |
        export LLVM_SYS_181_PREFIX=/usr/lib/llvm-18
        cargo build --release
    
    - name: Run Integration Tests
      run: |
        export LLVM_SYS_181_PREFIX=/usr/lib/llvm-18
        cargo test --test '*' --verbose -- --nocapture
      timeout-minutes: 15
    
    - name: Test Zen Examples
      run: |
        echo "Testing Zen examples..."
        ZEN="./target/release/zen"
        
        if [ ! -f "$ZEN" ]; then
          echo "Error: Zen compiler not found!"
          exit 1
        fi
        
        # Test basic examples
        for example in examples/01_hello_world.zen examples/hello.zen; do
          if [ -f "$example" ]; then
            echo "Testing $example..."
            $ZEN "$example" || echo "Warning: $example failed"
          fi
        done
        
        # Test working examples
        for example in examples/*_working.zen; do
          if [ -f "$example" ]; then
            echo "Testing $example..."
            $ZEN "$example" || echo "Warning: $example failed"
          fi
        done
    
    - name: Verify Stdlib
      run: |
        echo "Verifying stdlib modules..."
        stdlib_count=$(find stdlib -name "*.zen" | wc -l)
        echo "Found $stdlib_count stdlib modules"
        
        if [ "$stdlib_count" -lt 50 ]; then
          echo "Warning: Expected more stdlib modules"
        fi
        
        # Check core modules exist (if stdlib exists)
        if [ -d "stdlib" ]; then
          for module in stdlib/core.zen stdlib/io.zen stdlib/string.zen stdlib/math.zen; do
            if [ -f "$module" ]; then
              echo "✓ $module exists"
            else
              echo "ℹ Module not yet implemented: $module"
            fi
          done
        else
          echo "ℹ stdlib directory not found - skipping module checks"
        fi
  
  self-host-tests:
    name: Self-Hosting Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install LLVM 18.1
      run: |
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
        echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-18 main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y llvm-18 llvm-18-dev llvm-18-runtime clang-18 libclang-18-dev lld-18 libpolly-18-dev libllvm18
        echo "/usr/lib/llvm-18/bin" >> $GITHUB_PATH
    
    - name: Build Compiler
      run: |
        export LLVM_SYS_181_PREFIX=/usr/lib/llvm-18
        cargo build --release
    
    - name: Check Self-Hosted Modules
      run: |
        echo "=== Self-Hosted Compiler Status ==="
        
        components=("lexer" "parser" "codegen" "type_checker")
        for comp in "${components[@]}"; do
          if [ -f "compiler/$comp.zen" ]; then
            echo "✓ $comp.zen exists"
            lines=$(wc -l < "compiler/$comp.zen")
            echo "  Lines: $lines"
          else
            echo "✗ $comp.zen missing"
          fi
        done
        
        echo ""
        echo "=== LSP Implementation ==="
        if [ -f "lsp/server.zen" ]; then
          echo "✓ LSP server exists"
        else
          echo "✗ LSP server missing"
        fi
        
        echo ""
        echo "=== Tools ==="
        for tool in zen-check zen-compile zen-lsp; do
          if [ -f "tools/$tool.zen" ]; then
            echo "✓ $tool.zen exists"
          else
            echo "✗ $tool.zen missing"
          fi
        done
    
    - name: Test Summary
      if: always()
      run: |
        echo "================================================"
        echo "            Zen Test Suite Summary              "
        echo "================================================"
        echo "✓ Unit tests completed"
        echo "✓ Integration tests completed"
        echo "✓ Self-hosting checks completed"
        echo "✓ LLVM 18.1 configured correctly"
        echo "================================================"